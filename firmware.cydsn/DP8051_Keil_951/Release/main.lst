C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP8051_Keil_9
                    -51\Release/main.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\main.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // ----------------------------------------------------------------------------
   5          
   6          
   7          /**
   8          * \file         main.c
   9          *
  10          * \brief        Firmware main file.
  11          * \date         June 06, 2016
  12          * \author       qbrobotics
  13          * \copyright    (C)  qbrobotics. All rights reserved.
  14          */
  15          
  16          /**
  17          * \mainpage     Firmware
  18          * \brief        This is the firmware of the qbHand.
  19          * \version      6.0.0
  20          *
  21          * \author       _qbrobotics_
  22          *
  23          * \date         June 06, 2016
  24          *
  25          * \details      This is the firmware of the qbHand. It can control a motor and
  26          *               read its encoder. Also can read and convert analog measurements
  27          *               connected to the PSoC microcontroller.                
  28          *
  29          * \copyright    (C)  qbrobotics. All rights reserved.
  30          *
  31          */
  32          
  33          
  34          // ----------------------------------------------------------------------------
  35          // This version changes:
  36          //      - not reported
  37          
  38          
  39          //=================================================================     includes
  40          
  41          #include <device.h>
  42          #include <globals.h> // ALL GLOBAL DEFINITIONS, STRUCTURES AND MACROS HERE
  43          #include <interruptions.h>
  44          #include <command_processing.h>
  45          #include <utils.h>
  46          
  47          //==============================================================================
  48          //                                                                 MAIN FUNCTION
  49          //==============================================================================
  50          
  51          int main()
  52          {
C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 2   

  53   1          // Iterator
  54   1          uint8 i;         
  55   1          
  56   1          // Variable declarations for DMA 
  57   1          
  58   1          uint8 DMA_Chan;
  59   1          uint8 DMA_TD[1];
  60   1      
  61   1          //================================     initializations - psoc and components
  62   1      
  63   1          // EEPROM
  64   1      
  65   1          EEPROM_Start();
  66   1          memRecall();                                        // recall configuration
  67   1      
  68   1          // FTDI chip enable
  69   1      
  70   1          CyDelay(100);
  71   1          FTDI_ENABLE_REG_Write(0x01);
  72   1          
  73   1          // RS485
  74   1      
  75   1          UART_RS485_Stop();                                  // stop UART
  76   1          UART_RS485_Start();                                 // start UART
  77   1          UART_RS485_Init();
  78   1      
  79   1          UART_RS485_ClearRxBuffer();
  80   1          UART_RS485_ClearTxBuffer();
  81   1      
  82   1          ISR_RS485_RX_StartEx(ISR_RS485_RX_ExInterrupt);     // RS485 isr function
  83   1          
  84   1          // WATCHDOG
  85   1          
  86   1          WATCHDOG_COUNTER_Start();
  87   1          
  88   1          ISR_WATCHDOG_StartEx(ISR_WATCHDOG_Handler);         // WATCHDOG isr function    
  89   1      
  90   1          // PWM
  91   1      
  92   1          PWM_MOTORS_Start();
  93   1          PWM_MOTORS_WriteCompare1(0);
  94   1          PWM_MOTORS_WriteCompare2(0);
  95   1          MOTOR_DIR_Write(0);
  96   1          MOTOR_ON_OFF_Write(0x00);
  97   1      
  98   1      
  99   1          // SSI encoder initializations
 100   1      
 101   1          COUNTER_ENC_Start();
 102   1      
 103   1          SHIFTREG_ENC_1_Start();
 104   1          SHIFTREG_ENC_2_Start();
 105   1          SHIFTREG_ENC_3_Start();
 106   1      
 107   1          // ADC
 108   1      
 109   1          ADC_Start();                                        // start ADC
 110   1          ADC_SOC_Write(0x01);                                // Force first read cycle
 111   1         
 112   1          // DMA
 113   1          DMA_Chan = DMA_DmaInitialize(DMA_BYTES_PER_BURST, DMA_REQUEST_PER_BURST, HI16(DMA_SRC_BASE), HI16(DMA_
             -DST_BASE));
C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 3   

 114   1          DMA_TD[0] = CyDmaTdAllocate();                                                                        
             -  // Allocate TD
 115   1          CyDmaTdSetConfiguration(DMA_TD[0], 2 * 4, DMA_TD[0], TD_SWAP_EN | DMA__TD_TERMOUT_EN | TD_INC_DST_ADR)
             -; // DMA Configurations
 116   1          CyDmaTdSetAddress(DMA_TD[0], LO16((uint32)ADC_DEC_SAMP_PTR), LO16((uint32)ADC_buf));                  
             -  // Set Register Address
 117   1          CyDmaChSetInitialTd(DMA_Chan, DMA_TD[0]);                                                             
             -  // Initialize Channel
 118   1          
 119   1          CyDmaChEnable(DMA_Chan, 1);                                                                           
             -  // Enable DMA
 120   1      
 121   1          RS485_CTS_Write(0);                                 // Clear To Send on RS485
 122   1      
 123   1          // TIMER
 124   1      
 125   1          MY_TIMER_Start();           
 126   1          PACER_TIMER_Start();
 127   1      
 128   1          CYGlobalIntEnable;                                  // enable interrupts
 129   1      
 130   1      //========================================     initializations - clean variables
 131   1      
 132   1          RESET_COUNTERS_Write(0x00);                         // Activate encoder counters
 133   1      
 134   1          CyDelay(10);                                        // Wait for encoders to have a valid value
 135   1      
 136   1          //---------------------------------------------------  Initialize referiment structure
 137   1          for (i = NUM_OF_MOTORS; i--;) 
 138   1              g_ref.pos[i] = 0;
 139   1      
 140   1      
 141   1          g_ref.onoff = c_mem.activ;
 142   1          
 143   1          //---------------------------------------------------  Initialize measurement structure
 144   1          for (i = NUM_OF_SENSORS; i--;) { 
 145   2              g_meas.pos[i] = 0;
 146   2              g_meas.rot[i] = 0;
 147   2          }
 148   1      
 149   1          g_refNew = g_ref;                                   // Initialize k+1 measurements structure
 150   1      
 151   1          g_ref.onoff = c_mem.activ;                          // Initalize Activation
 152   1          
 153   1      
 154   1          MOTOR_ON_OFF_Write(g_ref.onoff);                    // Activating motors
 155   1      
 156   1          dev_pwm_limit = 0;                                  // Init PWM limit
 157   1          tension_valid = FALSE;                              // Init tension_valid BIT
 158   1      
 159   1          reset_last_value_flag = 0;
 160   1      
 161   1          //------------------------------------------------- Initialize package on receive from RS485
 162   1          g_rx.length = 0;
 163   1          g_rx.ready  = 0;
 164   1      
 165   1          //============================================================     main loop
 166   1      
 167   1          for(;;)
 168   1          {
 169   2              // Put the FF reset pin to LOW
 170   2              RESET_FF_Write(0x00);
C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 4   

 171   2      
 172   2              // Call function scheduler
 173   2              function_scheduler();
 174   2      
 175   2              //  Wait until the FF is set to 1
 176   2              while(FF_STATUS_Read() == 0){
 177   3                  // On interrupt from RS485
 178   3                  if (interrupt_flag){
 179   4                      // Reset WDT
 180   4                      WATCHDOG_REFRESH_Write(0x01);
 181   4                      // Reset flags
 182   4                      interrupt_flag = FALSE;
 183   4                      watchdog_flag = FALSE;
 184   4                      // Manage Interrupt on rs485
 185   4                      interrupt_manager();
 186   4                  }
 187   3                  // On interrupt from WDT
 188   3                  else { 
 189   4                      if (watchdog_flag){
 190   5                          // Reset WDT
 191   5                          WATCHDOG_REFRESH_Write(0x01);
 192   5                          // Disactivate motors
 193   5                          g_refNew.onoff = 0x00;
 194   5                      }
 195   4                  }
 196   3              };
 197   2      
 198   2              // Command a FF reset
 199   2              RESET_FF_Write(0x01);
 200   2      
 201   2              // Wait for FF to be reset
 202   2              while(FF_STATUS_Read() == 1);
 203   2      
 204   2              if(UART_RS485_ReadRxStatus() & UART_RS485_RX_STS_SOFT_BUFF_OVER)
 205   2                  UART_RS485_ClearRxBuffer();
 206   2          }
 207   1          return 0;
 208   1      }
 209          
 210          
 211          
 212          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 65
0000 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 66
0003 120000      E     LCALL   memRecall
                                           ; SOURCE LINE # 70
0006 E4                CLR     A
0007 7F64              MOV     R7,#064H
0009 FE                MOV     R6,A
000A FD                MOV     R5,A
000B FC                MOV     R4,A
000C 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 71
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 75
0014 120000      E     LCALL   UART_RS485_Stop
                                           ; SOURCE LINE # 76
0017 120000      E     LCALL   UART_RS485_Start
                                           ; SOURCE LINE # 77
001A 120000      E     LCALL   UART_RS485_Init
                                           ; SOURCE LINE # 79
001D 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 80
0020 120000      E     LCALL   UART_RS485_ClearTxBuffer
                                           ; SOURCE LINE # 82
0023 7E00        E     MOV     R6,#HIGH ISR_RS485_RX_ExInterrupt
0025 7F00        E     MOV     R7,#LOW ISR_RS485_RX_ExInterrupt
0027 120000      E     LCALL   _ISR_RS485_RX_StartEx
                                           ; SOURCE LINE # 86
002A 120000      E     LCALL   WATCHDOG_COUNTER_Start
                                           ; SOURCE LINE # 88
002D 7E00        E     MOV     R6,#HIGH ISR_WATCHDOG_Handler
002F 7F00        E     MOV     R7,#LOW ISR_WATCHDOG_Handler
0031 120000      E     LCALL   _ISR_WATCHDOG_StartEx
                                           ; SOURCE LINE # 92
0034 120000      E     LCALL   PWM_MOTORS_Start
                                           ; SOURCE LINE # 93
0037 E4                CLR     A
0038 FF                MOV     R7,A
0039 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 94
003C E4                CLR     A
003D FF                MOV     R7,A
003E 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
                                           ; SOURCE LINE # 95
0041 E4                CLR     A
0042 FF                MOV     R7,A
0043 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 96
0046 E4                CLR     A
0047 FF                MOV     R7,A
0048 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 101
004B 120000      E     LCALL   COUNTER_ENC_Start
                                           ; SOURCE LINE # 103
004E 120000      E     LCALL   SHIFTREG_ENC_1_Start
C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 6   

                                           ; SOURCE LINE # 104
0051 120000      E     LCALL   SHIFTREG_ENC_2_Start
                                           ; SOURCE LINE # 105
0054 120000      E     LCALL   SHIFTREG_ENC_3_Start
                                           ; SOURCE LINE # 109
0057 120000      E     LCALL   ADC_Start
                                           ; SOURCE LINE # 110
005A 7F01              MOV     R7,#01H
005C 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 113
005F E4                CLR     A
0060 900000      E     MOV     DPTR,#?_DMA_DmaInitialize?BYTE+04H
0063 F0                MOVX    @DPTR,A
0064 A3                INC     DPTR
0065 F0                MOVX    @DPTR,A
0066 FB                MOV     R3,A
0067 FA                MOV     R2,A
0068 7D01              MOV     R5,#01H
006A 7F02              MOV     R7,#02H
006C 120000      E     LCALL   _DMA_DmaInitialize
006F 900000      R     MOV     DPTR,#DMA_Chan
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0074 120000      E     LCALL   CyDmaTdAllocate
0077 900000      R     MOV     DPTR,#DMA_TD
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
007C E0                MOVX    A,@DPTR
007D FB                MOV     R3,A
007E FF                MOV     R7,A
007F 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
0082 7486              MOV     A,#086H
0084 F0                MOVX    @DPTR,A
0085 7D08              MOV     R5,#08H
0087 7C00              MOV     R4,#00H
0089 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 116
008C 7B01              MOV     R3,#01H
008E 7A00        E     MOV     R2,#HIGH ADC_buf
0090 7900        E     MOV     R1,#LOW ADC_buf
0092 E9                MOV     A,R1
0093 EA                MOV     A,R2
0094 E4                CLR     A
0095 AB01              MOV     R3,AR1
0097 900000      R     MOV     DPTR,#DMA_TD
009A E0                MOVX    A,@DPTR
009B FF                MOV     R7,A
009C 7D10              MOV     R5,#010H
009E 7C4E              MOV     R4,#04EH
00A0 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 117
00A3 900000      R     MOV     DPTR,#DMA_Chan
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FD                MOV     R5,A
00AB 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 119
00AE 900000      R     MOV     DPTR,#DMA_Chan
C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 7   

00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 7D01              MOV     R5,#01H
00B5 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 121
00B8 E4                CLR     A
00B9 FF                MOV     R7,A
00BA 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 125
00BD 120000      E     LCALL   MY_TIMER_Start
                                           ; SOURCE LINE # 126
00C0 120000      E     LCALL   PACER_TIMER_Start
                                           ; SOURCE LINE # 128
00C3 D2AF              SETB    EA
00C5 9044F4            MOV     DPTR,#044F4H
00C8 74FD              MOV     A,#0FDH
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
00CB E4                CLR     A
00CC FF                MOV     R7,A
00CD 120000      E     LCALL   _RESET_COUNTERS_Write
                                           ; SOURCE LINE # 134
00D0 E4                CLR     A
00D1 7F0A              MOV     R7,#0AH
00D3 FE                MOV     R6,A
00D4 FD                MOV     R5,A
00D5 FC                MOV     R4,A
00D6 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 137
;---- Variable 'i' assigned to Register 'R3' ----
00D9 7B02              MOV     R3,#02H
00DB         ?C0001:
00DB AF03              MOV     R7,AR3
00DD 1B                DEC     R3
00DE EF                MOV     A,R7
00DF 6018              JZ      ?C0002
                                           ; SOURCE LINE # 138
00E1 E4                CLR     A
00E2 FF                MOV     R7,A
00E3 FE                MOV     R6,A
00E4 FD                MOV     R5,A
00E5 FC                MOV     R4,A
00E6 EB                MOV     A,R3
00E7 25E0              ADD     A,ACC
00E9 25E0              ADD     A,ACC
00EB 2400        E     ADD     A,#LOW g_ref
00ED F582              MOV     DPL,A
00EF E4                CLR     A
00F0 3400        E     ADDC    A,#HIGH g_ref
00F2 F583              MOV     DPH,A
00F4 120000      E     LCALL   ?C?LSTXDATA
00F7 80E2              SJMP    ?C0001
00F9         ?C0002:
                                           ; SOURCE LINE # 141
00F9 900000      E     MOV     DPTR,#c_mem+032H
00FC E0                MOVX    A,@DPTR
00FD 900000      E     MOV     DPTR,#g_ref+018H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0101 7B03              MOV     R3,#03H
0103         ?C0003:
0103 AF03              MOV     R7,AR3
C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 8   

0105 1B                DEC     R3
0106 EF                MOV     A,R7
0107 6024              JZ      ?C0004
                                           ; SOURCE LINE # 145
0109 E4                CLR     A
010A FF                MOV     R7,A
010B FE                MOV     R6,A
010C FD                MOV     R5,A
010D FC                MOV     R4,A
010E EB                MOV     A,R3
010F 25E0              ADD     A,ACC
0111 25E0              ADD     A,ACC
0113 2400        E     ADD     A,#LOW g_meas
0115 F582              MOV     DPL,A
0117 E4                CLR     A
0118 3400        E     ADDC    A,#HIGH g_meas
011A F583              MOV     DPH,A
011C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 146
011F 7400        E     MOV     A,#LOW g_meas+014H
0121 2B                ADD     A,R3
0122 F582              MOV     DPL,A
0124 E4                CLR     A
0125 3400        E     ADDC    A,#HIGH g_meas+014H
0127 F583              MOV     DPH,A
0129 E4                CLR     A
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
012B 80D6              SJMP    ?C0003
012D         ?C0004:
                                           ; SOURCE LINE # 149
012D 7800        E     MOV     R0,#LOW g_refNew
012F 7C00        E     MOV     R4,#HIGH g_refNew
0131 7D01              MOV     R5,#01H
0133 7B01              MOV     R3,#01H
0135 7A00        E     MOV     R2,#HIGH g_ref
0137 7900        E     MOV     R1,#LOW g_ref
0139 7E00              MOV     R6,#00H
013B 7F19              MOV     R7,#019H
013D 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 151
0140 900000      E     MOV     DPTR,#c_mem+032H
0143 E0                MOVX    A,@DPTR
0144 FF                MOV     R7,A
0145 900000      E     MOV     DPTR,#g_ref+018H
0148 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0149 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 156
014C E4                CLR     A
014D 900000      E     MOV     DPTR,#dev_pwm_limit
0150 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
0151 C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 159
0153 C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 162
0155 900000      E     MOV     DPTR,#g_rx+080H
0158 F0                MOVX    @DPTR,A
0159 A3                INC     DPTR
015A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 9   

015B 900000      E     MOV     DPTR,#g_rx+084H
015E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
015F         ?C0005:
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 170
015F E4                CLR     A
0160 FF                MOV     R7,A
0161 120000      E     LCALL   _RESET_FF_Write
                                           ; SOURCE LINE # 173
0164 120000      E     LCALL   function_scheduler
0167         ?C0007:
                                           ; SOURCE LINE # 176
0167 120000      E     LCALL   FF_STATUS_Read
016A EF                MOV     A,R7
016B 7020              JNZ     ?C0008
                                           ; SOURCE LINE # 178
016D 30000E            JNB     interrupt_flag,?C0009
                                           ; SOURCE LINE # 180
0170 7F01              MOV     R7,#01H
0172 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 182
0175 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 183
0177 C200        E     CLR     watchdog_flag
                                           ; SOURCE LINE # 185
0179 120000      E     LCALL   interrupt_manager
                                           ; SOURCE LINE # 186
017C 80E9              SJMP    ?C0007
017E         ?C0009:
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
017E 3000E6            JNB     watchdog_flag,?C0007
                                           ; SOURCE LINE # 191
0181 7F01              MOV     R7,#01H
0183 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 193
0186 E4                CLR     A
0187 900000      E     MOV     DPTR,#g_refNew+018H
018A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
018B 80DA              SJMP    ?C0007
018D         ?C0008:
                                           ; SOURCE LINE # 199
018D 7F01              MOV     R7,#01H
018F 120000      E     LCALL   _RESET_FF_Write
0192         ?C0012:
                                           ; SOURCE LINE # 202
0192 120000      E     LCALL   FF_STATUS_Read
0195 EF                MOV     A,R7
0196 6401              XRL     A,#01H
0198 60F8              JZ      ?C0012
019A         ?C0013:
                                           ; SOURCE LINE # 204
019A 120000      E     LCALL   UART_RS485_ReadRxStatus
019D EF                MOV     A,R7
019E 30E7BE            JNB     ACC.7,?C0005
                                           ; SOURCE LINE # 205
01A1 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 206
C51 COMPILER V9.51   MAIN                                                                  12/05/2016 17:11:54 PAGE 10  

01A4 80B9              SJMP    ?C0005
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
01A6         ?C0015:
01A6 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    423    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
