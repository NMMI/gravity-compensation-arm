C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051_Keil_951\Debug/ma
                    -in.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\main.obj)

line level    source

   1          // ----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // ----------------------------------------------------------------------------
   5          
   6          
   7          /**
   8          * \file         main.c
   9          *
  10          * \brief        Firmware main file.
  11          * \date         May 16, 2016
  12          * \author       qbrobotics
  13          * \copyright    (C)  qbrobotics. All rights reserved.
  14          */
  15          
  16          /**
  17          * \mainpage     Firmware
  18          * \brief        This is the firmware of the qb move.
  19          * \version      0.1 beta 4
  20          *
  21          * \author       _qbrobotics_
  22          *
  23          * \date         May 16, 2016
  24          *
  25          * \details      This is the firmware of the qb move.
  26          *
  27          * \copyright    (C)  qbrobotics. All rights reserved.
  28          *
  29          */
  30          
  31          
  32          // ----------------------------------------------------------------------------
  33          // This version changes:
  34          //      - not reported
  35          
  36          
  37          //=================================================================     includes
  38          
  39          #include <device.h>
  40          #include <globals.h> // ALL GLOBAL DEFINITIONS, STRUCTURES AND MACROS HERE
  41          #include <interruptions.h>
  42          #include <command_processing.h>
  43          #include <utils.h>
  44          
  45          //==============================================================================
  46          //                                                                 MAIN FUNCTION
  47          //==============================================================================
  48          
  49          int main()
  50          {
  51   1          // Iterator
  52   1          uint8 i;         
  53   1          
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 2   

  54   1          // Variable declarations for DMA 
  55   1          
  56   1          uint8 DMA_Chan;
  57   1          uint8 DMA_TD[1];
  58   1      
  59   1          //================================     initializations - psoc and components
  60   1      
  61   1          // EEPROM
  62   1      
  63   1          EEPROM_Start();
  64   1          memRecall();                                        // recall configuration
  65   1      
  66   1          // FTDI chip enable
  67   1      
  68   1          CyDelay(100);
  69   1          FTDI_ENABLE_REG_Write(0x01);
  70   1          
  71   1          // RS485
  72   1      
  73   1          UART_RS485_Stop();                                  // stop UART
  74   1          UART_RS485_Start();                                 // start UART
  75   1          UART_RS485_Init();
  76   1      
  77   1          UART_RS485_ClearRxBuffer();
  78   1          UART_RS485_ClearTxBuffer();
  79   1      
  80   1          ISR_RS485_RX_StartEx(ISR_RS485_RX_ExInterrupt);     // RS485 isr function
  81   1          
  82   1          // WATCHDOG
  83   1          
  84   1          WATCHDOG_COUNTER_Start();
  85   1          
  86   1          ISR_WATCHDOG_StartEx(ISR_WATCHDOG_Handler);         // WATCHDOG isr function    
  87   1      
  88   1          // PWM
  89   1      
  90   1          PWM_MOTORS_Start();
  91   1          PWM_MOTORS_WriteCompare1(0);
  92   1          PWM_MOTORS_WriteCompare2(0);
  93   1          MOTOR_DIR_Write(0);
  94   1          MOTOR_ON_OFF_Write(0x00);
  95   1      
  96   1      
  97   1          // SSI encoder initializations
  98   1      
  99   1          COUNTER_ENC_Start();
 100   1      
 101   1          SHIFTREG_ENC_1_Start();
 102   1          SHIFTREG_ENC_2_Start();
 103   1          SHIFTREG_ENC_3_Start();
 104   1      
 105   1          // ADC
 106   1      
 107   1          ADC_Start();                                        // start ADC
 108   1          ADC_SOC_Write(0x01);                                // Force first read cycle
 109   1         
 110   1          // DMA
 111   1          DMA_Chan = DMA_DmaInitialize(DMA_BYTES_PER_BURST, DMA_REQUEST_PER_BURST, HI16(DMA_SRC_BASE), HI16(DMA_
             -DST_BASE));
 112   1          DMA_TD[0] = CyDmaTdAllocate();                                                                        
             -  // Allocate TD
 113   1          CyDmaTdSetConfiguration(DMA_TD[0], 2 * 4, DMA_TD[0], TD_SWAP_EN | DMA__TD_TERMOUT_EN | TD_INC_DST_ADR)
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 3   

             -; // DMA Configurations
 114   1          CyDmaTdSetAddress(DMA_TD[0], LO16((uint32)ADC_DEC_SAMP_PTR), LO16((uint32)ADC_buf));                  
             -  // Set Register Address
 115   1          CyDmaChSetInitialTd(DMA_Chan, DMA_TD[0]);                                                             
             -  // Initialize Channel
 116   1          
 117   1          CyDmaChEnable(DMA_Chan, 1);                                                                           
             -  // Enable DMA
 118   1      
 119   1          RS485_CTS_Write(0);                                 // Clear To Send on RS485
 120   1      
 121   1          // TIMER
 122   1      
 123   1          MY_TIMER_Start();           
 124   1          PACER_TIMER_Start();
 125   1      
 126   1          CYGlobalIntEnable;                                  // enable interrupts
 127   1      
 128   1      //========================================     initializations - clean variables
 129   1      
 130   1          RESET_COUNTERS_Write(0x00);                         // Activate encoder counters
 131   1      
 132   1          CyDelay(10);                                        // Wait for encoders to have a valid value
 133   1      
 134   1          //---------------------------------------------------  Initialize referiment structure
 135   1          for (i = NUM_OF_MOTORS; i--;) 
 136   1              g_ref.pos[i] = 0;
 137   1      
 138   1      
 139   1          if (c_mem.emg_calibration_flag) {
 140   2              if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 141   2                  (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 142   2                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 143   2                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV))
 144   2                  g_ref.onoff = 0x00;
 145   2              else
 146   2                  g_ref.onoff = c_mem.activ;
 147   2          } else
 148   1              g_ref.onoff = c_mem.activ;
 149   1          
 150   1          //---------------------------------------------------  Initialize measurement structure
 151   1          for (i = NUM_OF_SENSORS; i--;) { 
 152   2              g_meas.pos[i] = 0;
 153   2              g_meas.rot[i] = 0;
 154   2          }
 155   1      
 156   1          g_refNew = g_ref;                                   // Initialize k+1 measurements structure
 157   1      
 158   1          g_ref.onoff = c_mem.activ;                          // Initalize Activation
 159   1          
 160   1          //---------------------------------------------------  Initialize emg structure
 161   1          g_meas.emg[0] = 0;
 162   1          g_meas.emg[1] = 0;
 163   1      
 164   1          MOTOR_ON_OFF_Write(g_ref.onoff);                    // Activating motors
 165   1      
 166   1          dev_pwm_limit = 0;                                  // Init PWM limit
 167   1          tension_valid = FALSE;                              // Init tension_valid BIT
 168   1      
 169   1          reset_last_value_flag = 0;
 170   1      
 171   1          //------------------------------------------------- Initialize package on receive from RS485
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 4   

 172   1          g_rx.length = 0;
 173   1          g_rx.ready  = 0;
 174   1      
 175   1          //============================================================     main loop
 176   1      
 177   1          for(;;)
 178   1          {
 179   2              // Put the FF reset pin to LOW
 180   2              RESET_FF_Write(0x00);
 181   2      
 182   2              // Call function scheduler
 183   2              function_scheduler();
 184   2      
 185   2              //  Wait until the FF is set to 1
 186   2              while(FF_STATUS_Read() == 0){
 187   3                  // On interrupt from RS485
 188   3                  if (interrupt_flag){
 189   4                      // Reset WDT
 190   4                      WATCHDOG_REFRESH_Write(0x01);
 191   4                      // Reset flags
 192   4                      interrupt_flag = FALSE;
 193   4                      watchdog_flag = FALSE;
 194   4                      // Manage Interrupt on rs485
 195   4                      interrupt_manager();
 196   4                  }
 197   3                  // On interrupt from WDT
 198   3                  else { 
 199   4                      if (watchdog_flag){
 200   5                          // Reset WDT
 201   5                          WATCHDOG_REFRESH_Write(0x01);
 202   5                          // Disactivate motors
 203   5                          g_refNew.onoff = 0x00;
 204   5                      }
 205   4                  }
 206   3              };
 207   2      
 208   2              // Command a FF reset
 209   2              RESET_FF_Write(0x01);
 210   2      
 211   2              // Wait for FF to be reset
 212   2              while(FF_STATUS_Read() == 1);
 213   2      
 214   2              if(UART_RS485_ReadRxStatus() & UART_RS485_RX_STS_SOFT_BUFF_OVER)
 215   2                  UART_RS485_ClearRxBuffer();
 216   2          }
 217   1          return 0;
 218   1      }
 219          
 220          
 221          
 222          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 63
0000 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 64
0003 120000      E     LCALL   memRecall
                                           ; SOURCE LINE # 68
0006 7F64              MOV     R7,#064H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 69
0011 7F01              MOV     R7,#01H
0013 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 73
0016 120000      E     LCALL   UART_RS485_Stop
                                           ; SOURCE LINE # 74
0019 120000      E     LCALL   UART_RS485_Start
                                           ; SOURCE LINE # 75
001C 120000      E     LCALL   UART_RS485_Init
                                           ; SOURCE LINE # 77
001F 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 78
0022 120000      E     LCALL   UART_RS485_ClearTxBuffer
                                           ; SOURCE LINE # 80
0025 7E00        E     MOV     R6,#HIGH ISR_RS485_RX_ExInterrupt
0027 7F00        E     MOV     R7,#LOW ISR_RS485_RX_ExInterrupt
0029 120000      E     LCALL   _ISR_RS485_RX_StartEx
                                           ; SOURCE LINE # 84
002C 120000      E     LCALL   WATCHDOG_COUNTER_Start
                                           ; SOURCE LINE # 86
002F 7E00        E     MOV     R6,#HIGH ISR_WATCHDOG_Handler
0031 7F00        E     MOV     R7,#LOW ISR_WATCHDOG_Handler
0033 120000      E     LCALL   _ISR_WATCHDOG_StartEx
                                           ; SOURCE LINE # 90
0036 120000      E     LCALL   PWM_MOTORS_Start
                                           ; SOURCE LINE # 91
0039 7F00              MOV     R7,#00H
003B 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 92
003E 7F00              MOV     R7,#00H
0040 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
                                           ; SOURCE LINE # 93
0043 7F00              MOV     R7,#00H
0045 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 94
0048 7F00              MOV     R7,#00H
004A 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 99
004D 120000      E     LCALL   COUNTER_ENC_Start
                                           ; SOURCE LINE # 101
0050 120000      E     LCALL   SHIFTREG_ENC_1_Start
                                           ; SOURCE LINE # 102
0053 120000      E     LCALL   SHIFTREG_ENC_2_Start
                                           ; SOURCE LINE # 103
0056 120000      E     LCALL   SHIFTREG_ENC_3_Start
                                           ; SOURCE LINE # 107
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 6   

0059 120000      E     LCALL   ADC_Start
                                           ; SOURCE LINE # 108
005C 7F01              MOV     R7,#01H
005E 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 111
0061 900000      E     MOV     DPTR,#?_DMA_DmaInitialize?BYTE+04H
0064 E4                CLR     A
0065 F0                MOVX    @DPTR,A
0066 A3                INC     DPTR
0067 E4                CLR     A
0068 F0                MOVX    @DPTR,A
0069 7B00              MOV     R3,#00H
006B 7A00              MOV     R2,#00H
006D 7D01              MOV     R5,#01H
006F 7F02              MOV     R7,#02H
0071 120000      E     LCALL   _DMA_DmaInitialize
0074 900000      R     MOV     DPTR,#DMA_Chan
0077 EF                MOV     A,R7
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0079 120000      E     LCALL   CyDmaTdAllocate
007C 900000      R     MOV     DPTR,#DMA_TD
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0081 900000      R     MOV     DPTR,#DMA_TD
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#DMA_TD
0089 E0                MOVX    A,@DPTR
008A FB                MOV     R3,A
008B 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
008E 7486              MOV     A,#086H
0090 F0                MOVX    @DPTR,A
0091 7D08              MOV     R5,#08H
0093 7C00              MOV     R4,#00H
0095 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 114
0098 900000      R     MOV     DPTR,#DMA_TD
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D C007              PUSH    AR7
009F 7B01              MOV     R3,#01H
00A1 7A00        E     MOV     R2,#HIGH ADC_buf
00A3 7900        E     MOV     R1,#LOW ADC_buf
00A5 AF01              MOV     R7,AR1
00A7 AE02              MOV     R6,AR2
00A9 AD03              MOV     R5,AR3
00AB 7C00              MOV     R4,#00H
00AD EF                MOV     A,R7
00AE 54FF              ANL     A,#0FFH
00B0 FF                MOV     R7,A
00B1 EE                MOV     A,R6
00B2 54FF              ANL     A,#0FFH
00B4 FE                MOV     R6,A
00B5 ED                MOV     A,R5
00B6 5400              ANL     A,#00H
00B8 FD                MOV     R5,A
00B9 EC                MOV     A,R4
00BA 5400              ANL     A,#00H
00BC FC                MOV     R4,A
00BD AB07              MOV     R3,AR7
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 7   

00BF AA06              MOV     R2,AR6
00C1 D007              POP     AR7
00C3 7D10              MOV     R5,#010H
00C5 7C4E              MOV     R4,#04EH
00C7 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 115
00CA 900000      R     MOV     DPTR,#DMA_Chan
00CD E0                MOVX    A,@DPTR
00CE FF                MOV     R7,A
00CF 900000      R     MOV     DPTR,#DMA_TD
00D2 E0                MOVX    A,@DPTR
00D3 FD                MOV     R5,A
00D4 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 117
00D7 900000      R     MOV     DPTR,#DMA_Chan
00DA E0                MOVX    A,@DPTR
00DB FF                MOV     R7,A
00DC 7D01              MOV     R5,#01H
00DE 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 119
00E1 7F00              MOV     R7,#00H
00E3 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 123
00E6 120000      E     LCALL   MY_TIMER_Start
                                           ; SOURCE LINE # 124
00E9 120000      E     LCALL   PACER_TIMER_Start
                                           ; SOURCE LINE # 126
00EC D2AF              SETB    EA
00EE 9044F4            MOV     DPTR,#044F4H
00F1 74FD              MOV     A,#0FDH
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
00F4 7F00              MOV     R7,#00H
00F6 120000      E     LCALL   _RESET_COUNTERS_Write
                                           ; SOURCE LINE # 132
00F9 7F0A              MOV     R7,#0AH
00FB 7E00              MOV     R6,#00H
00FD 7D00              MOV     R5,#00H
00FF 7C00              MOV     R4,#00H
0101 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 135
0104 900000      R     MOV     DPTR,#i
0107 7402              MOV     A,#02H
0109 F0                MOVX    @DPTR,A
010A         ?C0001:
010A 900000      R     MOV     DPTR,#i
010D E0                MOVX    A,@DPTR
010E FF                MOV     R7,A
010F 14                DEC     A
0110 F0                MOVX    @DPTR,A
0111 EF                MOV     A,R7
0112 6020              JZ      ?C0002
                                           ; SOURCE LINE # 136
0114 7F00              MOV     R7,#00H
0116 7E00              MOV     R6,#00H
0118 7D00              MOV     R5,#00H
011A 7C00              MOV     R4,#00H
011C 900000      R     MOV     DPTR,#i
011F E0                MOVX    A,@DPTR
0120 FB                MOV     R3,A
0121 EB                MOV     A,R3
0122 25E0              ADD     A,ACC
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 8   

0124 25E0              ADD     A,ACC
0126 2400        E     ADD     A,#LOW g_ref
0128 F582              MOV     DPL,A
012A E4                CLR     A
012B 3400        E     ADDC    A,#HIGH g_ref
012D F583              MOV     DPH,A
012F 120000      E     LCALL   ?C?LSTXDATA
0132 80D6              SJMP    ?C0001
0134         ?C0002:
                                           ; SOURCE LINE # 139
0134 900000      E     MOV     DPTR,#c_mem+06FH
0137 E0                MOVX    A,@DPTR
0138 FF                MOV     R7,A
0139 EF                MOV     A,R7
013A 603A              JZ      ?C0003
                                           ; SOURCE LINE # 140
013C 900000      E     MOV     DPTR,#c_mem+033H
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
0141 EF                MOV     A,R7
0142 6402              XRL     A,#02H
0144 601D              JZ      ?C0005
0146 900000      E     MOV     DPTR,#c_mem+033H
0149 E0                MOVX    A,@DPTR
014A FF                MOV     R7,A
014B EF                MOV     A,R7
014C 6403              XRL     A,#03H
014E 6013              JZ      ?C0005
0150 900000      E     MOV     DPTR,#c_mem+033H
0153 E0                MOVX    A,@DPTR
0154 FF                MOV     R7,A
0155 EF                MOV     A,R7
0156 6404              XRL     A,#04H
0158 6009              JZ      ?C0005
015A 900000      E     MOV     DPTR,#c_mem+033H
015D E0                MOVX    A,@DPTR
015E FF                MOV     R7,A
015F EF                MOV     A,R7
0160 B40507            CJNE    A,#05H,?C0004
0163         ?C0005:
                                           ; SOURCE LINE # 144
0163 900000      E     MOV     DPTR,#g_ref+018H
0166 E4                CLR     A
0167 F0                MOVX    @DPTR,A
0168 8016              SJMP    ?C0007
016A         ?C0004:
                                           ; SOURCE LINE # 146
016A 900000      E     MOV     DPTR,#c_mem+032H
016D E0                MOVX    A,@DPTR
016E FF                MOV     R7,A
016F 900000      E     MOV     DPTR,#g_ref+018H
0172 EF                MOV     A,R7
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0174 800A              SJMP    ?C0007
0176         ?C0003:
                                           ; SOURCE LINE # 148
0176 900000      E     MOV     DPTR,#c_mem+032H
0179 E0                MOVX    A,@DPTR
017A FF                MOV     R7,A
017B 900000      E     MOV     DPTR,#g_ref+018H
017E EF                MOV     A,R7
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 9   

017F F0                MOVX    @DPTR,A
0180         ?C0007:
                                           ; SOURCE LINE # 151
0180 900000      R     MOV     DPTR,#i
0183 7403              MOV     A,#03H
0185 F0                MOVX    @DPTR,A
0186         ?C0008:
0186 900000      R     MOV     DPTR,#i
0189 E0                MOVX    A,@DPTR
018A FF                MOV     R7,A
018B 14                DEC     A
018C F0                MOVX    @DPTR,A
018D EF                MOV     A,R7
018E 6031              JZ      ?C0009
                                           ; SOURCE LINE # 152
0190 7F00              MOV     R7,#00H
0192 7E00              MOV     R6,#00H
0194 7D00              MOV     R5,#00H
0196 7C00              MOV     R4,#00H
0198 900000      R     MOV     DPTR,#i
019B E0                MOVX    A,@DPTR
019C FB                MOV     R3,A
019D EB                MOV     A,R3
019E 25E0              ADD     A,ACC
01A0 25E0              ADD     A,ACC
01A2 2400        E     ADD     A,#LOW g_meas
01A4 F582              MOV     DPL,A
01A6 E4                CLR     A
01A7 3400        E     ADDC    A,#HIGH g_meas
01A9 F583              MOV     DPH,A
01AB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 153
01AE 900000      R     MOV     DPTR,#i
01B1 E0                MOVX    A,@DPTR
01B2 FF                MOV     R7,A
01B3 7400        E     MOV     A,#LOW g_meas+014H
01B5 2F                ADD     A,R7
01B6 F582              MOV     DPL,A
01B8 E4                CLR     A
01B9 3400        E     ADDC    A,#HIGH g_meas+014H
01BB F583              MOV     DPH,A
01BD E4                CLR     A
01BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
01BF 80C5              SJMP    ?C0008
01C1         ?C0009:
                                           ; SOURCE LINE # 156
01C1 7B01              MOV     R3,#01H
01C3 7A00        E     MOV     R2,#HIGH g_ref
01C5 7900        E     MOV     R1,#LOW g_ref
01C7 C003              PUSH    AR3
01C9 C002              PUSH    AR2
01CB C001              PUSH    AR1
01CD 7B01              MOV     R3,#01H
01CF 7A00        E     MOV     R2,#HIGH g_refNew
01D1 7900        E     MOV     R1,#LOW g_refNew
01D3 A801              MOV     R0,AR1
01D5 AC02              MOV     R4,AR2
01D7 AD03              MOV     R5,AR3
01D9 D001              POP     AR1
01DB D002              POP     AR2
01DD D003              POP     AR3
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 10  

01DF 7E00              MOV     R6,#00H
01E1 7F19              MOV     R7,#019H
01E3 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 158
01E6 900000      E     MOV     DPTR,#c_mem+032H
01E9 E0                MOVX    A,@DPTR
01EA FF                MOV     R7,A
01EB 900000      E     MOV     DPTR,#g_ref+018H
01EE EF                MOV     A,R7
01EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
01F0 7F00              MOV     R7,#00H
01F2 7E00              MOV     R6,#00H
01F4 7D00              MOV     R5,#00H
01F6 7C00              MOV     R4,#00H
01F8 900000      E     MOV     DPTR,#g_meas+017H
01FB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 162
01FE 7F00              MOV     R7,#00H
0200 7E00              MOV     R6,#00H
0202 7D00              MOV     R5,#00H
0204 7C00              MOV     R4,#00H
0206 900000      E     MOV     DPTR,#g_meas+01BH
0209 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 164
020C 900000      E     MOV     DPTR,#g_ref+018H
020F E0                MOVX    A,@DPTR
0210 FF                MOV     R7,A
0211 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 166
0214 900000      E     MOV     DPTR,#dev_pwm_limit
0217 E4                CLR     A
0218 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
0219 C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 169
021B C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 172
021D 900000      E     MOV     DPTR,#g_rx+080H
0220 E4                CLR     A
0221 F0                MOVX    @DPTR,A
0222 A3                INC     DPTR
0223 E4                CLR     A
0224 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
0225 900000      E     MOV     DPTR,#g_rx+084H
0228 E4                CLR     A
0229 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
022A         ?C0010:
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 180
022A 7F00              MOV     R7,#00H
022C 120000      E     LCALL   _RESET_FF_Write
                                           ; SOURCE LINE # 183
022F 120000      E     LCALL   function_scheduler
0232         ?C0012:
                                           ; SOURCE LINE # 186
0232 120000      E     LCALL   FF_STATUS_Read
0235 EF                MOV     A,R7
0236 7020              JNZ     ?C0013
                                           ; SOURCE LINE # 188
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 11  

0238 30000E            JNB     interrupt_flag,?C0014
                                           ; SOURCE LINE # 190
023B 7F01              MOV     R7,#01H
023D 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 192
0240 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 193
0242 C200        E     CLR     watchdog_flag
                                           ; SOURCE LINE # 195
0244 120000      E     LCALL   interrupt_manager
                                           ; SOURCE LINE # 196
0247 80E9              SJMP    ?C0012
0249         ?C0014:
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
0249 3000E6            JNB     watchdog_flag,?C0012
                                           ; SOURCE LINE # 201
024C 7F01              MOV     R7,#01H
024E 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 203
0251 900000      E     MOV     DPTR,#g_refNew+018H
0254 E4                CLR     A
0255 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0256 80DA              SJMP    ?C0012
0258         ?C0013:
                                           ; SOURCE LINE # 209
0258 7F01              MOV     R7,#01H
025A 120000      E     LCALL   _RESET_FF_Write
025D         ?C0017:
                                           ; SOURCE LINE # 212
025D 120000      E     LCALL   FF_STATUS_Read
0260 EF                MOV     A,R7
0261 6401              XRL     A,#01H
0263 60F8              JZ      ?C0017
0265         ?C0018:
                                           ; SOURCE LINE # 214
0265 120000      E     LCALL   UART_RS485_ReadRxStatus
0268 EF                MOV     A,R7
0269 30E7BE            JNB     ACC.7,?C0010
                                           ; SOURCE LINE # 215
026C 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 216
026F 80B9              SJMP    ?C0010
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0271         ?C0020:
0271 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    626    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.51   MAIN                                                                  05/16/2016 15:21:37 PAGE 12  

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
