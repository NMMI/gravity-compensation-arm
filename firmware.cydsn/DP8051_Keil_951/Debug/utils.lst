C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE UTILS
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\utils.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\utils.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051_Keil_951\Debug/u
                    -tils.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\utils.obj)

line level    source

   1          // -----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // -----------------------------------------------------------------------------
   5          
   6          /**
   7          * \file         utils.h
   8          *
   9          * \brief        Definition of utility functions.
  10          * \date         Feb 16, 2014
  11          * \author       qbrobotics
  12          * \copyright    (C)  qbrobotics. All rights reserved.
  13          */
  14          
  15          #include <utils.h>
  16          #include <math.h>
  17          
  18          //--------------------------------------------------------------     DEFINITIONS
  19          
  20          
  21          
  22          int32 filter_v(int32 new_value) {
  23   1      
  24   1          static int32 old_value, aux;
  25   1      
  26   1          aux = (old_value * (1024 - ALPHA) + (new_value << 6) * (ALPHA)) >> 10;
  27   1      
  28   1          old_value = aux;
  29   1      
  30   1          return (aux >> 6);
  31   1      }
  32          
  33          int32 filter_i1(int32 new_value) {
  34   1      
  35   1          static int32 old_value, aux;
  36   1      
  37   1          aux = (old_value * (1024 - ALPHA) + (new_value << 6) * (ALPHA)) >> 10;
  38   1      
  39   1          old_value = aux;
  40   1      
  41   1          return (aux >> 6);
  42   1      }
  43          
  44          
  45          int32 filter_ch1(int32 new_value) {
  46   1      
  47   1          static int32 old_value, aux;
  48   1      
  49   1          aux = (old_value * (1024 - BETA) + new_value * (BETA)) / 1024;
  50   1      
  51   1          old_value = aux;
  52   1      
  53   1          return aux;
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 2   

  54   1      }
  55          
  56          int32 filter_ch2(int32 new_value) {
  57   1      
  58   1          static int32 old_value, aux;
  59   1      
  60   1          aux = (old_value * (1024 - BETA) + new_value * (BETA)) / 1024;
  61   1      
  62   1          old_value = aux;
  63   1      
  64   1          return aux;
  65   1      }
  66          
  67          //==============================================================================
  68          //                                                                CHECK ENC DATA
  69          //==============================================================================
  70          
  71          // Returns 1 if the encoder data is correct, 0 otherwise
  72          
  73          CYBIT check_enc_data(const uint32 *value) {
  74   1      
  75   1          const uint8* CYIDATA p = (const uint8*)value;
  76   1          uint8 CYDATA a = *p;
  77   1      
  78   1          a = a ^ *(++p);
  79   1          a = a ^ *(++p);
  80   1          a = a ^ *(++p);
  81   1          a = (a & 0x0F) ^ (a>>4);
  82   1      
  83   1          return (0x9669 >> a) & 0x01;
  84   1          //0x9669 is a bit vector representing the !(bitwise XOR) of 4bits
  85   1      }
  86          
  87          //==============================================================================
  88          //                                                                ROUND_FUNCTION
  89          //==============================================================================
  90          
  91          int round(double x) {
  92   1      
  93   1          if (x < 0.0)
  94   1              return (int)(x - 0.5);
  95   1          else
  96   1              return (int)(x + 0.5);
  97   1      }
  98          
  99          //==============================================================================
 100          //                                                                        MODULE
 101          //==============================================================================
 102          
 103          uint32 my_mod(int32 val, int32 divisor) {
 104   1      
 105   1          if (val >= 0) {
 106   2              return (int32)(val % divisor);
 107   2          } else {
 108   2              return (int32)(divisor - (-val % divisor));
 109   2          }
 110   1      }
 111          
 112          
 113          //==============================================================================
 114          //                                                                     CALIBRATE
 115          //==============================================================================
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 3   

 116          
 117          void calibration(void) {
 118   1          static uint8 direction;                 //0 closing, 1 opening
 119   1          static uint16 closure_counter;          //Range [0 - 2^16]
 120   1      
 121   1      
 122   1          // closing
 123   1          if (direction == 0) {
 124   2              g_ref.pos[0] += (calib.speed << g_mem.res[0]);
 125   2              if ((g_ref.pos[0]) > g_mem.pos_lim_sup[0]) {
 126   3                  direction = 1;
 127   3              }
 128   2          } else { //opening
 129   2              g_ref.pos[0] -= (calib.speed << g_mem.res[0]);
 130   2              if (SIGN(g_ref.pos[0]) != 1) {
 131   3                  direction = 0;
 132   3                  closure_counter++;
 133   3                  if (closure_counter == calib.repetitions) {
 134   4                      closure_counter = 0;
 135   4                      calib.enabled = FALSE;
 136   4                  }
 137   3              }
 138   2          }
 139   1      }
 140          
 141          
 142          //==============================================================================
 143          //                                                      DOUBLE ENCODER CALC TURN
 144          //==============================================================================
 145          
 146          // Use this matlab function to calculate I1 and I2
 147          //
 148          // function [inv_a, inv_b] = mod_mul_inv(a, b)
 149          //     a = int32(a);
 150          //     b = int32(b);
 151          //     if b == 0
 152          //         inv_a = 1;
 153          //         inv_b = 0;
 154          //         return
 155          //     else
 156          //         q = idivide(a,b,'floor');
 157          //         r = mod(a,b);
 158          //         [s, t] = mod_mul_inv(b, r);
 159          //     end
 160          //     inv_a = t;
 161          //     inv_b = s - q * t;
 162          // return
 163          
 164          // Number of teeth of the two wheels
 165          #define N1 28
 166          #define N2 27
 167          
 168          #define I1 1
 169          #define I2 (-1)
 170          
 171          // Number of ticks per turn
 172          #define M 65536
 173          
 174          
 175          int calc_turns_fcn(int32 pos1, int32 pos2) {
 176   1          
 177   1          int32 x = (my_mod( - N2*pos2 - N1*pos1, M*N2) + M/2) / M;
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 4   

 178   1      
 179   1          int32 aux = my_mod(x*I1, N2);
 180   1          
 181   1          return (my_mod(aux + N2/2, N2) - N2/2);
 182   1      }
 183          
 184          /* [] END OF FILE */
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _filter_v (BEGIN)
                                           ; SOURCE LINE # 22
0000 900000      R     MOV     DPTR,#new_value
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 26
0006 900000      R     MOV     DPTR,#new_value
0009 120000      E     LCALL   ?C?LLDXDATA
000C 7806              MOV     R0,#06H
000E 120000      E     LCALL   ?C?LSHL
0011 7B03              MOV     R3,#03H
0013 7A00              MOV     R2,#00H
0015 7900              MOV     R1,#00H
0017 7800              MOV     R0,#00H
0019 120000      E     LCALL   ?C?LMUL
001C C004              PUSH    AR4
001E C005              PUSH    AR5
0020 C006              PUSH    AR6
0022 C007              PUSH    AR7
0024 7FFD              MOV     R7,#0FDH
0026 7E03              MOV     R6,#03H
0028 7D00              MOV     R5,#00H
002A 7C00              MOV     R4,#00H
002C 900000      R     MOV     DPTR,#old_value
002F 120000      E     LCALL   ?C?LLDXDATA0
0032 120000      E     LCALL   ?C?LMUL
0035 A804              MOV     R0,AR4
0037 A905              MOV     R1,AR5
0039 AA06              MOV     R2,AR6
003B AB07              MOV     R3,AR7
003D D007              POP     AR7
003F D006              POP     AR6
0041 D005              POP     AR5
0043 D004              POP     AR4
0045 120000      E     LCALL   ?C?LADD
0048 780A              MOV     R0,#0AH
004A 120000      E     LCALL   ?C?SLSHR
004D 900000      R     MOV     DPTR,#aux
0050 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 28
0053 900000      R     MOV     DPTR,#aux
0056 120000      E     LCALL   ?C?LLDXDATA
0059 900000      R     MOV     DPTR,#old_value
005C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 30
005F 900000      R     MOV     DPTR,#aux
0062 120000      E     LCALL   ?C?LLDXDATA
0065 7806              MOV     R0,#06H
0067 120000      E     LCALL   ?C?SLSHR
                                           ; SOURCE LINE # 31
006A         ?C0001:
006A 22                RET     
             ; FUNCTION _filter_v (END)

             ; FUNCTION _filter_i1 (BEGIN)
                                           ; SOURCE LINE # 33
0000 900000      R     MOV     DPTR,#new_value
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 37
0006 900000      R     MOV     DPTR,#new_value
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 6   

0009 120000      E     LCALL   ?C?LLDXDATA
000C 7806              MOV     R0,#06H
000E 120000      E     LCALL   ?C?LSHL
0011 7B03              MOV     R3,#03H
0013 7A00              MOV     R2,#00H
0015 7900              MOV     R1,#00H
0017 7800              MOV     R0,#00H
0019 120000      E     LCALL   ?C?LMUL
001C C004              PUSH    AR4
001E C005              PUSH    AR5
0020 C006              PUSH    AR6
0022 C007              PUSH    AR7
0024 7FFD              MOV     R7,#0FDH
0026 7E03              MOV     R6,#03H
0028 7D00              MOV     R5,#00H
002A 7C00              MOV     R4,#00H
002C 900000      R     MOV     DPTR,#old_value
002F 120000      E     LCALL   ?C?LLDXDATA0
0032 120000      E     LCALL   ?C?LMUL
0035 A804              MOV     R0,AR4
0037 A905              MOV     R1,AR5
0039 AA06              MOV     R2,AR6
003B AB07              MOV     R3,AR7
003D D007              POP     AR7
003F D006              POP     AR6
0041 D005              POP     AR5
0043 D004              POP     AR4
0045 120000      E     LCALL   ?C?LADD
0048 780A              MOV     R0,#0AH
004A 120000      E     LCALL   ?C?SLSHR
004D 900000      R     MOV     DPTR,#aux
0050 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 39
0053 900000      R     MOV     DPTR,#aux
0056 120000      E     LCALL   ?C?LLDXDATA
0059 900000      R     MOV     DPTR,#old_value
005C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 41
005F 900000      R     MOV     DPTR,#aux
0062 120000      E     LCALL   ?C?LLDXDATA
0065 7806              MOV     R0,#06H
0067 120000      E     LCALL   ?C?SLSHR
                                           ; SOURCE LINE # 42
006A         ?C0002:
006A 22                RET     
             ; FUNCTION _filter_i1 (END)

             ; FUNCTION _filter_ch1 (BEGIN)
                                           ; SOURCE LINE # 45
0000 900000      R     MOV     DPTR,#new_value
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 49
0006 7F32              MOV     R7,#032H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#new_value
0011 120000      E     LCALL   ?C?LLDXDATA0
0014 120000      E     LCALL   ?C?LMUL
0017 C004              PUSH    AR4
0019 C005              PUSH    AR5
001B C006              PUSH    AR6
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 7   

001D C007              PUSH    AR7
001F 7FCE              MOV     R7,#0CEH
0021 7E03              MOV     R6,#03H
0023 7D00              MOV     R5,#00H
0025 7C00              MOV     R4,#00H
0027 900000      R     MOV     DPTR,#old_value
002A 120000      E     LCALL   ?C?LLDXDATA0
002D 120000      E     LCALL   ?C?LMUL
0030 A804              MOV     R0,AR4
0032 A905              MOV     R1,AR5
0034 AA06              MOV     R2,AR6
0036 AB07              MOV     R3,AR7
0038 D007              POP     AR7
003A D006              POP     AR6
003C D005              POP     AR5
003E D004              POP     AR4
0040 120000      E     LCALL   ?C?LADD
0043 7B00              MOV     R3,#00H
0045 7A04              MOV     R2,#04H
0047 7900              MOV     R1,#00H
0049 7800              MOV     R0,#00H
004B 120000      E     LCALL   ?C?SLDIV
004E 900000      R     MOV     DPTR,#aux
0051 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 51
0054 900000      R     MOV     DPTR,#aux
0057 120000      E     LCALL   ?C?LLDXDATA
005A 900000      R     MOV     DPTR,#old_value
005D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 53
0060 900000      R     MOV     DPTR,#aux
0063 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 54
0066         ?C0003:
0066 22                RET     
             ; FUNCTION _filter_ch1 (END)

             ; FUNCTION _filter_ch2 (BEGIN)
                                           ; SOURCE LINE # 56
0000 900000      R     MOV     DPTR,#new_value
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 60
0006 7F32              MOV     R7,#032H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#new_value
0011 120000      E     LCALL   ?C?LLDXDATA0
0014 120000      E     LCALL   ?C?LMUL
0017 C004              PUSH    AR4
0019 C005              PUSH    AR5
001B C006              PUSH    AR6
001D C007              PUSH    AR7
001F 7FCE              MOV     R7,#0CEH
0021 7E03              MOV     R6,#03H
0023 7D00              MOV     R5,#00H
0025 7C00              MOV     R4,#00H
0027 900000      R     MOV     DPTR,#old_value
002A 120000      E     LCALL   ?C?LLDXDATA0
002D 120000      E     LCALL   ?C?LMUL
0030 A804              MOV     R0,AR4
0032 A905              MOV     R1,AR5
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 8   

0034 AA06              MOV     R2,AR6
0036 AB07              MOV     R3,AR7
0038 D007              POP     AR7
003A D006              POP     AR6
003C D005              POP     AR5
003E D004              POP     AR4
0040 120000      E     LCALL   ?C?LADD
0043 7B00              MOV     R3,#00H
0045 7A04              MOV     R2,#04H
0047 7900              MOV     R1,#00H
0049 7800              MOV     R0,#00H
004B 120000      E     LCALL   ?C?SLDIV
004E 900000      R     MOV     DPTR,#aux
0051 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 62
0054 900000      R     MOV     DPTR,#aux
0057 120000      E     LCALL   ?C?LLDXDATA
005A 900000      R     MOV     DPTR,#old_value
005D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 64
0060 900000      R     MOV     DPTR,#aux
0063 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 65
0066         ?C0004:
0066 22                RET     
             ; FUNCTION _filter_ch2 (END)

             ; FUNCTION _check_enc_data (BEGIN)
                                           ; SOURCE LINE # 73
0000 900000      R     MOV     DPTR,#value
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 75
0006 900000      R     MOV     DPTR,#value
0009 120000      E     LCALL   ?C?PLDXDATA
000C 7800        R     MOV     R0,#LOW p
000E 120000      E     LCALL   ?C?PSTIDATA
                                           ; SOURCE LINE # 76
0011 7800        R     MOV     R0,#LOW p
0013 120000      E     LCALL   ?C?PLDIDATA
0016 120000      E     LCALL   ?C?CLDPTR
0019 FF                MOV     R7,A
001A 8F00        R     MOV     a,R7
                                           ; SOURCE LINE # 78
001C 7800        R     MOV     R0,#LOW p
001E E4                CLR     A
001F 75F001            MOV     B,#01H
0022 120000      E     LCALL   ?C?PILDIDATA
0025 120000      E     LCALL   ?C?CLDPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 6200        R     XRL     a,A
                                           ; SOURCE LINE # 79
002C 7800        R     MOV     R0,#LOW p
002E E4                CLR     A
002F 75F001            MOV     B,#01H
0032 120000      E     LCALL   ?C?PILDIDATA
0035 120000      E     LCALL   ?C?CLDPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 6200        R     XRL     a,A
                                           ; SOURCE LINE # 80
003C 7800        R     MOV     R0,#LOW p
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 9   

003E E4                CLR     A
003F 75F001            MOV     B,#01H
0042 120000      E     LCALL   ?C?PILDIDATA
0045 120000      E     LCALL   ?C?CLDPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A 6200        R     XRL     a,A
                                           ; SOURCE LINE # 81
004C E500        R     MOV     A,a
004E C4                SWAP    A
004F 540F              ANL     A,#0FH
0051 FF                MOV     R7,A
0052 E500        R     MOV     A,a
0054 540F              ANL     A,#0FH
0056 FE                MOV     R6,A
0057 EF                MOV     A,R7
0058 6E                XRL     A,R6
0059 F500        R     MOV     a,A
                                           ; SOURCE LINE # 83
005B AF00        R     MOV     R7,a
005D 7469              MOV     A,#069H
005F 7E96              MOV     R6,#096H
0061 A807              MOV     R0,AR7
0063 08                INC     R0
0064 8005              SJMP    ?C0022
0066         ?C0021:
0066 CE                XCH     A,R6
0067 C3                CLR     C
0068 13                RRC     A
0069 CE                XCH     A,R6
006A 13                RRC     A
006B         ?C0022:
006B D8F9              DJNZ    R0,?C0021
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 13                RRC     A
                                           ; SOURCE LINE # 85
0070         ?C0005:
0070 22                RET     
             ; FUNCTION _check_enc_data (END)

             ; FUNCTION _round (BEGIN)
                                           ; SOURCE LINE # 91
0000 900000      R     MOV     DPTR,#x
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 93
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#x
0011 120000      E     LCALL   ?C?LLDXDATA0
0014 120000      E     LCALL   ?C?FPCMP3
0017 5015              JNC     ?C0006
                                           ; SOURCE LINE # 94
0019 7F00              MOV     R7,#00H
001B 7E00              MOV     R6,#00H
001D 7D00              MOV     R5,#00H
001F 7CBF              MOV     R4,#0BFH
0021 900000      R     MOV     DPTR,#x
0024 120000      E     LCALL   ?C?LLDXDATA0
0027 120000      E     LCALL   ?C?FPADD
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 10  

002A 120000      E     LCALL   ?C?CASTF
002D 22                RET     
002E         ?C0006:
                                           ; SOURCE LINE # 96
002E 7F00              MOV     R7,#00H
0030 7E00              MOV     R6,#00H
0032 7D00              MOV     R5,#00H
0034 7C3F              MOV     R4,#03FH
0036 900000      R     MOV     DPTR,#x
0039 120000      E     LCALL   ?C?LLDXDATA0
003C 120000      E     LCALL   ?C?FPADD
003F 120000      E     LCALL   ?C?CASTF
                                           ; SOURCE LINE # 97
0042         ?C0007:
0042 22                RET     
             ; FUNCTION _round (END)

             ; FUNCTION _my_mod (BEGIN)
                                           ; SOURCE LINE # 103
0000 900000      R     MOV     DPTR,#val
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 105
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#val
0011 120000      E     LCALL   ?C?LLDXDATA0
0014 C3                CLR     C
0015 120000      E     LCALL   ?C?SLCMP
0018 4018              JC      ?C0009
                                           ; SOURCE LINE # 106
001A 900000      R     MOV     DPTR,#divisor
001D 120000      E     LCALL   ?C?LLDXDATA0
0020 900000      R     MOV     DPTR,#val
0023 120000      E     LCALL   ?C?LLDXDATA
0026 120000      E     LCALL   ?C?SLDIV
0029 AC00              MOV     R4,AR0
002B AD01              MOV     R5,AR1
002D AE02              MOV     R6,AR2
002F AF03              MOV     R7,AR3
0031 22                RET     
                                           ; SOURCE LINE # 107
0032         ?C0009:
                                           ; SOURCE LINE # 108
0032 900000      R     MOV     DPTR,#val
0035 120000      E     LCALL   ?C?LLDXDATA
0038 120000      E     LCALL   ?C?LNEG
003B 900000      R     MOV     DPTR,#divisor
003E 120000      E     LCALL   ?C?LLDXDATA0
0041 120000      E     LCALL   ?C?SLDIV
0044 900000      R     MOV     DPTR,#divisor
0047 120000      E     LCALL   ?C?LLDXDATA
004A 120000      E     LCALL   ?C?LSUB
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
004D         ?C0010:
004D 22                RET     
             ; FUNCTION _my_mod (END)

             ; FUNCTION calibration (BEGIN)
                                           ; SOURCE LINE # 117
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 11  

                                           ; SOURCE LINE # 123
0000 900000      R     MOV     DPTR,#direction
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7060              JNZ     ?C0012
                                           ; SOURCE LINE # 124
0008 900000      E     MOV     DPTR,#g_ref
000B 120000      E     LCALL   ?C?LLDXDATA
000E C004              PUSH    AR4
0010 C005              PUSH    AR5
0012 C006              PUSH    AR6
0014 C007              PUSH    AR7
0016 900000      E     MOV     DPTR,#calib+02H
0019 E0                MOVX    A,@DPTR
001A FE                MOV     R6,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 900000      E     MOV     DPTR,#g_mem+035H
0021 E0                MOVX    A,@DPTR
0022 FD                MOV     R5,A
0023 EF                MOV     A,R7
0024 A805              MOV     R0,AR5
0026 08                INC     R0
0027 8005              SJMP    ?C0024
0029         ?C0023:
0029 C3                CLR     C
002A 33                RLC     A
002B CE                XCH     A,R6
002C 33                RLC     A
002D CE                XCH     A,R6
002E         ?C0024:
002E D8F9              DJNZ    R0,?C0023
0030 FF                MOV     R7,A
0031 AB07              MOV     R3,AR7
0033 AA06              MOV     R2,AR6
0035 EA                MOV     A,R2
0036 33                RLC     A
0037 95E0              SUBB    A,ACC
0039 F9                MOV     R1,A
003A F8                MOV     R0,A
003B D007              POP     AR7
003D D006              POP     AR6
003F D005              POP     AR5
0041 D004              POP     AR4
0043 120000      E     LCALL   ?C?LADD
0046 900000      E     MOV     DPTR,#g_ref
0049 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 125
004C 900000      E     MOV     DPTR,#g_mem+059H
004F 120000      E     LCALL   ?C?LLDXDATA
0052 900000      E     MOV     DPTR,#g_ref
0055 120000      E     LCALL   ?C?LLDXDATA0
0058 D3                SETB    C
0059 120000      E     LCALL   ?C?SLCMP
005C 5003              JNC     $ + 5H
005E 020000      R     LJMP    ?C0019
                                           ; SOURCE LINE # 126
0061 900000      R     MOV     DPTR,#direction
0064 7401              MOV     A,#01H
0066 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 12  

                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
0067 22                RET     
0068         ?C0012:
                                           ; SOURCE LINE # 129
0068 900000      E     MOV     DPTR,#g_ref
006B 120000      E     LCALL   ?C?LLDXDATA
006E C004              PUSH    AR4
0070 C005              PUSH    AR5
0072 C006              PUSH    AR6
0074 C007              PUSH    AR7
0076 900000      E     MOV     DPTR,#calib+02H
0079 E0                MOVX    A,@DPTR
007A FE                MOV     R6,A
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E 900000      E     MOV     DPTR,#g_mem+035H
0081 E0                MOVX    A,@DPTR
0082 FD                MOV     R5,A
0083 EF                MOV     A,R7
0084 A805              MOV     R0,AR5
0086 08                INC     R0
0087 8005              SJMP    ?C0026
0089         ?C0025:
0089 C3                CLR     C
008A 33                RLC     A
008B CE                XCH     A,R6
008C 33                RLC     A
008D CE                XCH     A,R6
008E         ?C0026:
008E D8F9              DJNZ    R0,?C0025
0090 FF                MOV     R7,A
0091 AB07              MOV     R3,AR7
0093 AA06              MOV     R2,AR6
0095 EA                MOV     A,R2
0096 33                RLC     A
0097 95E0              SUBB    A,ACC
0099 F9                MOV     R1,A
009A F8                MOV     R0,A
009B D007              POP     AR7
009D D006              POP     AR6
009F D005              POP     AR5
00A1 D004              POP     AR4
00A3 120000      E     LCALL   ?C?LSUB
00A6 900000      E     MOV     DPTR,#g_ref
00A9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 130
00AC 7F00              MOV     R7,#00H
00AE 7E00              MOV     R6,#00H
00B0 7D00              MOV     R5,#00H
00B2 7C00              MOV     R4,#00H
00B4 900000      E     MOV     DPTR,#g_ref
00B7 120000      E     LCALL   ?C?LLDXDATA0
00BA C3                CLR     C
00BB 120000      E     LCALL   ?C?SLCMP
00BE 4006              JC      ?C0016
00C0 7E00              MOV     R6,#00H
00C2 7F01              MOV     R7,#01H
00C4 8004              SJMP    ?C0017
00C6         ?C0016:
00C6 7EFF              MOV     R6,#0FFH
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 13  

00C8 7FFF              MOV     R7,#0FFH
00CA         ?C0017:
00CA EF                MOV     A,R7
00CB 6401              XRL     A,#01H
00CD 4E                ORL     A,R6
00CE 6034              JZ      ?C0019
                                           ; SOURCE LINE # 131
00D0 900000      R     MOV     DPTR,#direction
00D3 E4                CLR     A
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
00D5 900000      R     MOV     DPTR,#closure_counter
00D8 E4                CLR     A
00D9 75F001            MOV     B,#01H
00DC 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 133
00DF 900000      R     MOV     DPTR,#closure_counter
00E2 E0                MOVX    A,@DPTR
00E3 FE                MOV     R6,A
00E4 A3                INC     DPTR
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 900000      E     MOV     DPTR,#calib+04H
00EA E0                MOVX    A,@DPTR
00EB FC                MOV     R4,A
00EC A3                INC     DPTR
00ED E0                MOVX    A,@DPTR
00EE FD                MOV     R5,A
00EF ED                MOV     A,R5
00F0 B50711            CJNE    A,AR7,?C0019
00F3 EC                MOV     A,R4
00F4 B5060D            CJNE    A,AR6,?C0019
                                           ; SOURCE LINE # 134
00F7 900000      R     MOV     DPTR,#closure_counter
00FA E4                CLR     A
00FB F0                MOVX    @DPTR,A
00FC A3                INC     DPTR
00FD E4                CLR     A
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
00FF 900000      E     MOV     DPTR,#calib
0102 E4                CLR     A
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
0104         ?C0019:
0104 22                RET     
             ; FUNCTION calibration (END)

             ; FUNCTION _calc_turns_fcn (BEGIN)
                                           ; SOURCE LINE # 175
0000 900000      R     MOV     DPTR,#pos1
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 177
0006 7F1C              MOV     R7,#01CH
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#pos1
0011 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 14  

0014 120000      E     LCALL   ?C?LMUL
0017 C004              PUSH    AR4
0019 C005              PUSH    AR5
001B C006              PUSH    AR6
001D C007              PUSH    AR7
001F 7FE5              MOV     R7,#0E5H
0021 7EFF              MOV     R6,#0FFH
0023 7DFF              MOV     R5,#0FFH
0025 7CFF              MOV     R4,#0FFH
0027 900000      R     MOV     DPTR,#pos2
002A 120000      E     LCALL   ?C?LLDXDATA0
002D 120000      E     LCALL   ?C?LMUL
0030 D003              POP     AR3
0032 D002              POP     AR2
0034 D001              POP     AR1
0036 D000              POP     AR0
0038 120000      E     LCALL   ?C?LSUB
003B C004              PUSH    AR4
003D C005              PUSH    AR5
003F C006              PUSH    AR6
0041 C007              PUSH    AR7
0043 7F00              MOV     R7,#00H
0045 7E00              MOV     R6,#00H
0047 7D1B              MOV     R5,#01BH
0049 7C00              MOV     R4,#00H
004B 900000      R     MOV     DPTR,#?_my_mod?BYTE+04H
004E 120000      E     LCALL   ?C?LSTXDATA
0051 D007              POP     AR7
0053 D006              POP     AR6
0055 D005              POP     AR5
0057 D004              POP     AR4
0059 120000      R     LCALL   _my_mod
005C EF                MOV     A,R7
005D 2400              ADD     A,#00H
005F FF                MOV     R7,A
0060 EE                MOV     A,R6
0061 3480              ADDC    A,#080H
0063 FE                MOV     R6,A
0064 ED                MOV     A,R5
0065 3400              ADDC    A,#00H
0067 FD                MOV     R5,A
0068 EC                MOV     A,R4
0069 3400              ADDC    A,#00H
006B FC                MOV     R4,A
006C 7B00              MOV     R3,#00H
006E 7A00              MOV     R2,#00H
0070 7901              MOV     R1,#01H
0072 7800              MOV     R0,#00H
0074 120000      E     LCALL   ?C?ULDIV
0077 900000      R     MOV     DPTR,#x
007A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 179
007D 900000      R     MOV     DPTR,#x
0080 120000      E     LCALL   ?C?LLDXDATA
0083 C004              PUSH    AR4
0085 C005              PUSH    AR5
0087 C006              PUSH    AR6
0089 C007              PUSH    AR7
008B 7F1B              MOV     R7,#01BH
008D 7E00              MOV     R6,#00H
008F 7D00              MOV     R5,#00H
0091 7C00              MOV     R4,#00H
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 15  

0093 900000      R     MOV     DPTR,#?_my_mod?BYTE+04H
0096 120000      E     LCALL   ?C?LSTXDATA
0099 D007              POP     AR7
009B D006              POP     AR6
009D D005              POP     AR5
009F D004              POP     AR4
00A1 120000      R     LCALL   _my_mod
00A4 900000      R     MOV     DPTR,#aux
00A7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 181
00AA 900000      R     MOV     DPTR,#aux
00AD 120000      E     LCALL   ?C?LLDXDATA
00B0 EF                MOV     A,R7
00B1 240D              ADD     A,#0DH
00B3 FF                MOV     R7,A
00B4 EE                MOV     A,R6
00B5 3400              ADDC    A,#00H
00B7 FE                MOV     R6,A
00B8 ED                MOV     A,R5
00B9 3400              ADDC    A,#00H
00BB FD                MOV     R5,A
00BC EC                MOV     A,R4
00BD 3400              ADDC    A,#00H
00BF FC                MOV     R4,A
00C0 C004              PUSH    AR4
00C2 C005              PUSH    AR5
00C4 C006              PUSH    AR6
00C6 C007              PUSH    AR7
00C8 7F1B              MOV     R7,#01BH
00CA 7E00              MOV     R6,#00H
00CC 7D00              MOV     R5,#00H
00CE 7C00              MOV     R4,#00H
00D0 900000      R     MOV     DPTR,#?_my_mod?BYTE+04H
00D3 120000      E     LCALL   ?C?LSTXDATA
00D6 D007              POP     AR7
00D8 D006              POP     AR6
00DA D005              POP     AR5
00DC D004              POP     AR4
00DE 120000      R     LCALL   _my_mod
00E1 EF                MOV     A,R7
00E2 24F3              ADD     A,#0F3H
00E4 FF                MOV     R7,A
00E5 EE                MOV     A,R6
00E6 34FF              ADDC    A,#0FFH
00E8 FE                MOV     R6,A
                                           ; SOURCE LINE # 182
00E9         ?C0020:
00E9 22                RET     
             ; FUNCTION _calc_turns_fcn (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1173    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     35      47
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----       3
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.51   UTILS                                                                 05/16/2016 14:53:50 PAGE 16  

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
