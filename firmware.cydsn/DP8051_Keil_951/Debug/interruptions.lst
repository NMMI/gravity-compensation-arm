C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE INTERRUPTIONS
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\interruptions.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\interruptions.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051_Keil_951
                    -\Debug/interruptions.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\interruptions.obj)

line level    source

   1          // ----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // ----------------------------------------------------------------------------
   5          
   6          /**
   7          * \file         interruptions.c
   8          *
   9          * \brief        Interruption functions are in this file.
  10          * \date         Feb 06, 2012
  11          * \author       qbrobotics
  12          * \copyright    (C)  qbrobotics. All rights reserved.
  13          */
  14          
  15          
  16          //=================================================================     includes
  17          #include <interruptions.h>
  18          #include <command_processing.h>
  19          #include <globals.h>
  20          #include <utils.h>
  21          
  22          
  23          //==============================================================================
  24          //                                                            RS485 RX INTERRUPT
  25          //==============================================================================
  26          // Processing RS-485 data frame:
  27          //
  28          // - 0:     Waits for beggining characters
  29          // - 1:     Waits for ID;
  30          // - 2:     Data length;
  31          // - 3:     Receive all bytes;
  32          // - 4:     Wait for another device end of transmission;
  33          //
  34          //==============================================================================
  35          
  36          // PWM values needed to obtain 11.5 V given a certain input tension
  37          // Numbers are sperimentally calculated //[index] (millivolts)
  38          static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  39                                                        83,
  40                                                        78,
  41                                                        76,
  42                                                        74,
  43                                                        72,    //5 (14000)
  44                                                        70,
  45                                                        68,
  46                                                        67,
  47                                                        65,
  48                                                        64,    //10 (16500)
  49                                                        63,
  50                                                        62,
  51                                                        61,
  52                                                        60,
  53                                                        59,    //15 (19000)
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 2   

  54                                                        58,
  55                                                        57,
  56                                                        56,
  57                                                        56,
  58                                                        55,    //20 (21500)
  59                                                        54,
  60                                                        54,
  61                                                        53,
  62                                                        52,
  63                                                        52,    //25 (24000)
  64                                                        52,
  65                                                        51,
  66                                                        51};   //28 (25500)
  67          
  68          //==============================================================================
  69          //                                                            WATCHDOG INTERRUPT
  70          //==============================================================================
  71          
  72          CY_ISR(ISR_WATCHDOG_Handler){
  73   1      
  74   1          // Set WDT flag
  75   1          
  76   1          watchdog_flag = TRUE;
  77   1      
  78   1      }
  79          
  80          //==============================================================================
  81          //                                                            RS485 RX INTERRUPT
  82          //==============================================================================
  83          
  84          CY_ISR(ISR_RS485_RX_ExInterrupt) {
  85   1      
  86   1          // Set RS485 flag
  87   1          
  88   1          interrupt_flag = TRUE;
  89   1           
  90   1      }
  91          
  92          //==============================================================================
  93          //                                                             INTERRUPT MANAGER
  94          //==============================================================================
  95          // Manage interrupt from RS485 
  96          //==============================================================================
  97          // Processing RS-485 data frame:
  98          //
  99          // - WAIT_START:    Waits for beginning characters;
 100          // - WAIT_ID:       Waits for ID;
 101          // - WAIT_LENGTH:   Data length;
 102          // - RECEIVE:       Receive all bytes;
 103          // - UNLOAD:        Wait for another device end of transmission;
 104          //
 105          //==============================================================================
 106          
 107          void interrupt_manager(){
 108   1      
 109   1          
 110   1          //===========================================     local variables definition
 111   1      
 112   1          static uint8 CYDATA state = WAIT_START;                      // state
 113   1          
 114   1          //------------------------------------------------- local data packet
 115   1          static uint8 CYDATA data_packet_index;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 3   

 116   1          static uint8 CYDATA data_packet_length;
 117   1          static uint8 data_packet_buffer[128];                     
 118   1          static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 119   1          //-------------------------------------------------
 120   1      
 121   1          uint8 CYDATA    rx_data;                            // RS485 UART rx data
 122   1          CYBIT           rx_data_type;                       // my id?
 123   1          uint8 CYDATA    package_count = 0;                     
 124   1      
 125   1          //======================================================     receive routine
 126   1          
 127   1          // Get data until buffer is not empty 
 128   1          
 129   1          while(UART_RS485_GetRxBufferSize() && (package_count < 6)){  
 130   2              // 6 stima di numero massimo di pacchetti che riesco a leggere senza bloccare l'esecuzione del fir
             -mware
 131   2              
 132   2              // Get next char
 133   2              rx_data = UART_RS485_GetChar();
 134   2              
 135   2              switch (state) {
 136   3                  //-----     wait for frame start     -------------------------------
 137   3                  case WAIT_START:
 138   3                  
 139   3                      rx_queue[0] = rx_queue[1];
 140   3                      rx_queue[1] = rx_queue[2];
 141   3                      rx_queue[2] = rx_data;
 142   3                      
 143   3                      // Check for header configuration package
 144   3                      if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 145   4                          rx_queue[0] = 0;
 146   4                          rx_queue[1] = 0;
 147   4                          rx_queue[2] = 0;
 148   4                          state       = WAIT_ID;                    
 149   4                      }else
 150   3                          if ((rx_queue[0] == 63) &&      //ASCII - ?
 151   3                              (rx_queue[1] == 13) &&      //ASCII - CR
 152   3                              (rx_queue[2] == 10))        //ASCII - LF)
 153   3                              infoGet(INFO_ALL);
 154   3                      break;
 155   3      
 156   3                  //-----     wait for id     ----------------------------------------
 157   3                  case  WAIT_ID:
 158   3      
 159   3                      // packet is for my ID or is broadcast
 160   3                      if (rx_data == c_mem.id || rx_data == 0)
 161   3                          rx_data_type = FALSE;
 162   3                      else                //packet is for others
 163   3                          rx_data_type = TRUE;
 164   3                      
 165   3                      data_packet_length = 0;
 166   3                      state = WAIT_LENGTH;
 167   3                      break;
 168   3      
 169   3                  //-----     wait for length     ------------------------------------
 170   3                  case  WAIT_LENGTH:
 171   3      
 172   3       
 173   3                      data_packet_length = rx_data;
 174   3                      // check validity of pack length
 175   3                      if (data_packet_length <= 1) {
 176   4                          data_packet_length = 0;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 4   

 177   4                          state = WAIT_START;
 178   4                      } else if (data_packet_length > 128) {
 179   4                          data_packet_length = 0;
 180   4                          state = WAIT_START;
 181   4                      } else {
 182   4                          data_packet_index = 0;
 183   4                          
 184   4                          if(rx_data_type == FALSE)
 185   4                              state = RECEIVE;          // packet for me or broadcast
 186   4                          else
 187   4                              state = UNLOAD;           // packet for others
 188   4                      }
 189   3                      break;
 190   3      
 191   3                  //-----     receiving     -------------------------------------------
 192   3                  case RECEIVE:
 193   3      
 194   3                      data_packet_buffer[data_packet_index] = rx_data;
 195   3                      data_packet_index++;
 196   3                      
 197   3                      // check end of transmission
 198   3                      if (data_packet_index >= data_packet_length) {
 199   4                          // verify if frame ID corresponded to the device ID
 200   4                          if (rx_data_type == FALSE) {
 201   5                              // copying data from buffer to global packet
 202   5                              memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 203   5                              g_rx.length = data_packet_length;
 204   5                              g_rx.ready  = 1;
 205   5                              commProcess();
 206   5                          }
 207   4                          
 208   4                          data_packet_index  = 0;
 209   4                          data_packet_length = 0;
 210   4                          state              = WAIT_START;
 211   4                          package_count++;
 212   4                      
 213   4                      }
 214   3                      break;
 215   3      
 216   3                  //-----     other device is receving     ---------------------------
 217   3                  case UNLOAD:
 218   3                      if (!(--data_packet_length)) {
 219   4                          data_packet_index  = 0;
 220   4                          data_packet_length = 0;
 221   4                          RS485_CTS_Write(1);
 222   4                          RS485_CTS_Write(0);
 223   4                          state              = WAIT_START;
 224   4                          package_count++;
 225   4                      }
 226   3                      break;
 227   3              }
 228   2          }
 229   1      }
 230          //==============================================================================
 231          //                                                            FUNCTION SCHEDULER
 232          //==============================================================================
 233          // Call all the function with the right frequency
 234          //==============================================================================
 235          // Base frequency 1000 Hz
 236          //==============================================================================
 237          
 238          void function_scheduler(void) {
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 5   

 239   1       
 240   1          static uint16 counter_calibration = DIV_INIT_VALUE;
 241   1          
 242   1          // Start ADC Conversion, SOC = 1
 243   1      
 244   1          ADC_SOC_Write(0x01); 
 245   1          
 246   1          // Check Interrupt 
 247   1      
 248   1          if (interrupt_flag){
 249   2              interrupt_flag = FALSE;
 250   2              interrupt_manager();
 251   2          }
 252   1        
 253   1          //---------------------------------- Get Encoders
 254   1      
 255   1          encoder_reading(0); 
 256   1          
 257   1          // Check Interrupt     
 258   1          
 259   1          if (interrupt_flag){
 260   2              interrupt_flag = FALSE;
 261   2              interrupt_manager();
 262   2          }   
 263   1          
 264   1          encoder_reading(1);
 265   1          
 266   1          // Check Interrupt 
 267   1          
 268   1          if (interrupt_flag){
 269   2              interrupt_flag = FALSE;
 270   2              interrupt_manager();
 271   2          }
 272   1          
 273   1          encoder_reading(2);
 274   1          
 275   1          // Check Interrupt 
 276   1          
 277   1          if (interrupt_flag){
 278   2              interrupt_flag = FALSE;
 279   2              interrupt_manager();
 280   2          }
 281   1      
 282   1          //---------------------------------- Control Motor
 283   1         
 284   1          motor_control();
 285   1      
 286   1          // Check Interrupt 
 287   1      
 288   1          if (interrupt_flag){
 289   2              interrupt_flag = FALSE;
 290   2              interrupt_manager();
 291   2          }
 292   1      
 293   1          //---------------------------------- Control Overcurrent
 294   1      
 295   1          overcurrent_control();
 296   1          
 297   1          // Check Interrupt 
 298   1          
 299   1          if (interrupt_flag){
 300   2              interrupt_flag = FALSE;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 6   

 301   2              interrupt_manager();
 302   2          }
 303   1      
 304   1          //---------------------------------- Read conversion buffer - LOCK function
 305   1      
 306   1          analog_read_end();
 307   1      
 308   1          //---------------------------------- Calibration 
 309   1      
 310   1          // Divider 10, freq = 500 Hz
 311   1          if (calib.enabled == TRUE) {
 312   2              if (counter_calibration == CALIBRATION_DIV) {
 313   3                  calibration();
 314   3                  counter_calibration = 0;
 315   3              }
 316   2              counter_calibration++;
 317   2          }
 318   1      
 319   1          // Check Interrupt 
 320   1          
 321   1          if (interrupt_flag){
 322   2              interrupt_flag = FALSE;
 323   2              interrupt_manager();
 324   2          }
 325   1         
 326   1          //---------------------------------- Update States
 327   1          
 328   1          // Load k-1 state
 329   1          memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 330   1          memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 331   1      
 332   1          // Load k+1 state
 333   1          memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 334   1      
 335   1          if (interrupt_flag){
 336   2              interrupt_flag = FALSE;
 337   2              interrupt_manager();
 338   2          }
 339   1      
 340   1          timer_value = (uint32)MY_TIMER_ReadCounter();
 341   1          MY_TIMER_WriteCounter(5000000);
 342   1      
 343   1      }
 344          
 345          //==============================================================================
 346          //                                                                MOTORS CONTROL
 347          //==============================================================================
 348          
 349          void motor_control() {
 350   1      
 351   1          int32 CYDATA pwm_input = 0;
 352   1      
 353   1          int32 CYDATA pos_error;         // position error
 354   1          int32 CYDATA curr_error;        // current error
 355   1      
 356   1          int32 CYDATA i_ref;             // current reference
 357   1          int32 CYDATA handle_value;
 358   1      
 359   1          int32 CYDATA err_emg_1, err_emg_2;
 360   1      
 361   1          int32 CYDATA k_p = c_mem.k_p;  
 362   1          int32 CYDATA k_i = c_mem.k_i; 
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 7   

 363   1          int32 CYDATA k_d = c_mem.k_d; 
 364   1      
 365   1          int32 CYDATA k_p_c = c_mem.k_p_c;  
 366   1          int32 CYDATA k_i_c = c_mem.k_i_c; 
 367   1          int32 CYDATA k_d_c = c_mem.k_d_c;   
 368   1      
 369   1          int32 CYDATA k_p_dl = c_mem.k_p_dl;  
 370   1          int32 CYDATA k_i_dl = c_mem.k_i_dl; 
 371   1          int32 CYDATA k_d_dl = c_mem.k_d_dl;
 372   1          
 373   1          int32 CYDATA k_p_c_dl = c_mem.k_p_c_dl;  
 374   1          int32 CYDATA k_i_c_dl = c_mem.k_i_c_dl; 
 375   1          int32 CYDATA k_d_c_dl = c_mem.k_d_c_dl;   
 376   1      
 377   1          // Static Variables
 378   1      
 379   1          static int32 pos_error_sum;     // position error sum for integral
 380   1          static int32 curr_error_sum;    // current error sum for integral
 381   1          
 382   1          static int32 prev_pos_err;      // previous position error for deriv. control
 383   1          static int32 prev_curr_err;     // previous current error for deriv. control
 384   1      
 385   1          static CYBIT motor_dir = FALSE;
 386   1      
 387   1          static uint8 current_emg = 0;   // 0 NONE
 388   1                                          // 1 EMG 1
 389   1                                          // 2 EMG 2
 390   1                                          // wait for both to get down
 391   1      
 392   1          err_emg_1 = g_meas.emg[0] - c_mem.emg_threshold[0];
 393   1          err_emg_2 = g_meas.emg[1] - c_mem.emg_threshold[1];
 394   1      
 395   1          // =========================== POSITION INPUT ==============================
 396   1          switch(c_mem.input_mode) {
 397   2      
 398   2              case INPUT_MODE_ENCODER3:
 399   2      
 400   2                  // Calculate handle value based on position of handle in the
 401   2                  // sensor chain and multiplication factor between handle and motor position
 402   2                  if (c_mem.double_encoder_on_off) 
 403   2                      handle_value = g_meas.pos[2] * c_mem.motor_handle_ratio;
 404   2                  else
 405   2                      handle_value = g_meas.pos[1] * c_mem.motor_handle_ratio;
 406   2                  
 407   2      
 408   2                  // Read handle and use it as reference for the motor
 409   2                  if (((handle_value - g_ref.pos[0]) > c_mem.max_step_pos) && (c_mem.max_step_pos != 0))
 410   2                      g_ref.pos[0] += c_mem.max_step_pos;
 411   2                  else {
 412   3                      if (((handle_value - g_ref.pos[0]) < c_mem.max_step_neg) && (c_mem.max_step_neg != 0))
 413   3                          g_ref.pos[0] += c_mem.max_step_neg;
 414   3                      else
 415   3                      g_ref.pos[0] = handle_value;
 416   3                  }
 417   2                  break;
 418   2      
 419   2              case INPUT_MODE_EMG_PROPORTIONAL:
 420   2                  if (err_emg_1 > 0)
 421   2                      g_ref.pos[0] = (err_emg_1 * g_mem.pos_lim_sup[0]) / (1024 - c_mem.emg_threshold[0]);
 422   2                  else
 423   2                      g_ref.pos[0] = 0;
 424   2                  break;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 8   

 425   2      
 426   2              case INPUT_MODE_EMG_INTEGRAL:
 427   2                  if (err_emg_1 > 0)
 428   2                      g_ref.pos[0] += (err_emg_1 * g_mem.emg_speed << 1) / (1024 - c_mem.emg_threshold[0]);
 429   2      
 430   2                  if (err_emg_2 > 0) 
 431   2                      g_ref.pos[0] -= (err_emg_2 * g_mem.emg_speed << 1) / (1024 - c_mem.emg_threshold[1]);
 432   2                  
 433   2                  break;
 434   2      
 435   2              case INPUT_MODE_EMG_FCFS:
 436   2                  switch (current_emg) {
 437   3                      case 0:
 438   3                          // Look for the first EMG passing the threshold
 439   3                          if (err_emg_1 > 0) {
 440   4                              current_emg = 1;
 441   4                              break;
 442   4                          }
 443   3                          if (err_emg_2 > 0) {
 444   4                              current_emg = 2;
 445   4                              break;
 446   4                          }
 447   3                          break;
 448   3      
 449   3                      case 1:
 450   3                          // EMG 1 is first
 451   3                          if (err_emg_1 < 0) {
 452   4                              current_emg = 0;
 453   4                              break;
 454   4                          }
 455   3                          g_ref.pos[0] += (err_emg_1 * g_mem.emg_speed * 2) / (1024 - c_mem.emg_threshold[0]);
 456   3                          break;
 457   3      
 458   3                      case 2:
 459   3                          // EMG 2 is first
 460   3                          if (err_emg_2 < 0) {
 461   4                              current_emg = 0;
 462   4                              break;
 463   4                          }
 464   3                          g_ref.pos[0] -= (err_emg_2 * g_mem.emg_speed * 2) / (1024 - c_mem.emg_threshold[1]);
 465   3                          break;
 466   3      
 467   3                      default:
 468   3                          break;
 469   3                  }
 470   2      
 471   2                  break;
 472   2      
 473   2              case INPUT_MODE_EMG_FCFS_ADV:
 474   2                  switch (current_emg) {
 475   3                      // Look for the first EMG passing the threshold
 476   3                      case 0:
 477   3                          if (err_emg_1 > 0) {
 478   4                              current_emg = 1;
 479   4                              break;
 480   4                          }
 481   3                          if (err_emg_2 > 0) {
 482   4                              current_emg = 2;
 483   4                              break;
 484   4                          }
 485   3                          break;
 486   3      
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 9   

 487   3                      // EMG 1 is first
 488   3                      case 1:
 489   3                          // If both signals are under threshold go back to status 0
 490   3                          if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 491   4                              current_emg = 0;
 492   4                              break;
 493   4                          }
 494   3                          // but if the current signal come back over threshold, continue using it
 495   3                          if (err_emg_1 > 0) 
 496   3                              g_ref.pos[0] += (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_mem.emg_threshold[0
             -]);
 497   3                          
 498   3                          break;
 499   3      
 500   3                      // EMG 2 is first
 501   3                      case 2:
 502   3                          // If both signals are under threshold go back to status 0
 503   3                          if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 504   4                              current_emg = 0;
 505   4                              break;
 506   4                          }
 507   3                          // but if the current signal come back over threshold, continue using it
 508   3                          if (err_emg_2 > 0) {
 509   4                              g_ref.pos[0] -= (err_emg_2 * c_mem.emg_speed << 2) / (1024 - c_mem.emg_threshold[1
             -]);
 510   4                          }
 511   3                          break;
 512   3      
 513   3                      default:
 514   3                          break;
 515   3                  }
 516   2      
 517   2              default:
 518   2                  break;
 519   2          }
 520   1      
 521   1          // Position limit saturation
 522   1          if (c_mem.pos_lim_flag) {
 523   2              if (g_ref.pos[0] < c_mem.pos_lim_inf[0]) 
 524   2                  g_ref.pos[0] = c_mem.pos_lim_inf[0];
 525   2              if (g_ref.pos[0] > c_mem.pos_lim_sup[0]) 
 526   2                  g_ref.pos[0] = c_mem.pos_lim_sup[0];
 527   2          }
 528   1      
 529   1          switch(c_mem.control_mode) {
 530   2              // ======================= CURRENT AND POSITION CONTROL =======================
 531   2              case CURR_AND_POS_CONTROL:
 532   2                  pos_error = g_ref.pos[0] - g_meas.pos[0];
 533   2      
 534   2                  pos_error_sum += pos_error;
 535   2      
 536   2                  // error_sum saturation
 537   2                  if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 538   2                      pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 539   2                  else {
 540   3                      if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 541   3                          pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 542   3                  }
 543   2                  
 544   2                  // ------ position PID control ------
 545   2      
 546   2                  i_ref = 0;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 10  

 547   2                  
 548   2                  // Proportional
 549   2                  if (k_p_dl != 0)
 550   2                      i_ref += (int32)(k_p_dl * pos_error) >> 16;
 551   2      
 552   2                  // Integral
 553   2                  if (k_i_dl != 0)
 554   2                      i_ref += (int32)(k_i_dl * (pos_error_sum >> 6)) >> 10;
 555   2      
 556   2                  // Derivative
 557   2                  if (k_d_dl != 0)
 558   2                      i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 559   2                              
 560   2                  // Update previous position
 561   2                  prev_pos_err = pos_error;
 562   2      
 563   2                  // // current set through position reference
 564   2                  // i_ref = g_ref.pos[0] >> g_mem.res[0];
 565   2      
 566   2                  // motor direction depends on i_ref
 567   2                  if (i_ref >= 0)
 568   2                      motor_dir = TRUE;
 569   2                  else
 570   2                      motor_dir = FALSE;
 571   2      
 572   2                  // current ref must be positive
 573   2                  //i_ref = abs(i_ref);
 574   2      
 575   2                  // saturate max current
 576   2                  if (i_ref > c_mem.current_limit)
 577   2                      i_ref = c_mem.current_limit;
 578   2                  else 
 579   2                      if (i_ref < -c_mem.current_limit)
 580   2                          i_ref = -c_mem.current_limit;
 581   2                  
 582   2      
 583   2                  // saturate min current
 584   2                  /*if (i_ref < MIN_CURR_SAT_LIMIT && i_ref > 0) {
 585   2                      i_ref = MIN_CURR_SAT_LIMIT;
 586   2                  }*/
 587   2      
 588   2                  // // write i_ref on meas curr 2 for DEBUG
 589   2                  g_meas.curr[1] = i_ref;
 590   2      
 591   2                  // current error and curr error sum
 592   2                  curr_error = i_ref - g_meas.curr[0];
 593   2                  curr_error_sum += curr_error;
 594   2                  
 595   2                  if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 596   2                      curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 597   2                  else {
 598   3                      if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 599   3                          curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 600   3                  }
 601   2      
 602   2                  // ----- current PID control -----
 603   2      
 604   2                  pwm_input = 0;
 605   2      
 606   2                  // Proportional
 607   2                  if (k_p_c_dl != 0)
 608   2                      pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 11  

 609   2      
 610   2                  // Integral
 611   2                  if (k_i_c_dl != 0)
 612   2                      pwm_input += (int32)(k_i_c_dl * (curr_error_sum >> 6)) >> 10;
 613   2      
 614   2                  // Derivative
 615   2                  if (k_d_c_dl != 0)
 616   2                      pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 617   2      
 618   2                  // pwm_input saturation
 619   2                  if (pwm_input < -PWM_MAX_VALUE) 
 620   2                      pwm_input = -PWM_MAX_VALUE;
 621   2                  else {
 622   3                      if (pwm_input > PWM_MAX_VALUE)
 623   3                          pwm_input = PWM_MAX_VALUE;
 624   3                  }
 625   2      
 626   2                  // Update previous current
 627   2                  prev_curr_err = curr_error;
 628   2      
 629   2              break;
 630   2      
 631   2              // ============================== POSITION CONTROL =====================
 632   2              case CONTROL_ANGLE:
 633   2                  pos_error = g_ref.pos[0] - g_meas.pos[0];
 634   2      
 635   2                  pos_error_sum += pos_error;
 636   2      
 637   2                  // anti-windup (for integral control)
 638   2                  if (pos_error_sum > ANTI_WINDUP) {
 639   3                      pos_error_sum = ANTI_WINDUP;
 640   3                  } else if (pos_error_sum < -ANTI_WINDUP) {
 641   3                      pos_error_sum = -ANTI_WINDUP;
 642   3                  }
 643   2      
 644   2                  // Proportional
 645   2                  if (k_p != 0) 
 646   2                      pwm_input = (int32)(k_p * pos_error) >> 16;
 647   2                  
 648   2      
 649   2                  // Integral
 650   2                  if (k_i != 0) 
 651   2                      pwm_input += (int32)(k_i * (pos_error_sum) >> 6) >> 10;
 652   2                  
 653   2      
 654   2                  // Derivative
 655   2                  if (k_d != 0) 
 656   2                      pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 657   2                  
 658   2      
 659   2                  // Update measure
 660   2                  prev_pos_err = pos_error;
 661   2      
 662   2                  if (pwm_input > 0)
 663   2                      motor_dir = TRUE;
 664   2                  else
 665   2                      motor_dir = FALSE;
 666   2      
 667   2              break;
 668   2      
 669   2              // ========================== CURRENT CONTROL ==========================
 670   2              case CONTROL_CURRENT:
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 12  

 671   2                  if(g_ref.onoff && tension_valid) {
 672   3                      
 673   3                      i_ref = g_ref.curr[0];
 674   3      
 675   3                      if (i_ref > c_mem.current_limit) 
 676   3                          i_ref = c_mem.current_limit;
 677   3                      else {
 678   4                          if (i_ref < -c_mem.current_limit)
 679   4                              i_ref = -c_mem.current_limit;
 680   4                      }
 681   3                      
 682   3                      // current error
 683   3                      curr_error = i_ref - g_meas.curr[0];            
 684   3                      curr_error_sum += curr_error;
 685   3                      
 686   3                      if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 687   3                          curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 688   3                      else {
 689   4                          if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 690   4                              curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 691   4                      }
 692   3      
 693   3                      pwm_input = 0;
 694   3      
 695   3                      // Proportional
 696   3                      if (k_p_c != 0)
 697   3                          pwm_input += (int32)(k_p_c * curr_error) >> 16;
 698   3      
 699   3                      // Integral
 700   3                      if (k_i_c != 0)
 701   3                          pwm_input += (int32)(k_i_c * (curr_error_sum >> 6)) >> 10;
 702   3      
 703   3                      // Derivative
 704   3                      if (k_d_c != 0)
 705   3                          pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 706   3                      
 707   3                      prev_curr_err = curr_error;
 708   3                      
 709   3                      if (pwm_input >= 0) 
 710   3                          motor_dir = TRUE;
 711   3                      else
 712   3                          motor_dir = FALSE;
 713   3                  }
 714   2              break;
 715   2              
 716   2              // ================= DIRECT PWM CONTROL ================================
 717   2              case CONTROL_PWM:
 718   2                  // Shift right by resolution to have the real input number
 719   2                  pwm_input = g_ref.pwm[0];
 720   2      
 721   2                  if (pwm_input > 0) 
 722   2                      motor_dir = TRUE;
 723   2                  else 
 724   2                      motor_dir = FALSE;
 725   2                  
 726   2      
 727   2                  // pwm_input saturation
 728   2                  if (pwm_input < 0) 
 729   2                      pwm_input = 0;
 730   2                   else if (pwm_input > PWM_MAX_VALUE) 
 731   2                      pwm_input = PWM_MAX_VALUE;
 732   2                  
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 13  

 733   2      
 734   2              break;
 735   2          }
 736   1      
 737   1          ////////////////////////////////////////////////////////////////////////////
 738   1      
 739   1          if(pwm_input >  PWM_MAX_VALUE) 
 740   1              pwm_input =  PWM_MAX_VALUE;
 741   1          if(pwm_input < -PWM_MAX_VALUE) 
 742   1              pwm_input = -PWM_MAX_VALUE;
 743   1      
 744   1      
 745   1          if (c_mem.control_mode != CONTROL_PWM) 
 746   1              pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit) >> 10;
 747   1          
 748   1      
 749   1          pwm_sign = SIGN(pwm_input);
 750   1      
 751   1          if (motor_dir)
 752   1              MOTOR_DIR_Write(0x01);
 753   1          else
 754   1              MOTOR_DIR_Write(0x00);
 755   1      
 756   1          PWM_MOTORS_WriteCompare1(abs(pwm_input));
 757   1      }
 758          
 759          //==============================================================================
 760          //                                                                   ENCODER READING
 761          //==============================================================================
 762          
 763          void encoder_reading(const uint8 idx) {
 764   1      
 765   1          uint8 CYDATA index = idx;
 766   1          
 767   1          uint8 jj;
 768   1          
 769   1          uint32 data_encoder;
 770   1          int32 value_encoder;
 771   1          int32 aux;
 772   1      
 773   1          static int32 last_value_encoder[NUM_OF_SENSORS];
 774   1      
 775   1          static uint8 error[NUM_OF_SENSORS];
 776   1          
 777   1          static CYBIT only_first_time = TRUE;
 778   1      
 779   1          static uint8 one_time_execute = 0;
 780   1          static CYBIT pos_reconstruct = FALSE;
 781   1      
 782   1          // static int32 l_value[NUM_OF_SENSORS];   //last value for vel
 783   1          // static int32 ll_value[NUM_OF_SENSORS];  //last last value for vel
 784   1          // static int32 lll_value[NUM_OF_SENSORS];  //last last last value for vel
 785   1      
 786   1          if (index >= NUM_OF_SENSORS)
 787   1              return;
 788   1          
 789   1          if (reset_last_value_flag) {
 790   2              for (jj = NUM_OF_SENSORS; jj--;) {
 791   3                  last_value_encoder[jj] = 0;
 792   3              }
 793   2              reset_last_value_flag = 0;
 794   2          }
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 14  

 795   1      
 796   1          //======================================================     reading sensors
 797   1              // Shift 1 right to erase Dummy bit of chain
 798   1          if (index == 0)
 799   1                  data_encoder = (SHIFTREG_ENC_1_ReadData() >> 1) & 0x3FFFF;  //0x0003FFFF reset first 14 bits
 800   1          else {
 801   2              if (index == 1)
 802   2                  data_encoder = (SHIFTREG_ENC_2_ReadData() >> 1) & 0x3FFFF;  //0x0003FFFF reset first 14 bits
 803   2              else // index == 2
 804   2                  data_encoder = (SHIFTREG_ENC_3_ReadData() >> 1) & 0x3FFFF;  //0x0003FFFF reset first 14 bits
 805   2          }
 806   1             
 807   1      
 808   1          if (check_enc_data(&data_encoder)) {
 809   2      
 810   2              value_encoder = (int16) (((data_encoder & 0x3FFC0) - 0x20000) >> 2 + g_mem.m_off[index] );
 811   2                                                          // reset last 6 bit 
 812   2                                                          // -> |:|:|id|dim|CMD|CHK|(data---
 813   2                                                          // subtract half of max value
 814   2                                                          // and shift to have 16 bit val
 815   2      
 816   2              // Initialize last_value_encoder
 817   2              if (only_first_time) {
 818   3                  last_value_encoder[index] = value_encoder;
 819   3                  if (index == 2)
 820   3                      only_first_time = 0;
 821   3              }
 822   2      
 823   2              // Take care of rotations
 824   2              aux = value_encoder - last_value_encoder[index];
 825   2      
 826   2              // ====================== 1 TURN ======================
 827   2              // -32768                    0                    32767 -32768                   0                
             -     32767
 828   2              // |-------------------------|-------------------------|-------------------------|----------------
             ----------|
 829   2              //              |                         |      |           |      |                         |
 830   2              //           -16384                     16383    |           |   -16384                     16383
 831   2              //                                               |           |
 832   2              //                                           24575           -24576
 833   2              //                                               |___________|
 834   2              //                                                   49152
 835   2      
 836   2              // if we are in the right interval, take care of rotation
 837   2              // and update the variable only if the difference between
 838   2              // one measure and another is less than 1/4 of turn
 839   2      
 840   2              // Considering we are sampling at 1kHz, this means that our shaft needs
 841   2              // to go slower than 1/4 turn every ms -> 1 turn every 4ms
 842   2              // equal to 250 turn/s -> 15000 RPM
 843   2      
 844   2              if (aux > 49152)
 845   2                  g_meas.rot[index]--;
 846   2              else{ 
 847   3                  if (aux < -49152)
 848   3                      g_meas.rot[index]++;
 849   3                  else{
 850   4                      if (abs(aux) > 16384) { // if two measure are too far
 851   5                          error[index]++;
 852   5                          if (error[index] < 10)
 853   5                              // Discard
 854   5                              return;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 15  

 855   5                      }
 856   4                  }
 857   3              }
 858   2      
 859   2              error[index] = 0;
 860   2      
 861   2              last_value_encoder[index] = value_encoder;
 862   2      
 863   2              value_encoder += (int32)g_meas.rot[index] << 16;
 864   2      
 865   2              if (c_mem.m_mult[index] != 1.0) {
 866   3                  value_encoder *= c_mem.m_mult[index];
 867   3              }
 868   2      
 869   2              g_meas.pos[index] = value_encoder;
 870   2          }
 871   1      
 872   1          // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
 873   1          if (pos_reconstruct == FALSE){
 874   2              if (one_time_execute < 34) 
 875   2                  one_time_execute++;
 876   2              else 
 877   2                  //Double encoder translation
 878   2                  if (c_mem.double_encoder_on_off)
 879   2                      g_meas.rot[0] = calc_turns_fcn(g_meas.pos[0], g_meas.pos[1]);
 880   2      
 881   2                  g_meas.pos[0] += (int32) g_meas.rot[0] << 16;
 882   2      
 883   2                  // If necessary activate motors
 884   2                  g_ref.pos[0] = g_meas.pos[0];
 885   2      
 886   2                  MOTOR_ON_OFF_Write(g_ref.onoff);
 887   2                  
 888   2                  pos_reconstruct = TRUE;
 889   2          }
 890   1      }
 891          
 892          //==============================================================================
 893          //                                                           ANALOG MEASUREMENTS
 894          //==============================================================================
 895          
 896          void analog_read_end() {
 897   1      
 898   1          /* =========================================================================
 899   1          /   Ideal formulation to calculate tension and current
 900   1          /
 901   1          /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
 902   1          /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
 903   1          /
 904   1          /   Definition:
 905   1          /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
 906   1          /   offset = 2000 -> hardware amplifier bias in mV
 907   1          /   gain = 8.086 -> amplifier gain
 908   1          /   resistor = 18 -> resistor of voltage divider in KOhm 
 909   1          /
 910   1          /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
 911   1          /   and offset unit of measurment is counts, instead dev_tension and
 912   1          /   g_meas.curr[] are converted in properly unit.
 913   1          /  =========================================================================
 914   1          */
 915   1      
 916   1          int16 CYDATA i_aux;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 16  

 917   1      
 918   1          static emg_status CYDATA emg_1_status = RESET; 
 919   1          static emg_status CYDATA emg_2_status = RESET;                                             
 920   1          
 921   1          static uint16 emg_counter_1 = 0;
 922   1          static uint16 emg_counter_2 = 0;
 923   1      
 924   1          // Wait for conversion end
 925   1          
 926   1          while(!ADC_STATUS_Read()){
 927   2              if (interrupt_flag){
 928   3                  interrupt_flag = FALSE;
 929   3                  interrupt_manager();
 930   3              }
 931   2          }
 932   1          
 933   1          // Convert tension read
 934   1          dev_tension = ((int32)(ADC_buf[0] - 1638) * 1952) >> 7;
 935   1          
 936   1          if (interrupt_flag){
 937   2              interrupt_flag = FALSE;
 938   2              interrupt_manager();
 939   2          }
 940   1      
 941   1          // Until there is no valid input tension repeat this measurement
 942   1          
 943   1          if (dev_tension > 0){
 944   2              // Set tension valid bit to TRUE
 945   2      
 946   2              tension_valid = TRUE;
 947   2      
 948   2              if(g_mem.activate_pwm_rescaling)        //pwm rescaling is activated
 949   2                  pwm_limit_search();                 //only for 12V motors
 950   2      
 951   2              // Filter and Set currents
 952   2              g_meas.curr[0] = filter_i1((int16) (((int32)(ADC_buf[1] - 1638) * 25771) >> 13) * pwm_sign);
 953   2              
 954   2              // Check Interrupt 
 955   2          
 956   2              if (interrupt_flag){
 957   3                  interrupt_flag = FALSE;
 958   3                  interrupt_manager();
 959   3              }
 960   2      
 961   2              // if calibration is not needed go to "normal execution"
 962   2              if (!g_mem.emg_calibration_flag){
 963   3                  emg_1_status = 0; //normal execution
 964   3                  emg_2_status = 0; // normal execution
 965   3              }
 966   2      
 967   2              // EMG 1 calibration state machine
 968   2              
 969   2              // Calibration state machine
 970   2              switch(emg_1_status) {
 971   3                  case NORMAL: // normal execution
 972   3                      i_aux = filter_ch1(ADC_buf[2]);
 973   3                      i_aux = (i_aux << 10) / g_mem.emg_max_value[0];
 974   3          
 975   3                      if (interrupt_flag){
 976   4                          interrupt_flag = FALSE;
 977   4                          interrupt_manager();
 978   4                      }
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 17  

 979   3                      //Saturation
 980   3                      if (i_aux < 0)
 981   3                          i_aux = 0;
 982   3                      else 
 983   3                          if (i_aux > 1024) 
 984   3                              i_aux = 1024;
 985   3                      
 986   3                      g_meas.emg[0] = i_aux;
 987   3          
 988   3                      if (interrupt_flag){
 989   4                          interrupt_flag = FALSE;
 990   4                          interrupt_manager();
 991   4                      }
 992   3                      
 993   3                      break;
 994   3      
 995   3                  case RESET: // reset variables
 996   3                      emg_counter_1 = 0;
 997   3                      g_mem.emg_max_value[0] = 0;
 998   3                      emg_1_status = DISCARD; // goto next status
 999   3                      
1000   3                      break;
1001   3      
1002   3                  case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
1003   3                      emg_counter_1++;
1004   3                      if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
1005   4                          emg_counter_1 = 0;          // reset counter
1006   4                          LED_REG_Write(0x01);        // turn on LED
1007   4                              
1008   4                          if (interrupt_flag){
1009   5                              interrupt_flag = FALSE;
1010   5                              interrupt_manager();
1011   5                          }
1012   4                          
1013   4                          emg_1_status = SUM_AND_MEAN;           // sum and mean status
1014   4                      }
1015   3                      break;
1016   3      
1017   3                  case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
1018   3                      // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
1019   3                      emg_counter_1++;
1020   3                      g_mem.emg_max_value[0] += filter_ch1(ADC_buf[2]);
1021   3                      
1022   3                      if (interrupt_flag){
1023   4                          interrupt_flag = FALSE;
1024   4                          interrupt_manager();
1025   4                      }
1026   3                      
1027   3                      if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
1028   4                          g_mem.emg_max_value[0] = g_mem.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // calc mean
1029   4          
1030   4                          if (interrupt_flag){
1031   5                              interrupt_flag = FALSE;
1032   5                              interrupt_manager();
1033   5                          }                    
1034   4                          
1035   4                          LED_REG_Write(0x00);        // led OFF
1036   4                          emg_counter_1 = 0;          // reset counter
1037   4      
1038   4                          emg_1_status = NORMAL;           // goto normal execution
1039   4                      }
1040   3                      break;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 18  

1041   3      
1042   3                  default:
1043   3                      break;
1044   3              }
1045   2          
1046   2              if (interrupt_flag){
1047   3                  interrupt_flag = FALSE;
1048   3                  interrupt_manager();
1049   3              }
1050   2              // EMG 2 calibration state machine
1051   2              switch(emg_2_status) {
1052   3                  case NORMAL: // normal execution
1053   3                      i_aux = filter_ch2(ADC_buf[3]);
1054   3                      i_aux = (i_aux << 10) / g_mem.emg_max_value[1];
1055   3          
1056   3                      if (interrupt_flag){
1057   4                          interrupt_flag = FALSE;
1058   4                          interrupt_manager();
1059   4                      }
1060   3                      
1061   3                      if (i_aux < 0) 
1062   3                          i_aux = 0;
1063   3                      else 
1064   3                          if (i_aux > 1024)
1065   3                              i_aux = 1024;
1066   3                      
1067   3                      g_meas.emg[1] = i_aux;
1068   3      
1069   3                      break;
1070   3      
1071   3                  case RESET: // reset variables
1072   3                      emg_counter_2 = 0;
1073   3                      g_mem.emg_max_value[1] = 0;
1074   3          
1075   3                      if (interrupt_flag){
1076   4                          interrupt_flag = FALSE;
1077   4                          interrupt_manager();
1078   4                      }
1079   3                      
1080   3                      emg_2_status = WAIT; // wait for EMG 1 calibration
1081   3                      break;
1082   3      
1083   3                  case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
1084   3                      emg_counter_2++;
1085   3                      if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
1086   4                          emg_counter_2 = 0;          // reset counter
1087   4                          LED_REG_Write(0x01);        // turn on LED
1088   4          
1089   4                          if (interrupt_flag){
1090   5                              interrupt_flag = FALSE;
1091   5                              interrupt_manager();
1092   5                          }
1093   4                          
1094   4                          emg_2_status = SUM_AND_MEAN;           // sum and mean status
1095   4                      }
1096   3                      break;
1097   3      
1098   3                  case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
1099   3                      // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
1100   3                      emg_counter_2++;
1101   3                      g_mem.emg_max_value[1] += filter_ch2(ADC_buf[3]);
1102   3          
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 19  

1103   3                      if (interrupt_flag){
1104   4                          interrupt_flag = FALSE;
1105   4                          interrupt_manager();
1106   4                      }
1107   3                      
1108   3                      if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
1109   4                          g_mem.emg_max_value[1] = g_mem.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // calc mean
1110   4                          LED_REG_Write(0x00);        // led OFF
1111   4                          emg_counter_2 = 0;          // reset counter
1112   4                      
1113   4                          if (interrupt_flag){
1114   5                              interrupt_flag = FALSE;
1115   5                              interrupt_manager();
1116   5                          }
1117   4                          
1118   4                          // if EMG control mode active, activate motors accordingly with startup value
1119   4                          if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
1120   4                              (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
1121   4                              (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
1122   4                              (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
1123   5                              if (c_mem.control_mode == CONTROL_ANGLE) {
1124   6                                  g_ref.pos[0] = g_meas.pos[0];
1125   6                                  g_ref.pos[1] = g_meas.pos[1];
1126   6                              }
1127   5                              g_ref.onoff = c_mem.activ;
1128   5                              MOTOR_ON_OFF_Write(g_ref.onoff);
1129   5                          }
1130   4                          emg_2_status = NORMAL;           // goto normal execution
1131   4                      }
1132   3                      break;
1133   3      
1134   3                  case WAIT: // wait for EMG calibration to be done
1135   3                      if (emg_1_status == 0)
1136   3                          emg_2_status = DISCARD;           // goto discard sample
1137   3                      break;
1138   3      
1139   3                  default:
1140   3                      break;
1141   3              }
1142   2                  
1143   2              if (interrupt_flag){
1144   3                  interrupt_flag = FALSE;
1145   3                  interrupt_manager();
1146   3              }
1147   2          }
1148   1          else{
1149   2              emg_1_status = RESET; 
1150   2              emg_2_status = RESET;
1151   2      
1152   2              tension_valid = FALSE;
1153   2                  
1154   2              if (interrupt_flag){
1155   3                  interrupt_flag = FALSE;
1156   3                  interrupt_manager();
1157   3              }
1158   2              
1159   2              if (c_mem.emg_calibration_flag) {
1160   3                  if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
1161   3                      (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
1162   3                      (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
1163   3                      (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
1164   4                      g_ref.onoff = 0x00;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 20  

1165   4                      MOTOR_ON_OFF_Write(g_ref.onoff);
1166   4                  }
1167   3              }
1168   2      
1169   2              // Reset current
1170   2              g_meas.curr[0] = 0;
1171   2      
1172   2              // Reset emg
1173   2              g_meas.emg[0] = 0;
1174   2              g_meas.emg[1] = 0;
1175   2      
1176   2          }
1177   1              
1178   1          if (interrupt_flag){
1179   2              interrupt_flag = FALSE;
1180   2              interrupt_manager();
1181   2          }
1182   1      }
1183          
1184          //==============================================================================
1185          //                                                           OVERCURRENT CONTROL
1186          //==============================================================================
1187          
1188          void overcurrent_control() {
1189   1          if (c_mem.current_limit != 0) {
1190   2              // if the current is over the limit
1191   2              if (g_meas.curr[0] > c_mem.current_limit) {
1192   3                  //decrese pwm_limit
1193   3                  dev_pwm_limit--;
1194   3              // if the current is in the safe zone
1195   3              } else if (g_meas.curr[0] < (c_mem.current_limit - CURRENT_HYSTERESIS)) {
1196   3                  //increase pwm_limit
1197   3                  dev_pwm_limit++;
1198   3              }
1199   2      
1200   2              // Bound pwm_limit
1201   2              if (dev_pwm_limit < 0) 
1202   2                  dev_pwm_limit = 0;
1203   2              else 
1204   2                  if (dev_pwm_limit > 100) 
1205   2                      dev_pwm_limit = 100;
1206   2          }
1207   1      }
1208          
1209          //==============================================================================
1210          //                                                              PWM_LIMIT_SEARCH
1211          //==============================================================================
1212          
1213          void pwm_limit_search() {
1214   1      
1215   1          uint8 CYDATA index;
1216   1      
1217   1          if (dev_tension > 25500) {
1218   2              dev_pwm_limit = 0;
1219   2          } else if (dev_tension < 11500) {
1220   2              dev_pwm_limit = 100;
1221   2          } else {
1222   2              index = (uint8)((dev_tension - 11500) >> 9);
1223   2              dev_pwm_limit = pwm_preload_values[index];
1224   2          }
1225   1      }
1226          /* [] END OF FILE */
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 21  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ISR_WATCHDOG_Handler (BEGIN)
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 76
0000 D200        E     SETB    watchdog_flag
                                           ; SOURCE LINE # 78
0002 32                RETI    
             ; FUNCTION ISR_WATCHDOG_Handler (END)

             ; FUNCTION ISR_RS485_RX_ExInterrupt (BEGIN)
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 88
0000 D200        E     SETB    interrupt_flag
                                           ; SOURCE LINE # 90
0002 32                RETI    
             ; FUNCTION ISR_RS485_RX_ExInterrupt (END)

             ; FUNCTION interrupt_manager (BEGIN)
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 123
0000 750000      R     MOV     package_count,#00H
0003         ?C0003:
                                           ; SOURCE LINE # 129
0003 120000      E     LCALL   UART_RS485_GetRxBufferSize
0006 EF                MOV     A,R7
0007 7003              JNZ     $ + 5H
0009 020000      R     LJMP    ?C0026
000C E500        R     MOV     A,package_count
000E C3                CLR     C
000F 9406              SUBB    A,#06H
0011 4003              JC      $ + 5H
0013 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 133
0016 120000      E     LCALL   UART_RS485_GetChar
0019 8F00        R     MOV     rx_data,R7
                                           ; SOURCE LINE # 135
001B E500        R     MOV     A,state
001D 120000      E     LCALL   ?C?CCASE
0020 0000        R     DW      ?C0006
0022 00                DB      00H
0023 0000        R     DW      ?C0010
0025 01                DB      01H
0026 0000        R     DW      ?C0014
0028 02                DB      02H
0029 0000        R     DW      ?C0021
002B 03                DB      03H
002C 0000        R     DW      ?C0024
002E 04                DB      04H
002F 0000              DW      00H
0031 0000        R     DW      ?C0003
                                           ; SOURCE LINE # 137
0033         ?C0006:
                                           ; SOURCE LINE # 139
0033 850000      R     MOV     rx_queue,rx_queue+01H
                                           ; SOURCE LINE # 140
0036 850000      R     MOV     rx_queue+01H,rx_queue+02H
                                           ; SOURCE LINE # 141
0039 850000      R     MOV     rx_queue+02H,rx_data
                                           ; SOURCE LINE # 144
003C E500        R     MOV     A,rx_queue+01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 22  

003E B43A13            CJNE    A,#03AH,?C0007
0041 E500        R     MOV     A,rx_queue+02H
0043 B43A0E            CJNE    A,#03AH,?C0007
                                           ; SOURCE LINE # 145
0046 750000      R     MOV     rx_queue,#00H
                                           ; SOURCE LINE # 146
0049 750000      R     MOV     rx_queue+01H,#00H
                                           ; SOURCE LINE # 147
004C 750000      R     MOV     rx_queue+02H,#00H
                                           ; SOURCE LINE # 148
004F 750001      R     MOV     state,#01H
                                           ; SOURCE LINE # 149
0052 80AF              SJMP    ?C0003
0054         ?C0007:
                                           ; SOURCE LINE # 150
0054 E500        R     MOV     A,rx_queue
0056 B43FAA            CJNE    A,#03FH,?C0003
0059 E500        R     MOV     A,rx_queue+01H
005B B40DA5            CJNE    A,#0DH,?C0003
005E E500        R     MOV     A,rx_queue+02H
0060 B40AA0            CJNE    A,#0AH,?C0003
                                           ; SOURCE LINE # 153
0063 7F00              MOV     R7,#00H
0065 7E00              MOV     R6,#00H
0067 120000      E     LCALL   _infoGet
                                           ; SOURCE LINE # 154
006A 8097              SJMP    ?C0003
                                           ; SOURCE LINE # 157
006C         ?C0010:
                                           ; SOURCE LINE # 160
006C 900000      E     MOV     DPTR,#c_mem+01H
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 E500        R     MOV     A,rx_data
0073 6F                XRL     A,R7
0074 6004              JZ      ?C0012
0076 E500        R     MOV     A,rx_data
0078 7004              JNZ     ?C0011
007A         ?C0012:
                                           ; SOURCE LINE # 161
007A C200        R     CLR     rx_data_type
007C 8002              SJMP    ?C0013
007E         ?C0011:
                                           ; SOURCE LINE # 163
007E D200        R     SETB    rx_data_type
0080         ?C0013:
                                           ; SOURCE LINE # 165
0080 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 166
0083 750002      R     MOV     state,#02H
                                           ; SOURCE LINE # 167
0086 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 170
0089         ?C0014:
                                           ; SOURCE LINE # 173
0089 850000      R     MOV     data_packet_length,rx_data
                                           ; SOURCE LINE # 175
008C E500        R     MOV     A,data_packet_length
008E D3                SETB    C
008F 9401              SUBB    A,#01H
0091 5009              JNC     ?C0015
                                           ; SOURCE LINE # 176
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 23  

0093 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 177
0096 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 178
0099 020000      R     LJMP    ?C0003
009C         ?C0015:
009C E500        R     MOV     A,data_packet_length
009E D3                SETB    C
009F 9480              SUBB    A,#080H
00A1 4009              JC      ?C0017
                                           ; SOURCE LINE # 179
00A3 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 180
00A6 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 181
00A9 020000      R     LJMP    ?C0003
00AC         ?C0017:
                                           ; SOURCE LINE # 182
00AC 750000      R     MOV     data_packet_index,#00H
                                           ; SOURCE LINE # 184
00AF 200006            JB      rx_data_type,?C0019
                                           ; SOURCE LINE # 185
00B2 750003      R     MOV     state,#03H
00B5 020000      R     LJMP    ?C0003
00B8         ?C0019:
                                           ; SOURCE LINE # 187
00B8 750004      R     MOV     state,#04H
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
00BB 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 192
00BE         ?C0021:
                                           ; SOURCE LINE # 194
00BE AF00        R     MOV     R7,data_packet_index
00C0 7400        R     MOV     A,#LOW data_packet_buffer
00C2 2F                ADD     A,R7
00C3 F582              MOV     DPL,A
00C5 E4                CLR     A
00C6 3400        R     ADDC    A,#HIGH data_packet_buffer
00C8 F583              MOV     DPH,A
00CA E500        R     MOV     A,rx_data
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
00CD 0500        R     INC     data_packet_index
                                           ; SOURCE LINE # 198
00CF E500        R     MOV     A,data_packet_index
00D1 C3                CLR     C
00D2 9500        R     SUBB    A,data_packet_length
00D4 5003              JNC     $ + 5H
00D6 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 200
00D9 20003A            JB      rx_data_type,?C0023
                                           ; SOURCE LINE # 202
00DC AF00        R     MOV     R7,data_packet_length
00DE 7E00              MOV     R6,#00H
00E0 7B01              MOV     R3,#01H
00E2 7A00        R     MOV     R2,#HIGH data_packet_buffer
00E4 7900        R     MOV     R1,#LOW data_packet_buffer
00E6 C003              PUSH    AR3
00E8 C002              PUSH    AR2
00EA C001              PUSH    AR1
00EC 7B01              MOV     R3,#01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 24  

00EE 7A00        E     MOV     R2,#HIGH g_rx
00F0 7900        E     MOV     R1,#LOW g_rx
00F2 A801              MOV     R0,AR1
00F4 AC02              MOV     R4,AR2
00F6 AD03              MOV     R5,AR3
00F8 D001              POP     AR1
00FA D002              POP     AR2
00FC D003              POP     AR3
00FE 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 203
0101 AF00        R     MOV     R7,data_packet_length
0103 7E00              MOV     R6,#00H
0105 900000      E     MOV     DPTR,#g_rx+080H
0108 EE                MOV     A,R6
0109 F0                MOVX    @DPTR,A
010A A3                INC     DPTR
010B EF                MOV     A,R7
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
010D 900000      E     MOV     DPTR,#g_rx+084H
0110 7401              MOV     A,#01H
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0113 120000      E     LCALL   commProcess
                                           ; SOURCE LINE # 206
0116         ?C0023:
                                           ; SOURCE LINE # 208
0116 750000      R     MOV     data_packet_index,#00H
                                           ; SOURCE LINE # 209
0119 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 210
011C 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 211
011F 0500        R     INC     package_count
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
0121 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 217
0124         ?C0024:
                                           ; SOURCE LINE # 218
0124 1500        R     DEC     data_packet_length
0126 AF00        R     MOV     R7,data_packet_length
0128 EF                MOV     A,R7
0129 6003              JZ      $ + 5H
012B 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 219
012E 750000      R     MOV     data_packet_index,#00H
                                           ; SOURCE LINE # 220
0131 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 221
0134 7F01              MOV     R7,#01H
0136 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 222
0139 7F00              MOV     R7,#00H
013B 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 223
013E 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 224
0141 0500        R     INC     package_count
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
0143 020000      R     LJMP    ?C0003
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 25  

                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
0146 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 229
0149         ?C0026:
0149 22                RET     
             ; FUNCTION interrupt_manager (END)

             ; FUNCTION function_scheduler (BEGIN)
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 244
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 248
0005 300005            JNB     interrupt_flag,?C0027
                                           ; SOURCE LINE # 249
0008 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 250
000A 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 251
000D         ?C0027:
                                           ; SOURCE LINE # 255
000D 7F00              MOV     R7,#00H
000F 120000      R     LCALL   _encoder_reading
                                           ; SOURCE LINE # 259
0012 300005            JNB     interrupt_flag,?C0028
                                           ; SOURCE LINE # 260
0015 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 261
0017 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 262
001A         ?C0028:
                                           ; SOURCE LINE # 264
001A 7F01              MOV     R7,#01H
001C 120000      R     LCALL   _encoder_reading
                                           ; SOURCE LINE # 268
001F 300005            JNB     interrupt_flag,?C0029
                                           ; SOURCE LINE # 269
0022 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 270
0024 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 271
0027         ?C0029:
                                           ; SOURCE LINE # 273
0027 7F02              MOV     R7,#02H
0029 120000      R     LCALL   _encoder_reading
                                           ; SOURCE LINE # 277
002C 300005            JNB     interrupt_flag,?C0030
                                           ; SOURCE LINE # 278
002F C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 279
0031 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 280
0034         ?C0030:
                                           ; SOURCE LINE # 284
0034 120000      R     LCALL   motor_control
                                           ; SOURCE LINE # 288
0037 300005            JNB     interrupt_flag,?C0031
                                           ; SOURCE LINE # 289
003A C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 290
003C 120000      R     LCALL   interrupt_manager
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 26  

                                           ; SOURCE LINE # 291
003F         ?C0031:
                                           ; SOURCE LINE # 295
003F 120000      R     LCALL   overcurrent_control
                                           ; SOURCE LINE # 299
0042 300005            JNB     interrupt_flag,?C0032
                                           ; SOURCE LINE # 300
0045 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 301
0047 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 302
004A         ?C0032:
                                           ; SOURCE LINE # 306
004A 120000      R     LCALL   analog_read_end
                                           ; SOURCE LINE # 311
004D 900000      E     MOV     DPTR,#calib
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 B40123            CJNE    A,#01H,?C0033
                                           ; SOURCE LINE # 312
0056 900000      R     MOV     DPTR,#counter_calibration
0059 E0                MOVX    A,@DPTR
005A FE                MOV     R6,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F 640A              XRL     A,#0AH
0061 4E                ORL     A,R6
0062 700B              JNZ     ?C0034
                                           ; SOURCE LINE # 313
0064 120000      E     LCALL   calibration
                                           ; SOURCE LINE # 314
0067 900000      R     MOV     DPTR,#counter_calibration
006A E4                CLR     A
006B F0                MOVX    @DPTR,A
006C A3                INC     DPTR
006D E4                CLR     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
006F         ?C0034:
                                           ; SOURCE LINE # 316
006F 900000      R     MOV     DPTR,#counter_calibration
0072 E4                CLR     A
0073 75F001            MOV     B,#01H
0076 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 317
0079         ?C0033:
                                           ; SOURCE LINE # 321
0079 300005            JNB     interrupt_flag,?C0035
                                           ; SOURCE LINE # 322
007C C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 323
007E 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 324
0081         ?C0035:
                                           ; SOURCE LINE # 329
0081 7B01              MOV     R3,#01H
0083 7A00        E     MOV     R2,#HIGH g_meas
0085 7900        E     MOV     R1,#LOW g_meas
0087 C003              PUSH    AR3
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 27  

0089 C002              PUSH    AR2
008B C001              PUSH    AR1
008D 7B01              MOV     R3,#01H
008F 7A00        E     MOV     R2,#HIGH g_measOld
0091 7900        E     MOV     R1,#LOW g_measOld
0093 A801              MOV     R0,AR1
0095 AC02              MOV     R4,AR2
0097 AD03              MOV     R5,AR3
0099 D001              POP     AR1
009B D002              POP     AR2
009D D003              POP     AR3
009F 7E00              MOV     R6,#00H
00A1 7F1F              MOV     R7,#01FH
00A3 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 330
00A6 7B01              MOV     R3,#01H
00A8 7A00        E     MOV     R2,#HIGH g_ref
00AA 7900        E     MOV     R1,#LOW g_ref
00AC C003              PUSH    AR3
00AE C002              PUSH    AR2
00B0 C001              PUSH    AR1
00B2 7B01              MOV     R3,#01H
00B4 7A00        E     MOV     R2,#HIGH g_refOld
00B6 7900        E     MOV     R1,#LOW g_refOld
00B8 A801              MOV     R0,AR1
00BA AC02              MOV     R4,AR2
00BC AD03              MOV     R5,AR3
00BE D001              POP     AR1
00C0 D002              POP     AR2
00C2 D003              POP     AR3
00C4 7E00              MOV     R6,#00H
00C6 7F19              MOV     R7,#019H
00C8 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 333
00CB 7B01              MOV     R3,#01H
00CD 7A00        E     MOV     R2,#HIGH g_refNew
00CF 7900        E     MOV     R1,#LOW g_refNew
00D1 C003              PUSH    AR3
00D3 C002              PUSH    AR2
00D5 C001              PUSH    AR1
00D7 7B01              MOV     R3,#01H
00D9 7A00        E     MOV     R2,#HIGH g_ref
00DB 7900        E     MOV     R1,#LOW g_ref
00DD A801              MOV     R0,AR1
00DF AC02              MOV     R4,AR2
00E1 AD03              MOV     R5,AR3
00E3 D001              POP     AR1
00E5 D002              POP     AR2
00E7 D003              POP     AR3
00E9 7E00              MOV     R6,#00H
00EB 7F19              MOV     R7,#019H
00ED 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 335
00F0 300005            JNB     interrupt_flag,?C0036
                                           ; SOURCE LINE # 336
00F3 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 337
00F5 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 338
00F8         ?C0036:
                                           ; SOURCE LINE # 340
00F8 120000      E     LCALL   MY_TIMER_ReadCounter
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 28  

00FB 900000      E     MOV     DPTR,#timer_value
00FE 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 341
0101 7F40              MOV     R7,#040H
0103 7E4B              MOV     R6,#04BH
0105 7D4C              MOV     R5,#04CH
0107 7C00              MOV     R4,#00H
0109 120000      E     LCALL   _MY_TIMER_WriteCounter
                                           ; SOURCE LINE # 343
010C 22                RET     
             ; FUNCTION function_scheduler (END)

             ; FUNCTION motor_control (BEGIN)
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 351
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 8F00        R     MOV     pwm_input+03H,R7
000A 8E00        R     MOV     pwm_input+02H,R6
000C 8D00        R     MOV     pwm_input+01H,R5
000E 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 361
0010 900000      E     MOV     DPTR,#c_mem+02H
0013 120000      E     LCALL   ?C?LLDXDATA
0016 8F00        R     MOV     k_p+03H,R7
0018 8E00        R     MOV     k_p+02H,R6
001A 8D00        R     MOV     k_p+01H,R5
001C 8C00        R     MOV     k_p,R4
                                           ; SOURCE LINE # 362
001E 900000      E     MOV     DPTR,#c_mem+06H
0021 120000      E     LCALL   ?C?LLDXDATA
0024 8F00        R     MOV     k_i+03H,R7
0026 8E00        R     MOV     k_i+02H,R6
0028 8D00        R     MOV     k_i+01H,R5
002A 8C00        R     MOV     k_i,R4
                                           ; SOURCE LINE # 363
002C 900000      E     MOV     DPTR,#c_mem+0AH
002F 120000      E     LCALL   ?C?LLDXDATA
0032 8F00        R     MOV     k_d+03H,R7
0034 8E00        R     MOV     k_d+02H,R6
0036 8D00        R     MOV     k_d+01H,R5
0038 8C00        R     MOV     k_d,R4
                                           ; SOURCE LINE # 365
003A 900000      E     MOV     DPTR,#c_mem+0EH
003D 120000      E     LCALL   ?C?LLDXDATA
0040 8F00        R     MOV     k_p_c+03H,R7
0042 8E00        R     MOV     k_p_c+02H,R6
0044 8D00        R     MOV     k_p_c+01H,R5
0046 8C00        R     MOV     k_p_c,R4
                                           ; SOURCE LINE # 366
0048 900000      E     MOV     DPTR,#c_mem+012H
004B 120000      E     LCALL   ?C?LLDXDATA
004E 8F00        R     MOV     k_i_c+03H,R7
0050 8E00        R     MOV     k_i_c+02H,R6
0052 8D00        R     MOV     k_i_c+01H,R5
0054 8C00        R     MOV     k_i_c,R4
                                           ; SOURCE LINE # 367
0056 900000      E     MOV     DPTR,#c_mem+016H
0059 120000      E     LCALL   ?C?LLDXDATA
005C 8F00        R     MOV     k_d_c+03H,R7
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 29  

005E 8E00        R     MOV     k_d_c+02H,R6
0060 8D00        R     MOV     k_d_c+01H,R5
0062 8C00        R     MOV     k_d_c,R4
                                           ; SOURCE LINE # 369
0064 900000      E     MOV     DPTR,#c_mem+01AH
0067 120000      E     LCALL   ?C?LLDXDATA
006A 8F00        R     MOV     k_p_dl+03H,R7
006C 8E00        R     MOV     k_p_dl+02H,R6
006E 8D00        R     MOV     k_p_dl+01H,R5
0070 8C00        R     MOV     k_p_dl,R4
                                           ; SOURCE LINE # 370
0072 900000      E     MOV     DPTR,#c_mem+01EH
0075 120000      E     LCALL   ?C?LLDXDATA
0078 8F00        R     MOV     k_i_dl+03H,R7
007A 8E00        R     MOV     k_i_dl+02H,R6
007C 8D00        R     MOV     k_i_dl+01H,R5
007E 8C00        R     MOV     k_i_dl,R4
                                           ; SOURCE LINE # 371
0080 900000      E     MOV     DPTR,#c_mem+022H
0083 120000      E     LCALL   ?C?LLDXDATA
0086 8F00        R     MOV     k_d_dl+03H,R7
0088 8E00        R     MOV     k_d_dl+02H,R6
008A 8D00        R     MOV     k_d_dl+01H,R5
008C 8C00        R     MOV     k_d_dl,R4
                                           ; SOURCE LINE # 373
008E 900000      E     MOV     DPTR,#c_mem+026H
0091 120000      E     LCALL   ?C?LLDXDATA
0094 8F00        R     MOV     k_p_c_dl+03H,R7
0096 8E00        R     MOV     k_p_c_dl+02H,R6
0098 8D00        R     MOV     k_p_c_dl+01H,R5
009A 8C00        R     MOV     k_p_c_dl,R4
                                           ; SOURCE LINE # 374
009C 900000      E     MOV     DPTR,#c_mem+02AH
009F 120000      E     LCALL   ?C?LLDXDATA
00A2 8F00        R     MOV     k_i_c_dl+03H,R7
00A4 8E00        R     MOV     k_i_c_dl+02H,R6
00A6 8D00        R     MOV     k_i_c_dl+01H,R5
00A8 8C00        R     MOV     k_i_c_dl,R4
                                           ; SOURCE LINE # 375
00AA 900000      E     MOV     DPTR,#c_mem+02EH
00AD 120000      E     LCALL   ?C?LLDXDATA
00B0 8F00        R     MOV     k_d_c_dl+03H,R7
00B2 8E00        R     MOV     k_d_c_dl+02H,R6
00B4 8D00        R     MOV     k_d_c_dl+01H,R5
00B6 8C00        R     MOV     k_d_c_dl,R4
                                           ; SOURCE LINE # 392
00B8 900000      E     MOV     DPTR,#c_mem+06BH
00BB E0                MOVX    A,@DPTR
00BC FE                MOV     R6,A
00BD A3                INC     DPTR
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 AB07              MOV     R3,AR7
00C2 AA06              MOV     R2,AR6
00C4 E4                CLR     A
00C5 F9                MOV     R1,A
00C6 F8                MOV     R0,A
00C7 900000      E     MOV     DPTR,#g_meas+017H
00CA 120000      E     LCALL   ?C?LLDXDATA
00CD 120000      E     LCALL   ?C?LSUB
00D0 8F00        R     MOV     err_emg_1+03H,R7
00D2 8E00        R     MOV     err_emg_1+02H,R6
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 30  

00D4 8D00        R     MOV     err_emg_1+01H,R5
00D6 8C00        R     MOV     err_emg_1,R4
                                           ; SOURCE LINE # 393
00D8 900000      E     MOV     DPTR,#c_mem+06DH
00DB E0                MOVX    A,@DPTR
00DC FE                MOV     R6,A
00DD A3                INC     DPTR
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
00E0 AB07              MOV     R3,AR7
00E2 AA06              MOV     R2,AR6
00E4 E4                CLR     A
00E5 F9                MOV     R1,A
00E6 F8                MOV     R0,A
00E7 900000      E     MOV     DPTR,#g_meas+01BH
00EA 120000      E     LCALL   ?C?LLDXDATA
00ED 120000      E     LCALL   ?C?LSUB
00F0 8F00        R     MOV     err_emg_2+03H,R7
00F2 8E00        R     MOV     err_emg_2+02H,R6
00F4 8D00        R     MOV     err_emg_2+01H,R5
00F6 8C00        R     MOV     err_emg_2,R4
                                           ; SOURCE LINE # 396
00F8 900000      E     MOV     DPTR,#c_mem+033H
00FB E0                MOVX    A,@DPTR
00FC FF                MOV     R7,A
00FD EF                MOV     A,R7
00FE 120000      E     LCALL   ?C?CCASE
0101 0000        R     DW      ?C0039
0103 01                DB      01H
0104 0000        R     DW      ?C0046
0106 02                DB      02H
0107 0000        R     DW      ?C0049
0109 03                DB      03H
010A 0000        R     DW      ?C0052
010C 04                DB      04H
010D 0000        R     DW      ?C0062
010F 05                DB      05H
0110 0000              DW      00H
0112 0000        R     DW      ?C0038
                                           ; SOURCE LINE # 398
0114         ?C0039:
                                           ; SOURCE LINE # 402
0114 900000      E     MOV     DPTR,#c_mem+079H
0117 E0                MOVX    A,@DPTR
0118 FF                MOV     R7,A
0119 EF                MOV     A,R7
011A 601F              JZ      ?C0040
                                           ; SOURCE LINE # 403
011C 900000      E     MOV     DPTR,#c_mem+07AH
011F E0                MOVX    A,@DPTR
0120 FF                MOV     R7,A
0121 EF                MOV     A,R7
0122 33                RLC     A
0123 95E0              SUBB    A,ACC
0125 FE                MOV     R6,A
0126 FD                MOV     R5,A
0127 FC                MOV     R4,A
0128 900000      E     MOV     DPTR,#g_meas+08H
012B 120000      E     LCALL   ?C?LLDXDATA0
012E 120000      E     LCALL   ?C?LMUL
0131 8F00        R     MOV     handle_value+03H,R7
0133 8E00        R     MOV     handle_value+02H,R6
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 31  

0135 8D00        R     MOV     handle_value+01H,R5
0137 8C00        R     MOV     handle_value,R4
0139 801D              SJMP    ?C0041
013B         ?C0040:
                                           ; SOURCE LINE # 405
013B 900000      E     MOV     DPTR,#c_mem+07AH
013E E0                MOVX    A,@DPTR
013F FF                MOV     R7,A
0140 EF                MOV     A,R7
0141 33                RLC     A
0142 95E0              SUBB    A,ACC
0144 FE                MOV     R6,A
0145 FD                MOV     R5,A
0146 FC                MOV     R4,A
0147 900000      E     MOV     DPTR,#g_meas+04H
014A 120000      E     LCALL   ?C?LLDXDATA0
014D 120000      E     LCALL   ?C?LMUL
0150 8F00        R     MOV     handle_value+03H,R7
0152 8E00        R     MOV     handle_value+02H,R6
0154 8D00        R     MOV     handle_value+01H,R5
0156 8C00        R     MOV     handle_value,R4
0158         ?C0041:
                                           ; SOURCE LINE # 409
0158 900000      E     MOV     DPTR,#g_ref
015B 120000      E     LCALL   ?C?LLDXDATA0
015E C3                CLR     C
015F E500        R     MOV     A,handle_value+03H
0161 9B                SUBB    A,R3
0162 FF                MOV     R7,A
0163 E500        R     MOV     A,handle_value+02H
0165 9A                SUBB    A,R2
0166 FE                MOV     R6,A
0167 E500        R     MOV     A,handle_value+01H
0169 99                SUBB    A,R1
016A FD                MOV     R5,A
016B E500        R     MOV     A,handle_value
016D 98                SUBB    A,R0
016E FC                MOV     R4,A
016F 900000      E     MOV     DPTR,#c_mem+061H
0172 120000      E     LCALL   ?C?LLDXDATA0
0175 C3                CLR     C
0176 120000      E     LCALL   ?C?SLCMP
0179 502C              JNC     ?C0042
017B 7F00              MOV     R7,#00H
017D 7E00              MOV     R6,#00H
017F 7D00              MOV     R5,#00H
0181 7C00              MOV     R4,#00H
0183 900000      E     MOV     DPTR,#c_mem+061H
0186 120000      E     LCALL   ?C?LLDXDATA0
0189 C3                CLR     C
018A 120000      E     LCALL   ?C?SLCMP
018D 6018              JZ      ?C0042
                                           ; SOURCE LINE # 410
018F 900000      E     MOV     DPTR,#g_ref
0192 120000      E     LCALL   ?C?LLDXDATA
0195 900000      E     MOV     DPTR,#c_mem+061H
0198 120000      E     LCALL   ?C?LLDXDATA0
019B 120000      E     LCALL   ?C?LADD
019E 900000      E     MOV     DPTR,#g_ref
01A1 120000      E     LCALL   ?C?LSTXDATA
01A4 020000      R     LJMP    ?C0038
01A7         ?C0042:
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 32  

                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
01A7 900000      E     MOV     DPTR,#g_ref
01AA 120000      E     LCALL   ?C?LLDXDATA0
01AD C3                CLR     C
01AE E500        R     MOV     A,handle_value+03H
01B0 9B                SUBB    A,R3
01B1 FF                MOV     R7,A
01B2 E500        R     MOV     A,handle_value+02H
01B4 9A                SUBB    A,R2
01B5 FE                MOV     R6,A
01B6 E500        R     MOV     A,handle_value+01H
01B8 99                SUBB    A,R1
01B9 FD                MOV     R5,A
01BA E500        R     MOV     A,handle_value
01BC 98                SUBB    A,R0
01BD FC                MOV     R4,A
01BE 900000      E     MOV     DPTR,#c_mem+065H
01C1 120000      E     LCALL   ?C?LLDXDATA0
01C4 D3                SETB    C
01C5 120000      E     LCALL   ?C?SLCMP
01C8 402C              JC      ?C0044
01CA 7F00              MOV     R7,#00H
01CC 7E00              MOV     R6,#00H
01CE 7D00              MOV     R5,#00H
01D0 7C00              MOV     R4,#00H
01D2 900000      E     MOV     DPTR,#c_mem+065H
01D5 120000      E     LCALL   ?C?LLDXDATA0
01D8 C3                CLR     C
01D9 120000      E     LCALL   ?C?SLCMP
01DC 6018              JZ      ?C0044
                                           ; SOURCE LINE # 413
01DE 900000      E     MOV     DPTR,#g_ref
01E1 120000      E     LCALL   ?C?LLDXDATA
01E4 900000      E     MOV     DPTR,#c_mem+065H
01E7 120000      E     LCALL   ?C?LLDXDATA0
01EA 120000      E     LCALL   ?C?LADD
01ED 900000      E     MOV     DPTR,#g_ref
01F0 120000      E     LCALL   ?C?LSTXDATA
01F3 020000      R     LJMP    ?C0038
01F6         ?C0044:
                                           ; SOURCE LINE # 415
01F6 AF00        R     MOV     R7,handle_value+03H
01F8 AE00        R     MOV     R6,handle_value+02H
01FA AD00        R     MOV     R5,handle_value+01H
01FC AC00        R     MOV     R4,handle_value
01FE 900000      E     MOV     DPTR,#g_ref
0201 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 417
0204 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 419
0207         ?C0046:
                                           ; SOURCE LINE # 420
0207 7F00              MOV     R7,#00H
0209 7E00              MOV     R6,#00H
020B 7D00              MOV     R5,#00H
020D 7C00              MOV     R4,#00H
020F AB00        R     MOV     R3,err_emg_1+03H
0211 AA00        R     MOV     R2,err_emg_1+02H
0213 A900        R     MOV     R1,err_emg_1+01H
0215 A800        R     MOV     R0,err_emg_1
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 33  

0217 D3                SETB    C
0218 120000      E     LCALL   ?C?SLCMP
021B 4044              JC      ?C0047
                                           ; SOURCE LINE # 421
021D 900000      E     MOV     DPTR,#g_mem+059H
0220 120000      E     LCALL   ?C?LLDXDATA
0223 AB00        R     MOV     R3,err_emg_1+03H
0225 AA00        R     MOV     R2,err_emg_1+02H
0227 A900        R     MOV     R1,err_emg_1+01H
0229 A800        R     MOV     R0,err_emg_1
022B 120000      E     LCALL   ?C?LMUL
022E C004              PUSH    AR4
0230 C005              PUSH    AR5
0232 C006              PUSH    AR6
0234 C007              PUSH    AR7
0236 900000      E     MOV     DPTR,#c_mem+06BH
0239 E0                MOVX    A,@DPTR
023A FE                MOV     R6,A
023B A3                INC     DPTR
023C E0                MOVX    A,@DPTR
023D FF                MOV     R7,A
023E C3                CLR     C
023F E4                CLR     A
0240 9F                SUBB    A,R7
0241 FF                MOV     R7,A
0242 7404              MOV     A,#04H
0244 9E                SUBB    A,R6
0245 FE                MOV     R6,A
0246 AB07              MOV     R3,AR7
0248 AA06              MOV     R2,AR6
024A E4                CLR     A
024B F9                MOV     R1,A
024C F8                MOV     R0,A
024D D007              POP     AR7
024F D006              POP     AR6
0251 D005              POP     AR5
0253 D004              POP     AR4
0255 120000      E     LCALL   ?C?SLDIV
0258 900000      E     MOV     DPTR,#g_ref
025B 120000      E     LCALL   ?C?LSTXDATA
025E 020000      R     LJMP    ?C0038
0261         ?C0047:
                                           ; SOURCE LINE # 423
0261 7F00              MOV     R7,#00H
0263 7E00              MOV     R6,#00H
0265 7D00              MOV     R5,#00H
0267 7C00              MOV     R4,#00H
0269 900000      E     MOV     DPTR,#g_ref
026C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 424
026F 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 426
0272         ?C0049:
                                           ; SOURCE LINE # 427
0272 7F00              MOV     R7,#00H
0274 7E00              MOV     R6,#00H
0276 7D00              MOV     R5,#00H
0278 7C00              MOV     R4,#00H
027A AB00        R     MOV     R3,err_emg_1+03H
027C AA00        R     MOV     R2,err_emg_1+02H
027E A900        R     MOV     R1,err_emg_1+01H
0280 A800        R     MOV     R0,err_emg_1
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 34  

0282 D3                SETB    C
0283 120000      E     LCALL   ?C?SLCMP
0286 406A              JC      ?C0050
                                           ; SOURCE LINE # 428
0288 900000      E     MOV     DPTR,#g_ref
028B 120000      E     LCALL   ?C?LLDXDATA
028E C004              PUSH    AR4
0290 C005              PUSH    AR5
0292 C006              PUSH    AR6
0294 C007              PUSH    AR7
0296 900000      E     MOV     DPTR,#g_mem+078H
0299 E0                MOVX    A,@DPTR
029A FF                MOV     R7,A
029B E4                CLR     A
029C FC                MOV     R4,A
029D FD                MOV     R5,A
029E FE                MOV     R6,A
029F AB00        R     MOV     R3,err_emg_1+03H
02A1 AA00        R     MOV     R2,err_emg_1+02H
02A3 A900        R     MOV     R1,err_emg_1+01H
02A5 A800        R     MOV     R0,err_emg_1
02A7 120000      E     LCALL   ?C?LMUL
02AA 7801              MOV     R0,#01H
02AC 120000      E     LCALL   ?C?LSHL
02AF C004              PUSH    AR4
02B1 C005              PUSH    AR5
02B3 C006              PUSH    AR6
02B5 C007              PUSH    AR7
02B7 900000      E     MOV     DPTR,#c_mem+06BH
02BA E0                MOVX    A,@DPTR
02BB FE                MOV     R6,A
02BC A3                INC     DPTR
02BD E0                MOVX    A,@DPTR
02BE FF                MOV     R7,A
02BF C3                CLR     C
02C0 E4                CLR     A
02C1 9F                SUBB    A,R7
02C2 FF                MOV     R7,A
02C3 7404              MOV     A,#04H
02C5 9E                SUBB    A,R6
02C6 FE                MOV     R6,A
02C7 AB07              MOV     R3,AR7
02C9 AA06              MOV     R2,AR6
02CB E4                CLR     A
02CC F9                MOV     R1,A
02CD F8                MOV     R0,A
02CE D007              POP     AR7
02D0 D006              POP     AR6
02D2 D005              POP     AR5
02D4 D004              POP     AR4
02D6 120000      E     LCALL   ?C?SLDIV
02D9 A804              MOV     R0,AR4
02DB A905              MOV     R1,AR5
02DD AA06              MOV     R2,AR6
02DF AB07              MOV     R3,AR7
02E1 D007              POP     AR7
02E3 D006              POP     AR6
02E5 D005              POP     AR5
02E7 D004              POP     AR4
02E9 120000      E     LCALL   ?C?LADD
02EC 900000      E     MOV     DPTR,#g_ref
02EF 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 35  

02F2         ?C0050:
                                           ; SOURCE LINE # 430
02F2 7F00              MOV     R7,#00H
02F4 7E00              MOV     R6,#00H
02F6 7D00              MOV     R5,#00H
02F8 7C00              MOV     R4,#00H
02FA AB00        R     MOV     R3,err_emg_2+03H
02FC AA00        R     MOV     R2,err_emg_2+02H
02FE A900        R     MOV     R1,err_emg_2+01H
0300 A800        R     MOV     R0,err_emg_2
0302 D3                SETB    C
0303 120000      E     LCALL   ?C?SLCMP
0306 5003              JNC     $ + 5H
0308 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 431
030B 900000      E     MOV     DPTR,#g_ref
030E 120000      E     LCALL   ?C?LLDXDATA
0311 C004              PUSH    AR4
0313 C005              PUSH    AR5
0315 C006              PUSH    AR6
0317 C007              PUSH    AR7
0319 900000      E     MOV     DPTR,#g_mem+078H
031C E0                MOVX    A,@DPTR
031D FF                MOV     R7,A
031E E4                CLR     A
031F FC                MOV     R4,A
0320 FD                MOV     R5,A
0321 FE                MOV     R6,A
0322 AB00        R     MOV     R3,err_emg_2+03H
0324 AA00        R     MOV     R2,err_emg_2+02H
0326 A900        R     MOV     R1,err_emg_2+01H
0328 A800        R     MOV     R0,err_emg_2
032A 120000      E     LCALL   ?C?LMUL
032D 7801              MOV     R0,#01H
032F 120000      E     LCALL   ?C?LSHL
0332 C004              PUSH    AR4
0334 C005              PUSH    AR5
0336 C006              PUSH    AR6
0338 C007              PUSH    AR7
033A 900000      E     MOV     DPTR,#c_mem+06DH
033D E0                MOVX    A,@DPTR
033E FE                MOV     R6,A
033F A3                INC     DPTR
0340 E0                MOVX    A,@DPTR
0341 FF                MOV     R7,A
0342 C3                CLR     C
0343 E4                CLR     A
0344 9F                SUBB    A,R7
0345 FF                MOV     R7,A
0346 7404              MOV     A,#04H
0348 9E                SUBB    A,R6
0349 FE                MOV     R6,A
034A AB07              MOV     R3,AR7
034C AA06              MOV     R2,AR6
034E E4                CLR     A
034F F9                MOV     R1,A
0350 F8                MOV     R0,A
0351 D007              POP     AR7
0353 D006              POP     AR6
0355 D005              POP     AR5
0357 D004              POP     AR4
0359 120000      E     LCALL   ?C?SLDIV
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 36  

035C A804              MOV     R0,AR4
035E A905              MOV     R1,AR5
0360 AA06              MOV     R2,AR6
0362 AB07              MOV     R3,AR7
0364 D007              POP     AR7
0366 D006              POP     AR6
0368 D005              POP     AR5
036A D004              POP     AR4
036C 120000      E     LCALL   ?C?LSUB
036F 900000      E     MOV     DPTR,#g_ref
0372 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 433
0375 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 435
0378         ?C0052:
                                           ; SOURCE LINE # 436
0378 900000      R     MOV     DPTR,#current_emg
037B E0                MOVX    A,@DPTR
037C FF                MOV     R7,A
037D EF                MOV     A,R7
037E 120000      E     LCALL   ?C?CCASE
0381 0000        R     DW      ?C0054
0383 00                DB      00H
0384 0000        R     DW      ?C0057
0386 01                DB      01H
0387 0000        R     DW      ?C0059
0389 02                DB      02H
038A 0000              DW      00H
038C 0000        R     DW      ?C0038
                                           ; SOURCE LINE # 437
038E         ?C0054:
                                           ; SOURCE LINE # 439
038E 7F00              MOV     R7,#00H
0390 7E00              MOV     R6,#00H
0392 7D00              MOV     R5,#00H
0394 7C00              MOV     R4,#00H
0396 AB00        R     MOV     R3,err_emg_1+03H
0398 AA00        R     MOV     R2,err_emg_1+02H
039A A900        R     MOV     R1,err_emg_1+01H
039C A800        R     MOV     R0,err_emg_1
039E D3                SETB    C
039F 120000      E     LCALL   ?C?SLCMP
03A2 4009              JC      ?C0055
                                           ; SOURCE LINE # 440
03A4 900000      R     MOV     DPTR,#current_emg
03A7 7401              MOV     A,#01H
03A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
03AA 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 442
03AD         ?C0055:
                                           ; SOURCE LINE # 443
03AD 7F00              MOV     R7,#00H
03AF 7E00              MOV     R6,#00H
03B1 7D00              MOV     R5,#00H
03B3 7C00              MOV     R4,#00H
03B5 AB00        R     MOV     R3,err_emg_2+03H
03B7 AA00        R     MOV     R2,err_emg_2+02H
03B9 A900        R     MOV     R1,err_emg_2+01H
03BB A800        R     MOV     R0,err_emg_2
03BD D3                SETB    C
03BE 120000      E     LCALL   ?C?SLCMP
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 37  

03C1 5003              JNC     $ + 5H
03C3 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 444
03C6 900000      R     MOV     DPTR,#current_emg
03C9 7402              MOV     A,#02H
03CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
03CC 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 449
03CF         ?C0057:
                                           ; SOURCE LINE # 451
03CF 7F00              MOV     R7,#00H
03D1 7E00              MOV     R6,#00H
03D3 7D00              MOV     R5,#00H
03D5 7C00              MOV     R4,#00H
03D7 AB00        R     MOV     R3,err_emg_1+03H
03D9 AA00        R     MOV     R2,err_emg_1+02H
03DB A900        R     MOV     R1,err_emg_1+01H
03DD A800        R     MOV     R0,err_emg_1
03DF C3                CLR     C
03E0 120000      E     LCALL   ?C?SLCMP
03E3 5008              JNC     ?C0058
                                           ; SOURCE LINE # 452
03E5 900000      R     MOV     DPTR,#current_emg
03E8 E4                CLR     A
03E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
03EA 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 454
03ED         ?C0058:
                                           ; SOURCE LINE # 455
03ED 900000      E     MOV     DPTR,#g_ref
03F0 120000      E     LCALL   ?C?LLDXDATA
03F3 C004              PUSH    AR4
03F5 C005              PUSH    AR5
03F7 C006              PUSH    AR6
03F9 C007              PUSH    AR7
03FB 900000      E     MOV     DPTR,#g_mem+078H
03FE E0                MOVX    A,@DPTR
03FF FF                MOV     R7,A
0400 E4                CLR     A
0401 FC                MOV     R4,A
0402 FD                MOV     R5,A
0403 FE                MOV     R6,A
0404 AB00        R     MOV     R3,err_emg_1+03H
0406 AA00        R     MOV     R2,err_emg_1+02H
0408 A900        R     MOV     R1,err_emg_1+01H
040A A800        R     MOV     R0,err_emg_1
040C 120000      E     LCALL   ?C?LMUL
040F 7B02              MOV     R3,#02H
0411 7A00              MOV     R2,#00H
0413 7900              MOV     R1,#00H
0415 7800              MOV     R0,#00H
0417 120000      E     LCALL   ?C?LMUL
041A C004              PUSH    AR4
041C C005              PUSH    AR5
041E C006              PUSH    AR6
0420 C007              PUSH    AR7
0422 900000      E     MOV     DPTR,#c_mem+06BH
0425 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 38  

0426 FE                MOV     R6,A
0427 A3                INC     DPTR
0428 E0                MOVX    A,@DPTR
0429 FF                MOV     R7,A
042A C3                CLR     C
042B E4                CLR     A
042C 9F                SUBB    A,R7
042D FF                MOV     R7,A
042E 7404              MOV     A,#04H
0430 9E                SUBB    A,R6
0431 FE                MOV     R6,A
0432 AB07              MOV     R3,AR7
0434 AA06              MOV     R2,AR6
0436 E4                CLR     A
0437 F9                MOV     R1,A
0438 F8                MOV     R0,A
0439 D007              POP     AR7
043B D006              POP     AR6
043D D005              POP     AR5
043F D004              POP     AR4
0441 120000      E     LCALL   ?C?SLDIV
0444 A804              MOV     R0,AR4
0446 A905              MOV     R1,AR5
0448 AA06              MOV     R2,AR6
044A AB07              MOV     R3,AR7
044C D007              POP     AR7
044E D006              POP     AR6
0450 D005              POP     AR5
0452 D004              POP     AR4
0454 120000      E     LCALL   ?C?LADD
0457 900000      E     MOV     DPTR,#g_ref
045A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 456
045D 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 458
0460         ?C0059:
                                           ; SOURCE LINE # 460
0460 7F00              MOV     R7,#00H
0462 7E00              MOV     R6,#00H
0464 7D00              MOV     R5,#00H
0466 7C00              MOV     R4,#00H
0468 AB00        R     MOV     R3,err_emg_2+03H
046A AA00        R     MOV     R2,err_emg_2+02H
046C A900        R     MOV     R1,err_emg_2+01H
046E A800        R     MOV     R0,err_emg_2
0470 C3                CLR     C
0471 120000      E     LCALL   ?C?SLCMP
0474 5008              JNC     ?C0060
                                           ; SOURCE LINE # 461
0476 900000      R     MOV     DPTR,#current_emg
0479 E4                CLR     A
047A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
047B 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 463
047E         ?C0060:
                                           ; SOURCE LINE # 464
047E 900000      E     MOV     DPTR,#g_ref
0481 120000      E     LCALL   ?C?LLDXDATA
0484 C004              PUSH    AR4
0486 C005              PUSH    AR5
0488 C006              PUSH    AR6
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 39  

048A C007              PUSH    AR7
048C 900000      E     MOV     DPTR,#g_mem+078H
048F E0                MOVX    A,@DPTR
0490 FF                MOV     R7,A
0491 E4                CLR     A
0492 FC                MOV     R4,A
0493 FD                MOV     R5,A
0494 FE                MOV     R6,A
0495 AB00        R     MOV     R3,err_emg_2+03H
0497 AA00        R     MOV     R2,err_emg_2+02H
0499 A900        R     MOV     R1,err_emg_2+01H
049B A800        R     MOV     R0,err_emg_2
049D 120000      E     LCALL   ?C?LMUL
04A0 7B02              MOV     R3,#02H
04A2 7A00              MOV     R2,#00H
04A4 7900              MOV     R1,#00H
04A6 7800              MOV     R0,#00H
04A8 120000      E     LCALL   ?C?LMUL
04AB C004              PUSH    AR4
04AD C005              PUSH    AR5
04AF C006              PUSH    AR6
04B1 C007              PUSH    AR7
04B3 900000      E     MOV     DPTR,#c_mem+06DH
04B6 E0                MOVX    A,@DPTR
04B7 FE                MOV     R6,A
04B8 A3                INC     DPTR
04B9 E0                MOVX    A,@DPTR
04BA FF                MOV     R7,A
04BB C3                CLR     C
04BC E4                CLR     A
04BD 9F                SUBB    A,R7
04BE FF                MOV     R7,A
04BF 7404              MOV     A,#04H
04C1 9E                SUBB    A,R6
04C2 FE                MOV     R6,A
04C3 AB07              MOV     R3,AR7
04C5 AA06              MOV     R2,AR6
04C7 E4                CLR     A
04C8 F9                MOV     R1,A
04C9 F8                MOV     R0,A
04CA D007              POP     AR7
04CC D006              POP     AR6
04CE D005              POP     AR5
04D0 D004              POP     AR4
04D2 120000      E     LCALL   ?C?SLDIV
04D5 A804              MOV     R0,AR4
04D7 A905              MOV     R1,AR5
04D9 AA06              MOV     R2,AR6
04DB AB07              MOV     R3,AR7
04DD D007              POP     AR7
04DF D006              POP     AR6
04E1 D005              POP     AR5
04E3 D004              POP     AR4
04E5 120000      E     LCALL   ?C?LSUB
04E8 900000      E     MOV     DPTR,#g_ref
04EB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 465
04EE 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 471
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 40  

04F1 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 473
04F4         ?C0062:
                                           ; SOURCE LINE # 474
04F4 900000      R     MOV     DPTR,#current_emg
04F7 E0                MOVX    A,@DPTR
04F8 FF                MOV     R7,A
04F9 EF                MOV     A,R7
04FA 120000      E     LCALL   ?C?CCASE
04FD 0000        R     DW      ?C0064
04FF 00                DB      00H
0500 0000        R     DW      ?C0067
0502 01                DB      01H
0503 0000        R     DW      ?C0070
0505 02                DB      02H
0506 0000              DW      00H
0508 0000        R     DW      ?C0038
                                           ; SOURCE LINE # 476
050A         ?C0064:
                                           ; SOURCE LINE # 477
050A 7F00              MOV     R7,#00H
050C 7E00              MOV     R6,#00H
050E 7D00              MOV     R5,#00H
0510 7C00              MOV     R4,#00H
0512 AB00        R     MOV     R3,err_emg_1+03H
0514 AA00        R     MOV     R2,err_emg_1+02H
0516 A900        R     MOV     R1,err_emg_1+01H
0518 A800        R     MOV     R0,err_emg_1
051A D3                SETB    C
051B 120000      E     LCALL   ?C?SLCMP
051E 4009              JC      ?C0065
                                           ; SOURCE LINE # 478
0520 900000      R     MOV     DPTR,#current_emg
0523 7401              MOV     A,#01H
0525 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
0526 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 480
0529         ?C0065:
                                           ; SOURCE LINE # 481
0529 7F00              MOV     R7,#00H
052B 7E00              MOV     R6,#00H
052D 7D00              MOV     R5,#00H
052F 7C00              MOV     R4,#00H
0531 AB00        R     MOV     R3,err_emg_2+03H
0533 AA00        R     MOV     R2,err_emg_2+02H
0535 A900        R     MOV     R1,err_emg_2+01H
0537 A800        R     MOV     R0,err_emg_2
0539 D3                SETB    C
053A 120000      E     LCALL   ?C?SLCMP
053D 5003              JNC     $ + 5H
053F 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 482
0542 900000      R     MOV     DPTR,#current_emg
0545 7402              MOV     A,#02H
0547 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
0548 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 488
054B         ?C0067:
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 41  

                                           ; SOURCE LINE # 490
054B 7F00              MOV     R7,#00H
054D 7E00              MOV     R6,#00H
054F 7D00              MOV     R5,#00H
0551 7C00              MOV     R4,#00H
0553 AB00        R     MOV     R3,err_emg_1+03H
0555 AA00        R     MOV     R2,err_emg_1+02H
0557 A900        R     MOV     R1,err_emg_1+01H
0559 A800        R     MOV     R0,err_emg_1
055B C3                CLR     C
055C 120000      E     LCALL   ?C?SLCMP
055F 501E              JNC     ?C0068
0561 7F00              MOV     R7,#00H
0563 7E00              MOV     R6,#00H
0565 7D00              MOV     R5,#00H
0567 7C00              MOV     R4,#00H
0569 AB00        R     MOV     R3,err_emg_2+03H
056B AA00        R     MOV     R2,err_emg_2+02H
056D A900        R     MOV     R1,err_emg_2+01H
056F A800        R     MOV     R0,err_emg_2
0571 C3                CLR     C
0572 120000      E     LCALL   ?C?SLCMP
0575 5008              JNC     ?C0068
                                           ; SOURCE LINE # 491
0577 900000      R     MOV     DPTR,#current_emg
057A E4                CLR     A
057B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
057C 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 493
057F         ?C0068:
                                           ; SOURCE LINE # 495
057F 7F00              MOV     R7,#00H
0581 7E00              MOV     R6,#00H
0583 7D00              MOV     R5,#00H
0585 7C00              MOV     R4,#00H
0587 AB00        R     MOV     R3,err_emg_1+03H
0589 AA00        R     MOV     R2,err_emg_1+02H
058B A900        R     MOV     R1,err_emg_1+01H
058D A800        R     MOV     R0,err_emg_1
058F D3                SETB    C
0590 120000      E     LCALL   ?C?SLCMP
0593 5003              JNC     $ + 5H
0595 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 496
0598 900000      E     MOV     DPTR,#g_ref
059B 120000      E     LCALL   ?C?LLDXDATA
059E C004              PUSH    AR4
05A0 C005              PUSH    AR5
05A2 C006              PUSH    AR6
05A4 C007              PUSH    AR7
05A6 900000      E     MOV     DPTR,#g_mem+078H
05A9 E0                MOVX    A,@DPTR
05AA FF                MOV     R7,A
05AB E4                CLR     A
05AC FC                MOV     R4,A
05AD FD                MOV     R5,A
05AE FE                MOV     R6,A
05AF AB00        R     MOV     R3,err_emg_1+03H
05B1 AA00        R     MOV     R2,err_emg_1+02H
05B3 A900        R     MOV     R1,err_emg_1+01H
05B5 A800        R     MOV     R0,err_emg_1
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 42  

05B7 120000      E     LCALL   ?C?LMUL
05BA 7802              MOV     R0,#02H
05BC 120000      E     LCALL   ?C?LSHL
05BF C004              PUSH    AR4
05C1 C005              PUSH    AR5
05C3 C006              PUSH    AR6
05C5 C007              PUSH    AR7
05C7 900000      E     MOV     DPTR,#c_mem+06BH
05CA E0                MOVX    A,@DPTR
05CB FE                MOV     R6,A
05CC A3                INC     DPTR
05CD E0                MOVX    A,@DPTR
05CE FF                MOV     R7,A
05CF C3                CLR     C
05D0 E4                CLR     A
05D1 9F                SUBB    A,R7
05D2 FF                MOV     R7,A
05D3 7404              MOV     A,#04H
05D5 9E                SUBB    A,R6
05D6 FE                MOV     R6,A
05D7 AB07              MOV     R3,AR7
05D9 AA06              MOV     R2,AR6
05DB E4                CLR     A
05DC F9                MOV     R1,A
05DD F8                MOV     R0,A
05DE D007              POP     AR7
05E0 D006              POP     AR6
05E2 D005              POP     AR5
05E4 D004              POP     AR4
05E6 120000      E     LCALL   ?C?SLDIV
05E9 A804              MOV     R0,AR4
05EB A905              MOV     R1,AR5
05ED AA06              MOV     R2,AR6
05EF AB07              MOV     R3,AR7
05F1 D007              POP     AR7
05F3 D006              POP     AR6
05F5 D005              POP     AR5
05F7 D004              POP     AR4
05F9 120000      E     LCALL   ?C?LADD
05FC 900000      E     MOV     DPTR,#g_ref
05FF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 498
0602 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 501
0605         ?C0070:
                                           ; SOURCE LINE # 503
0605 7F00              MOV     R7,#00H
0607 7E00              MOV     R6,#00H
0609 7D00              MOV     R5,#00H
060B 7C00              MOV     R4,#00H
060D AB00        R     MOV     R3,err_emg_1+03H
060F AA00        R     MOV     R2,err_emg_1+02H
0611 A900        R     MOV     R1,err_emg_1+01H
0613 A800        R     MOV     R0,err_emg_1
0615 C3                CLR     C
0616 120000      E     LCALL   ?C?SLCMP
0619 501E              JNC     ?C0071
061B 7F00              MOV     R7,#00H
061D 7E00              MOV     R6,#00H
061F 7D00              MOV     R5,#00H
0621 7C00              MOV     R4,#00H
0623 AB00        R     MOV     R3,err_emg_2+03H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 43  

0625 AA00        R     MOV     R2,err_emg_2+02H
0627 A900        R     MOV     R1,err_emg_2+01H
0629 A800        R     MOV     R0,err_emg_2
062B C3                CLR     C
062C 120000      E     LCALL   ?C?SLCMP
062F 5008              JNC     ?C0071
                                           ; SOURCE LINE # 504
0631 900000      R     MOV     DPTR,#current_emg
0634 E4                CLR     A
0635 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
0636 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 506
0639         ?C0071:
                                           ; SOURCE LINE # 508
0639 7F00              MOV     R7,#00H
063B 7E00              MOV     R6,#00H
063D 7D00              MOV     R5,#00H
063F 7C00              MOV     R4,#00H
0641 AB00        R     MOV     R3,err_emg_2+03H
0643 AA00        R     MOV     R2,err_emg_2+02H
0645 A900        R     MOV     R1,err_emg_2+01H
0647 A800        R     MOV     R0,err_emg_2
0649 D3                SETB    C
064A 120000      E     LCALL   ?C?SLCMP
064D 406A              JC      ?C0038
                                           ; SOURCE LINE # 509
064F 900000      E     MOV     DPTR,#g_ref
0652 120000      E     LCALL   ?C?LLDXDATA
0655 C004              PUSH    AR4
0657 C005              PUSH    AR5
0659 C006              PUSH    AR6
065B C007              PUSH    AR7
065D 900000      E     MOV     DPTR,#c_mem+078H
0660 E0                MOVX    A,@DPTR
0661 FF                MOV     R7,A
0662 E4                CLR     A
0663 FC                MOV     R4,A
0664 FD                MOV     R5,A
0665 FE                MOV     R6,A
0666 AB00        R     MOV     R3,err_emg_2+03H
0668 AA00        R     MOV     R2,err_emg_2+02H
066A A900        R     MOV     R1,err_emg_2+01H
066C A800        R     MOV     R0,err_emg_2
066E 120000      E     LCALL   ?C?LMUL
0671 7802              MOV     R0,#02H
0673 120000      E     LCALL   ?C?LSHL
0676 C004              PUSH    AR4
0678 C005              PUSH    AR5
067A C006              PUSH    AR6
067C C007              PUSH    AR7
067E 900000      E     MOV     DPTR,#c_mem+06DH
0681 E0                MOVX    A,@DPTR
0682 FE                MOV     R6,A
0683 A3                INC     DPTR
0684 E0                MOVX    A,@DPTR
0685 FF                MOV     R7,A
0686 C3                CLR     C
0687 E4                CLR     A
0688 9F                SUBB    A,R7
0689 FF                MOV     R7,A
068A 7404              MOV     A,#04H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 44  

068C 9E                SUBB    A,R6
068D FE                MOV     R6,A
068E AB07              MOV     R3,AR7
0690 AA06              MOV     R2,AR6
0692 E4                CLR     A
0693 F9                MOV     R1,A
0694 F8                MOV     R0,A
0695 D007              POP     AR7
0697 D006              POP     AR6
0699 D005              POP     AR5
069B D004              POP     AR4
069D 120000      E     LCALL   ?C?SLDIV
06A0 A804              MOV     R0,AR4
06A2 A905              MOV     R1,AR5
06A4 AA06              MOV     R2,AR6
06A6 AB07              MOV     R3,AR7
06A8 D007              POP     AR7
06AA D006              POP     AR6
06AC D005              POP     AR5
06AE D004              POP     AR4
06B0 120000      E     LCALL   ?C?LSUB
06B3 900000      E     MOV     DPTR,#g_ref
06B6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
06B9         ?C0038:
                                           ; SOURCE LINE # 522
06B9 900000      E     MOV     DPTR,#c_mem+050H
06BC E0                MOVX    A,@DPTR
06BD FF                MOV     R7,A
06BE EF                MOV     A,R7
06BF 603C              JZ      ?C0075
                                           ; SOURCE LINE # 523
06C1 900000      E     MOV     DPTR,#c_mem+051H
06C4 120000      E     LCALL   ?C?LLDXDATA
06C7 900000      E     MOV     DPTR,#g_ref
06CA 120000      E     LCALL   ?C?LLDXDATA0
06CD C3                CLR     C
06CE 120000      E     LCALL   ?C?SLCMP
06D1 500C              JNC     ?C0076
                                           ; SOURCE LINE # 524
06D3 900000      E     MOV     DPTR,#c_mem+051H
06D6 120000      E     LCALL   ?C?LLDXDATA
06D9 900000      E     MOV     DPTR,#g_ref
06DC 120000      E     LCALL   ?C?LSTXDATA
06DF         ?C0076:
                                           ; SOURCE LINE # 525
06DF 900000      E     MOV     DPTR,#c_mem+059H
06E2 120000      E     LCALL   ?C?LLDXDATA
06E5 900000      E     MOV     DPTR,#g_ref
06E8 120000      E     LCALL   ?C?LLDXDATA0
06EB D3                SETB    C
06EC 120000      E     LCALL   ?C?SLCMP
06EF 400C              JC      ?C0075
                                           ; SOURCE LINE # 526
06F1 900000      E     MOV     DPTR,#c_mem+059H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 45  

06F4 120000      E     LCALL   ?C?LLDXDATA
06F7 900000      E     MOV     DPTR,#g_ref
06FA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 527
06FD         ?C0075:
                                           ; SOURCE LINE # 529
06FD 900000      E     MOV     DPTR,#c_mem+034H
0700 E0                MOVX    A,@DPTR
0701 FF                MOV     R7,A
0702 EF                MOV     A,R7
0703 120000      E     LCALL   ?C?CCASE
0706 0000        R     DW      ?C0100
0708 00                DB      00H
0709 0000        R     DW      ?C0122
070B 01                DB      01H
070C 0000        R     DW      ?C0109
070E 02                DB      02H
070F 0000        R     DW      ?C0079
0711 03                DB      03H
0712 0000              DW      00H
0714 0000        R     DW      ?C0078
                                           ; SOURCE LINE # 531
0716         ?C0079:
                                           ; SOURCE LINE # 532
0716 900000      E     MOV     DPTR,#g_meas
0719 120000      E     LCALL   ?C?LLDXDATA0
071C 900000      E     MOV     DPTR,#g_ref
071F 120000      E     LCALL   ?C?LLDXDATA
0722 120000      E     LCALL   ?C?LSUB
0725 8F00        R     MOV     pos_error+03H,R7
0727 8E00        R     MOV     pos_error+02H,R6
0729 8D00        R     MOV     pos_error+01H,R5
072B 8C00        R     MOV     pos_error,R4
                                           ; SOURCE LINE # 534
072D 900000      R     MOV     DPTR,#pos_error_sum
0730 120000      E     LCALL   ?C?LLDXDATA
0733 EF                MOV     A,R7
0734 2500        R     ADD     A,pos_error+03H
0736 FF                MOV     R7,A
0737 EE                MOV     A,R6
0738 3500        R     ADDC    A,pos_error+02H
073A FE                MOV     R6,A
073B ED                MOV     A,R5
073C 3500        R     ADDC    A,pos_error+01H
073E FD                MOV     R5,A
073F EC                MOV     A,R4
0740 3500        R     ADDC    A,pos_error
0742 FC                MOV     R4,A
0743 900000      R     MOV     DPTR,#pos_error_sum
0746 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 537
0749 7F80              MOV     R7,#080H
074B 7EF0              MOV     R6,#0F0H
074D 7DFA              MOV     R5,#0FAH
074F 7C02              MOV     R4,#02H
0751 900000      R     MOV     DPTR,#pos_error_sum
0754 120000      E     LCALL   ?C?LLDXDATA0
0757 D3                SETB    C
0758 120000      E     LCALL   ?C?SLCMP
075B 4010              JC      ?C0080
                                           ; SOURCE LINE # 538
075D 7F80              MOV     R7,#080H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 46  

075F 7EF0              MOV     R6,#0F0H
0761 7DFA              MOV     R5,#0FAH
0763 7C02              MOV     R4,#02H
0765 900000      R     MOV     DPTR,#pos_error_sum
0768 120000      E     LCALL   ?C?LSTXDATA
076B 8022              SJMP    ?C0081
076D         ?C0080:
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
076D 7F80              MOV     R7,#080H
076F 7E0F              MOV     R6,#0FH
0771 7D05              MOV     R5,#05H
0773 7CFD              MOV     R4,#0FDH
0775 900000      R     MOV     DPTR,#pos_error_sum
0778 120000      E     LCALL   ?C?LLDXDATA0
077B C3                CLR     C
077C 120000      E     LCALL   ?C?SLCMP
077F 500E              JNC     ?C0081
                                           ; SOURCE LINE # 541
0781 7F80              MOV     R7,#080H
0783 7E0F              MOV     R6,#0FH
0785 7D05              MOV     R5,#05H
0787 7CFD              MOV     R4,#0FDH
0789 900000      R     MOV     DPTR,#pos_error_sum
078C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 542
078F         ?C0081:
                                           ; SOURCE LINE # 546
078F 7F00              MOV     R7,#00H
0791 7E00              MOV     R6,#00H
0793 7D00              MOV     R5,#00H
0795 7C00              MOV     R4,#00H
0797 8F00        R     MOV     i_ref+03H,R7
0799 8E00        R     MOV     i_ref+02H,R6
079B 8D00        R     MOV     i_ref+01H,R5
079D 8C00        R     MOV     i_ref,R4
                                           ; SOURCE LINE # 549
079F 7F00              MOV     R7,#00H
07A1 7E00              MOV     R6,#00H
07A3 7D00              MOV     R5,#00H
07A5 7C00              MOV     R4,#00H
07A7 AB00        R     MOV     R3,k_p_dl+03H
07A9 AA00        R     MOV     R2,k_p_dl+02H
07AB A900        R     MOV     R1,k_p_dl+01H
07AD A800        R     MOV     R0,k_p_dl
07AF C3                CLR     C
07B0 120000      E     LCALL   ?C?SLCMP
07B3 6030              JZ      ?C0083
                                           ; SOURCE LINE # 550
07B5 AF00        R     MOV     R7,pos_error+03H
07B7 AE00        R     MOV     R6,pos_error+02H
07B9 AD00        R     MOV     R5,pos_error+01H
07BB AC00        R     MOV     R4,pos_error
07BD AB00        R     MOV     R3,k_p_dl+03H
07BF AA00        R     MOV     R2,k_p_dl+02H
07C1 A900        R     MOV     R1,k_p_dl+01H
07C3 A800        R     MOV     R0,k_p_dl
07C5 120000      E     LCALL   ?C?LMUL
07C8 7810              MOV     R0,#010H
07CA 120000      E     LCALL   ?C?SLSHR
07CD E500        R     MOV     A,i_ref+03H
07CF 2F                ADD     A,R7
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 47  

07D0 FF                MOV     R7,A
07D1 E500        R     MOV     A,i_ref+02H
07D3 3E                ADDC    A,R6
07D4 FE                MOV     R6,A
07D5 E500        R     MOV     A,i_ref+01H
07D7 3D                ADDC    A,R5
07D8 FD                MOV     R5,A
07D9 E500        R     MOV     A,i_ref
07DB 3C                ADDC    A,R4
07DC FC                MOV     R4,A
07DD 8F00        R     MOV     i_ref+03H,R7
07DF 8E00        R     MOV     i_ref+02H,R6
07E1 8D00        R     MOV     i_ref+01H,R5
07E3 8C00        R     MOV     i_ref,R4
07E5         ?C0083:
                                           ; SOURCE LINE # 553
07E5 7F00              MOV     R7,#00H
07E7 7E00              MOV     R6,#00H
07E9 7D00              MOV     R5,#00H
07EB 7C00              MOV     R4,#00H
07ED AB00        R     MOV     R3,k_i_dl+03H
07EF AA00        R     MOV     R2,k_i_dl+02H
07F1 A900        R     MOV     R1,k_i_dl+01H
07F3 A800        R     MOV     R0,k_i_dl
07F5 C3                CLR     C
07F6 120000      E     LCALL   ?C?SLCMP
07F9 6033              JZ      ?C0084
                                           ; SOURCE LINE # 554
07FB 900000      R     MOV     DPTR,#pos_error_sum
07FE 120000      E     LCALL   ?C?LLDXDATA
0801 7806              MOV     R0,#06H
0803 120000      E     LCALL   ?C?SLSHR
0806 AB00        R     MOV     R3,k_i_dl+03H
0808 AA00        R     MOV     R2,k_i_dl+02H
080A A900        R     MOV     R1,k_i_dl+01H
080C A800        R     MOV     R0,k_i_dl
080E 120000      E     LCALL   ?C?LMUL
0811 780A              MOV     R0,#0AH
0813 120000      E     LCALL   ?C?SLSHR
0816 E500        R     MOV     A,i_ref+03H
0818 2F                ADD     A,R7
0819 FF                MOV     R7,A
081A E500        R     MOV     A,i_ref+02H
081C 3E                ADDC    A,R6
081D FE                MOV     R6,A
081E E500        R     MOV     A,i_ref+01H
0820 3D                ADDC    A,R5
0821 FD                MOV     R5,A
0822 E500        R     MOV     A,i_ref
0824 3C                ADDC    A,R4
0825 FC                MOV     R4,A
0826 8F00        R     MOV     i_ref+03H,R7
0828 8E00        R     MOV     i_ref+02H,R6
082A 8D00        R     MOV     i_ref+01H,R5
082C 8C00        R     MOV     i_ref,R4
082E         ?C0084:
                                           ; SOURCE LINE # 557
082E 7F00              MOV     R7,#00H
0830 7E00              MOV     R6,#00H
0832 7D00              MOV     R5,#00H
0834 7C00              MOV     R4,#00H
0836 AB00        R     MOV     R3,k_d_dl+03H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 48  

0838 AA00        R     MOV     R2,k_d_dl+02H
083A A900        R     MOV     R1,k_d_dl+01H
083C A800        R     MOV     R0,k_d_dl
083E C3                CLR     C
083F 120000      E     LCALL   ?C?SLCMP
0842 603F              JZ      ?C0085
                                           ; SOURCE LINE # 558
0844 900000      R     MOV     DPTR,#prev_pos_err
0847 120000      E     LCALL   ?C?LLDXDATA0
084A C3                CLR     C
084B E500        R     MOV     A,pos_error+03H
084D 9B                SUBB    A,R3
084E FF                MOV     R7,A
084F E500        R     MOV     A,pos_error+02H
0851 9A                SUBB    A,R2
0852 FE                MOV     R6,A
0853 E500        R     MOV     A,pos_error+01H
0855 99                SUBB    A,R1
0856 FD                MOV     R5,A
0857 E500        R     MOV     A,pos_error
0859 98                SUBB    A,R0
085A FC                MOV     R4,A
085B AB00        R     MOV     R3,k_d_dl+03H
085D AA00        R     MOV     R2,k_d_dl+02H
085F A900        R     MOV     R1,k_d_dl+01H
0861 A800        R     MOV     R0,k_d_dl
0863 120000      E     LCALL   ?C?LMUL
0866 7810              MOV     R0,#010H
0868 120000      E     LCALL   ?C?SLSHR
086B E500        R     MOV     A,i_ref+03H
086D 2F                ADD     A,R7
086E FF                MOV     R7,A
086F E500        R     MOV     A,i_ref+02H
0871 3E                ADDC    A,R6
0872 FE                MOV     R6,A
0873 E500        R     MOV     A,i_ref+01H
0875 3D                ADDC    A,R5
0876 FD                MOV     R5,A
0877 E500        R     MOV     A,i_ref
0879 3C                ADDC    A,R4
087A FC                MOV     R4,A
087B 8F00        R     MOV     i_ref+03H,R7
087D 8E00        R     MOV     i_ref+02H,R6
087F 8D00        R     MOV     i_ref+01H,R5
0881 8C00        R     MOV     i_ref,R4
0883         ?C0085:
                                           ; SOURCE LINE # 561
0883 AF00        R     MOV     R7,pos_error+03H
0885 AE00        R     MOV     R6,pos_error+02H
0887 AD00        R     MOV     R5,pos_error+01H
0889 AC00        R     MOV     R4,pos_error
088B 900000      R     MOV     DPTR,#prev_pos_err
088E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 567
0891 7F00              MOV     R7,#00H
0893 7E00              MOV     R6,#00H
0895 7D00              MOV     R5,#00H
0897 7C00              MOV     R4,#00H
0899 AB00        R     MOV     R3,i_ref+03H
089B AA00        R     MOV     R2,i_ref+02H
089D A900        R     MOV     R1,i_ref+01H
089F A800        R     MOV     R0,i_ref
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 49  

08A1 C3                CLR     C
08A2 120000      E     LCALL   ?C?SLCMP
08A5 4004              JC      ?C0086
                                           ; SOURCE LINE # 568
08A7 D200        R     SETB    motor_dir
08A9 8002              SJMP    ?C0087
08AB         ?C0086:
                                           ; SOURCE LINE # 570
08AB C200        R     CLR     motor_dir
08AD         ?C0087:
                                           ; SOURCE LINE # 576
08AD 900000      E     MOV     DPTR,#c_mem+069H
08B0 E0                MOVX    A,@DPTR
08B1 FE                MOV     R6,A
08B2 A3                INC     DPTR
08B3 E0                MOVX    A,@DPTR
08B4 FF                MOV     R7,A
08B5 EE                MOV     A,R6
08B6 33                RLC     A
08B7 95E0              SUBB    A,ACC
08B9 FD                MOV     R5,A
08BA FC                MOV     R4,A
08BB AB00        R     MOV     R3,i_ref+03H
08BD AA00        R     MOV     R2,i_ref+02H
08BF A900        R     MOV     R1,i_ref+01H
08C1 A800        R     MOV     R0,i_ref
08C3 D3                SETB    C
08C4 120000      E     LCALL   ?C?SLCMP
08C7 4018              JC      ?C0088
                                           ; SOURCE LINE # 577
08C9 900000      E     MOV     DPTR,#c_mem+069H
08CC E0                MOVX    A,@DPTR
08CD FE                MOV     R6,A
08CE A3                INC     DPTR
08CF E0                MOVX    A,@DPTR
08D0 FF                MOV     R7,A
08D1 EE                MOV     A,R6
08D2 33                RLC     A
08D3 95E0              SUBB    A,ACC
08D5 FD                MOV     R5,A
08D6 FC                MOV     R4,A
08D7 8F00        R     MOV     i_ref+03H,R7
08D9 8E00        R     MOV     i_ref+02H,R6
08DB 8D00        R     MOV     i_ref+01H,R5
08DD 8C00        R     MOV     i_ref,R4
08DF 8040              SJMP    ?C0089
08E1         ?C0088:
                                           ; SOURCE LINE # 579
08E1 900000      E     MOV     DPTR,#c_mem+069H
08E4 E0                MOVX    A,@DPTR
08E5 FE                MOV     R6,A
08E6 A3                INC     DPTR
08E7 E0                MOVX    A,@DPTR
08E8 FF                MOV     R7,A
08E9 C3                CLR     C
08EA E4                CLR     A
08EB 9F                SUBB    A,R7
08EC FF                MOV     R7,A
08ED E4                CLR     A
08EE 9E                SUBB    A,R6
08EF FE                MOV     R6,A
08F0 EE                MOV     A,R6
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 50  

08F1 33                RLC     A
08F2 95E0              SUBB    A,ACC
08F4 FD                MOV     R5,A
08F5 FC                MOV     R4,A
08F6 AB00        R     MOV     R3,i_ref+03H
08F8 AA00        R     MOV     R2,i_ref+02H
08FA A900        R     MOV     R1,i_ref+01H
08FC A800        R     MOV     R0,i_ref
08FE C3                CLR     C
08FF 120000      E     LCALL   ?C?SLCMP
0902 501D              JNC     ?C0089
                                           ; SOURCE LINE # 580
0904 900000      E     MOV     DPTR,#c_mem+069H
0907 E0                MOVX    A,@DPTR
0908 FE                MOV     R6,A
0909 A3                INC     DPTR
090A E0                MOVX    A,@DPTR
090B FF                MOV     R7,A
090C C3                CLR     C
090D E4                CLR     A
090E 9F                SUBB    A,R7
090F FF                MOV     R7,A
0910 E4                CLR     A
0911 9E                SUBB    A,R6
0912 FE                MOV     R6,A
0913 EE                MOV     A,R6
0914 33                RLC     A
0915 95E0              SUBB    A,ACC
0917 FD                MOV     R5,A
0918 FC                MOV     R4,A
0919 8F00        R     MOV     i_ref+03H,R7
091B 8E00        R     MOV     i_ref+02H,R6
091D 8D00        R     MOV     i_ref+01H,R5
091F 8C00        R     MOV     i_ref,R4
0921         ?C0089:
                                           ; SOURCE LINE # 589
0921 AF00        R     MOV     R7,i_ref+03H
0923 AE00        R     MOV     R6,i_ref+02H
0925 AD00        R     MOV     R5,i_ref+01H
0927 AC00        R     MOV     R4,i_ref
0929 900000      E     MOV     DPTR,#g_meas+010H
092C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 592
092F 900000      E     MOV     DPTR,#g_meas+0CH
0932 120000      E     LCALL   ?C?LLDXDATA0
0935 C3                CLR     C
0936 E500        R     MOV     A,i_ref+03H
0938 9B                SUBB    A,R3
0939 FF                MOV     R7,A
093A E500        R     MOV     A,i_ref+02H
093C 9A                SUBB    A,R2
093D FE                MOV     R6,A
093E E500        R     MOV     A,i_ref+01H
0940 99                SUBB    A,R1
0941 FD                MOV     R5,A
0942 E500        R     MOV     A,i_ref
0944 98                SUBB    A,R0
0945 FC                MOV     R4,A
0946 8F00        R     MOV     curr_error+03H,R7
0948 8E00        R     MOV     curr_error+02H,R6
094A 8D00        R     MOV     curr_error+01H,R5
094C 8C00        R     MOV     curr_error,R4
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 51  

                                           ; SOURCE LINE # 593
094E 900000      R     MOV     DPTR,#curr_error_sum
0951 120000      E     LCALL   ?C?LLDXDATA
0954 EF                MOV     A,R7
0955 2500        R     ADD     A,curr_error+03H
0957 FF                MOV     R7,A
0958 EE                MOV     A,R6
0959 3500        R     ADDC    A,curr_error+02H
095B FE                MOV     R6,A
095C ED                MOV     A,R5
095D 3500        R     ADDC    A,curr_error+01H
095F FD                MOV     R5,A
0960 EC                MOV     A,R4
0961 3500        R     ADDC    A,curr_error
0963 FC                MOV     R4,A
0964 900000      R     MOV     DPTR,#curr_error_sum
0967 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 595
096A 7FA0              MOV     R7,#0A0H
096C 7E86              MOV     R6,#086H
096E 7D01              MOV     R5,#01H
0970 7C00              MOV     R4,#00H
0972 900000      R     MOV     DPTR,#curr_error_sum
0975 120000      E     LCALL   ?C?LLDXDATA0
0978 D3                SETB    C
0979 120000      E     LCALL   ?C?SLCMP
097C 4010              JC      ?C0091
                                           ; SOURCE LINE # 596
097E 7FA0              MOV     R7,#0A0H
0980 7E86              MOV     R6,#086H
0982 7D01              MOV     R5,#01H
0984 7C00              MOV     R4,#00H
0986 900000      R     MOV     DPTR,#curr_error_sum
0989 120000      E     LCALL   ?C?LSTXDATA
098C 8022              SJMP    ?C0092
098E         ?C0091:
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 598
098E 7F60              MOV     R7,#060H
0990 7E79              MOV     R6,#079H
0992 7DFE              MOV     R5,#0FEH
0994 7CFF              MOV     R4,#0FFH
0996 900000      R     MOV     DPTR,#curr_error_sum
0999 120000      E     LCALL   ?C?LLDXDATA0
099C C3                CLR     C
099D 120000      E     LCALL   ?C?SLCMP
09A0 500E              JNC     ?C0092
                                           ; SOURCE LINE # 599
09A2 7F60              MOV     R7,#060H
09A4 7E79              MOV     R6,#079H
09A6 7DFE              MOV     R5,#0FEH
09A8 7CFF              MOV     R4,#0FFH
09AA 900000      R     MOV     DPTR,#curr_error_sum
09AD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 600
09B0         ?C0092:
                                           ; SOURCE LINE # 604
09B0 7F00              MOV     R7,#00H
09B2 7E00              MOV     R6,#00H
09B4 7D00              MOV     R5,#00H
09B6 7C00              MOV     R4,#00H
09B8 8F00        R     MOV     pwm_input+03H,R7
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 52  

09BA 8E00        R     MOV     pwm_input+02H,R6
09BC 8D00        R     MOV     pwm_input+01H,R5
09BE 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 607
09C0 7F00              MOV     R7,#00H
09C2 7E00              MOV     R6,#00H
09C4 7D00              MOV     R5,#00H
09C6 7C00              MOV     R4,#00H
09C8 AB00        R     MOV     R3,k_p_c_dl+03H
09CA AA00        R     MOV     R2,k_p_c_dl+02H
09CC A900        R     MOV     R1,k_p_c_dl+01H
09CE A800        R     MOV     R0,k_p_c_dl
09D0 C3                CLR     C
09D1 120000      E     LCALL   ?C?SLCMP
09D4 6030              JZ      ?C0094
                                           ; SOURCE LINE # 608
09D6 AF00        R     MOV     R7,curr_error+03H
09D8 AE00        R     MOV     R6,curr_error+02H
09DA AD00        R     MOV     R5,curr_error+01H
09DC AC00        R     MOV     R4,curr_error
09DE AB00        R     MOV     R3,k_p_c_dl+03H
09E0 AA00        R     MOV     R2,k_p_c_dl+02H
09E2 A900        R     MOV     R1,k_p_c_dl+01H
09E4 A800        R     MOV     R0,k_p_c_dl
09E6 120000      E     LCALL   ?C?LMUL
09E9 7810              MOV     R0,#010H
09EB 120000      E     LCALL   ?C?SLSHR
09EE E500        R     MOV     A,pwm_input+03H
09F0 2F                ADD     A,R7
09F1 FF                MOV     R7,A
09F2 E500        R     MOV     A,pwm_input+02H
09F4 3E                ADDC    A,R6
09F5 FE                MOV     R6,A
09F6 E500        R     MOV     A,pwm_input+01H
09F8 3D                ADDC    A,R5
09F9 FD                MOV     R5,A
09FA E500        R     MOV     A,pwm_input
09FC 3C                ADDC    A,R4
09FD FC                MOV     R4,A
09FE 8F00        R     MOV     pwm_input+03H,R7
0A00 8E00        R     MOV     pwm_input+02H,R6
0A02 8D00        R     MOV     pwm_input+01H,R5
0A04 8C00        R     MOV     pwm_input,R4
0A06         ?C0094:
                                           ; SOURCE LINE # 611
0A06 7F00              MOV     R7,#00H
0A08 7E00              MOV     R6,#00H
0A0A 7D00              MOV     R5,#00H
0A0C 7C00              MOV     R4,#00H
0A0E AB00        R     MOV     R3,k_i_c_dl+03H
0A10 AA00        R     MOV     R2,k_i_c_dl+02H
0A12 A900        R     MOV     R1,k_i_c_dl+01H
0A14 A800        R     MOV     R0,k_i_c_dl
0A16 C3                CLR     C
0A17 120000      E     LCALL   ?C?SLCMP
0A1A 6033              JZ      ?C0095
                                           ; SOURCE LINE # 612
0A1C 900000      R     MOV     DPTR,#curr_error_sum
0A1F 120000      E     LCALL   ?C?LLDXDATA
0A22 7806              MOV     R0,#06H
0A24 120000      E     LCALL   ?C?SLSHR
0A27 AB00        R     MOV     R3,k_i_c_dl+03H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 53  

0A29 AA00        R     MOV     R2,k_i_c_dl+02H
0A2B A900        R     MOV     R1,k_i_c_dl+01H
0A2D A800        R     MOV     R0,k_i_c_dl
0A2F 120000      E     LCALL   ?C?LMUL
0A32 780A              MOV     R0,#0AH
0A34 120000      E     LCALL   ?C?SLSHR
0A37 E500        R     MOV     A,pwm_input+03H
0A39 2F                ADD     A,R7
0A3A FF                MOV     R7,A
0A3B E500        R     MOV     A,pwm_input+02H
0A3D 3E                ADDC    A,R6
0A3E FE                MOV     R6,A
0A3F E500        R     MOV     A,pwm_input+01H
0A41 3D                ADDC    A,R5
0A42 FD                MOV     R5,A
0A43 E500        R     MOV     A,pwm_input
0A45 3C                ADDC    A,R4
0A46 FC                MOV     R4,A
0A47 8F00        R     MOV     pwm_input+03H,R7
0A49 8E00        R     MOV     pwm_input+02H,R6
0A4B 8D00        R     MOV     pwm_input+01H,R5
0A4D 8C00        R     MOV     pwm_input,R4
0A4F         ?C0095:
                                           ; SOURCE LINE # 615
0A4F 7F00              MOV     R7,#00H
0A51 7E00              MOV     R6,#00H
0A53 7D00              MOV     R5,#00H
0A55 7C00              MOV     R4,#00H
0A57 AB00        R     MOV     R3,k_d_c_dl+03H
0A59 AA00        R     MOV     R2,k_d_c_dl+02H
0A5B A900        R     MOV     R1,k_d_c_dl+01H
0A5D A800        R     MOV     R0,k_d_c_dl
0A5F C3                CLR     C
0A60 120000      E     LCALL   ?C?SLCMP
0A63 603F              JZ      ?C0096
                                           ; SOURCE LINE # 616
0A65 900000      R     MOV     DPTR,#prev_curr_err
0A68 120000      E     LCALL   ?C?LLDXDATA0
0A6B C3                CLR     C
0A6C E500        R     MOV     A,curr_error+03H
0A6E 9B                SUBB    A,R3
0A6F FF                MOV     R7,A
0A70 E500        R     MOV     A,curr_error+02H
0A72 9A                SUBB    A,R2
0A73 FE                MOV     R6,A
0A74 E500        R     MOV     A,curr_error+01H
0A76 99                SUBB    A,R1
0A77 FD                MOV     R5,A
0A78 E500        R     MOV     A,curr_error
0A7A 98                SUBB    A,R0
0A7B FC                MOV     R4,A
0A7C AB00        R     MOV     R3,k_d_c_dl+03H
0A7E AA00        R     MOV     R2,k_d_c_dl+02H
0A80 A900        R     MOV     R1,k_d_c_dl+01H
0A82 A800        R     MOV     R0,k_d_c_dl
0A84 120000      E     LCALL   ?C?LMUL
0A87 7810              MOV     R0,#010H
0A89 120000      E     LCALL   ?C?SLSHR
0A8C E500        R     MOV     A,pwm_input+03H
0A8E 2F                ADD     A,R7
0A8F FF                MOV     R7,A
0A90 E500        R     MOV     A,pwm_input+02H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 54  

0A92 3E                ADDC    A,R6
0A93 FE                MOV     R6,A
0A94 E500        R     MOV     A,pwm_input+01H
0A96 3D                ADDC    A,R5
0A97 FD                MOV     R5,A
0A98 E500        R     MOV     A,pwm_input
0A9A 3C                ADDC    A,R4
0A9B FC                MOV     R4,A
0A9C 8F00        R     MOV     pwm_input+03H,R7
0A9E 8E00        R     MOV     pwm_input+02H,R6
0AA0 8D00        R     MOV     pwm_input+01H,R5
0AA2 8C00        R     MOV     pwm_input,R4
0AA4         ?C0096:
                                           ; SOURCE LINE # 619
0AA4 7F9C              MOV     R7,#09CH
0AA6 7EFF              MOV     R6,#0FFH
0AA8 7DFF              MOV     R5,#0FFH
0AAA 7CFF              MOV     R4,#0FFH
0AAC AB00        R     MOV     R3,pwm_input+03H
0AAE AA00        R     MOV     R2,pwm_input+02H
0AB0 A900        R     MOV     R1,pwm_input+01H
0AB2 A800        R     MOV     R0,pwm_input
0AB4 C3                CLR     C
0AB5 120000      E     LCALL   ?C?SLCMP
0AB8 5012              JNC     ?C0097
                                           ; SOURCE LINE # 620
0ABA 7F9C              MOV     R7,#09CH
0ABC 7EFF              MOV     R6,#0FFH
0ABE 7DFF              MOV     R5,#0FFH
0AC0 7CFF              MOV     R4,#0FFH
0AC2 8F00        R     MOV     pwm_input+03H,R7
0AC4 8E00        R     MOV     pwm_input+02H,R6
0AC6 8D00        R     MOV     pwm_input+01H,R5
0AC8 8C00        R     MOV     pwm_input,R4
0ACA 8026              SJMP    ?C0098
0ACC         ?C0097:
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
0ACC 7F64              MOV     R7,#064H
0ACE 7E00              MOV     R6,#00H
0AD0 7D00              MOV     R5,#00H
0AD2 7C00              MOV     R4,#00H
0AD4 AB00        R     MOV     R3,pwm_input+03H
0AD6 AA00        R     MOV     R2,pwm_input+02H
0AD8 A900        R     MOV     R1,pwm_input+01H
0ADA A800        R     MOV     R0,pwm_input
0ADC D3                SETB    C
0ADD 120000      E     LCALL   ?C?SLCMP
0AE0 4010              JC      ?C0098
                                           ; SOURCE LINE # 623
0AE2 7F64              MOV     R7,#064H
0AE4 7E00              MOV     R6,#00H
0AE6 7D00              MOV     R5,#00H
0AE8 7C00              MOV     R4,#00H
0AEA 8F00        R     MOV     pwm_input+03H,R7
0AEC 8E00        R     MOV     pwm_input+02H,R6
0AEE 8D00        R     MOV     pwm_input+01H,R5
0AF0 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 624
0AF2         ?C0098:
                                           ; SOURCE LINE # 627
0AF2 AF00        R     MOV     R7,curr_error+03H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 55  

0AF4 AE00        R     MOV     R6,curr_error+02H
0AF6 AD00        R     MOV     R5,curr_error+01H
0AF8 AC00        R     MOV     R4,curr_error
0AFA 900000      R     MOV     DPTR,#prev_curr_err
0AFD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 629
0B00 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 632
0B03         ?C0100:
                                           ; SOURCE LINE # 633
0B03 900000      E     MOV     DPTR,#g_meas
0B06 120000      E     LCALL   ?C?LLDXDATA0
0B09 900000      E     MOV     DPTR,#g_ref
0B0C 120000      E     LCALL   ?C?LLDXDATA
0B0F 120000      E     LCALL   ?C?LSUB
0B12 8F00        R     MOV     pos_error+03H,R7
0B14 8E00        R     MOV     pos_error+02H,R6
0B16 8D00        R     MOV     pos_error+01H,R5
0B18 8C00        R     MOV     pos_error,R4
                                           ; SOURCE LINE # 635
0B1A 900000      R     MOV     DPTR,#pos_error_sum
0B1D 120000      E     LCALL   ?C?LLDXDATA
0B20 EF                MOV     A,R7
0B21 2500        R     ADD     A,pos_error+03H
0B23 FF                MOV     R7,A
0B24 EE                MOV     A,R6
0B25 3500        R     ADDC    A,pos_error+02H
0B27 FE                MOV     R6,A
0B28 ED                MOV     A,R5
0B29 3500        R     ADDC    A,pos_error+01H
0B2B FD                MOV     R5,A
0B2C EC                MOV     A,R4
0B2D 3500        R     ADDC    A,pos_error
0B2F FC                MOV     R4,A
0B30 900000      R     MOV     DPTR,#pos_error_sum
0B33 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 638
0B36 7FE8              MOV     R7,#0E8H
0B38 7E03              MOV     R6,#03H
0B3A 7D00              MOV     R5,#00H
0B3C 7C00              MOV     R4,#00H
0B3E 900000      R     MOV     DPTR,#pos_error_sum
0B41 120000      E     LCALL   ?C?LLDXDATA0
0B44 D3                SETB    C
0B45 120000      E     LCALL   ?C?SLCMP
0B48 4010              JC      ?C0101
                                           ; SOURCE LINE # 639
0B4A 7FE8              MOV     R7,#0E8H
0B4C 7E03              MOV     R6,#03H
0B4E 7D00              MOV     R5,#00H
0B50 7C00              MOV     R4,#00H
0B52 900000      R     MOV     DPTR,#pos_error_sum
0B55 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 640
0B58 8022              SJMP    ?C0102
0B5A         ?C0101:
0B5A 7F18              MOV     R7,#018H
0B5C 7EFC              MOV     R6,#0FCH
0B5E 7DFF              MOV     R5,#0FFH
0B60 7CFF              MOV     R4,#0FFH
0B62 900000      R     MOV     DPTR,#pos_error_sum
0B65 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 56  

0B68 C3                CLR     C
0B69 120000      E     LCALL   ?C?SLCMP
0B6C 500E              JNC     ?C0102
                                           ; SOURCE LINE # 641
0B6E 7F18              MOV     R7,#018H
0B70 7EFC              MOV     R6,#0FCH
0B72 7DFF              MOV     R5,#0FFH
0B74 7CFF              MOV     R4,#0FFH
0B76 900000      R     MOV     DPTR,#pos_error_sum
0B79 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 642
0B7C         ?C0102:
                                           ; SOURCE LINE # 645
0B7C 7F00              MOV     R7,#00H
0B7E 7E00              MOV     R6,#00H
0B80 7D00              MOV     R5,#00H
0B82 7C00              MOV     R4,#00H
0B84 AB00        R     MOV     R3,k_p+03H
0B86 AA00        R     MOV     R2,k_p+02H
0B88 A900        R     MOV     R1,k_p+01H
0B8A A800        R     MOV     R0,k_p
0B8C C3                CLR     C
0B8D 120000      E     LCALL   ?C?SLCMP
0B90 6020              JZ      ?C0104
                                           ; SOURCE LINE # 646
0B92 AF00        R     MOV     R7,pos_error+03H
0B94 AE00        R     MOV     R6,pos_error+02H
0B96 AD00        R     MOV     R5,pos_error+01H
0B98 AC00        R     MOV     R4,pos_error
0B9A AB00        R     MOV     R3,k_p+03H
0B9C AA00        R     MOV     R2,k_p+02H
0B9E A900        R     MOV     R1,k_p+01H
0BA0 A800        R     MOV     R0,k_p
0BA2 120000      E     LCALL   ?C?LMUL
0BA5 7810              MOV     R0,#010H
0BA7 120000      E     LCALL   ?C?SLSHR
0BAA 8F00        R     MOV     pwm_input+03H,R7
0BAC 8E00        R     MOV     pwm_input+02H,R6
0BAE 8D00        R     MOV     pwm_input+01H,R5
0BB0 8C00        R     MOV     pwm_input,R4
0BB2         ?C0104:
                                           ; SOURCE LINE # 650
0BB2 7F00              MOV     R7,#00H
0BB4 7E00              MOV     R6,#00H
0BB6 7D00              MOV     R5,#00H
0BB8 7C00              MOV     R4,#00H
0BBA AB00        R     MOV     R3,k_i+03H
0BBC AA00        R     MOV     R2,k_i+02H
0BBE A900        R     MOV     R1,k_i+01H
0BC0 A800        R     MOV     R0,k_i
0BC2 C3                CLR     C
0BC3 120000      E     LCALL   ?C?SLCMP
0BC6 6033              JZ      ?C0105
                                           ; SOURCE LINE # 651
0BC8 900000      R     MOV     DPTR,#pos_error_sum
0BCB 120000      E     LCALL   ?C?LLDXDATA
0BCE AB00        R     MOV     R3,k_i+03H
0BD0 AA00        R     MOV     R2,k_i+02H
0BD2 A900        R     MOV     R1,k_i+01H
0BD4 A800        R     MOV     R0,k_i
0BD6 120000      E     LCALL   ?C?LMUL
0BD9 7806              MOV     R0,#06H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 57  

0BDB 120000      E     LCALL   ?C?SLSHR
0BDE 780A              MOV     R0,#0AH
0BE0 120000      E     LCALL   ?C?SLSHR
0BE3 E500        R     MOV     A,pwm_input+03H
0BE5 2F                ADD     A,R7
0BE6 FF                MOV     R7,A
0BE7 E500        R     MOV     A,pwm_input+02H
0BE9 3E                ADDC    A,R6
0BEA FE                MOV     R6,A
0BEB E500        R     MOV     A,pwm_input+01H
0BED 3D                ADDC    A,R5
0BEE FD                MOV     R5,A
0BEF E500        R     MOV     A,pwm_input
0BF1 3C                ADDC    A,R4
0BF2 FC                MOV     R4,A
0BF3 8F00        R     MOV     pwm_input+03H,R7
0BF5 8E00        R     MOV     pwm_input+02H,R6
0BF7 8D00        R     MOV     pwm_input+01H,R5
0BF9 8C00        R     MOV     pwm_input,R4
0BFB         ?C0105:
                                           ; SOURCE LINE # 655
0BFB 7F00              MOV     R7,#00H
0BFD 7E00              MOV     R6,#00H
0BFF 7D00              MOV     R5,#00H
0C01 7C00              MOV     R4,#00H
0C03 AB00        R     MOV     R3,k_d+03H
0C05 AA00        R     MOV     R2,k_d+02H
0C07 A900        R     MOV     R1,k_d+01H
0C09 A800        R     MOV     R0,k_d
0C0B C3                CLR     C
0C0C 120000      E     LCALL   ?C?SLCMP
0C0F 603F              JZ      ?C0106
                                           ; SOURCE LINE # 656
0C11 900000      R     MOV     DPTR,#prev_pos_err
0C14 120000      E     LCALL   ?C?LLDXDATA0
0C17 C3                CLR     C
0C18 E500        R     MOV     A,pos_error+03H
0C1A 9B                SUBB    A,R3
0C1B FF                MOV     R7,A
0C1C E500        R     MOV     A,pos_error+02H
0C1E 9A                SUBB    A,R2
0C1F FE                MOV     R6,A
0C20 E500        R     MOV     A,pos_error+01H
0C22 99                SUBB    A,R1
0C23 FD                MOV     R5,A
0C24 E500        R     MOV     A,pos_error
0C26 98                SUBB    A,R0
0C27 FC                MOV     R4,A
0C28 AB00        R     MOV     R3,k_d+03H
0C2A AA00        R     MOV     R2,k_d+02H
0C2C A900        R     MOV     R1,k_d+01H
0C2E A800        R     MOV     R0,k_d
0C30 120000      E     LCALL   ?C?LMUL
0C33 7810              MOV     R0,#010H
0C35 120000      E     LCALL   ?C?SLSHR
0C38 E500        R     MOV     A,pwm_input+03H
0C3A 2F                ADD     A,R7
0C3B FF                MOV     R7,A
0C3C E500        R     MOV     A,pwm_input+02H
0C3E 3E                ADDC    A,R6
0C3F FE                MOV     R6,A
0C40 E500        R     MOV     A,pwm_input+01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 58  

0C42 3D                ADDC    A,R5
0C43 FD                MOV     R5,A
0C44 E500        R     MOV     A,pwm_input
0C46 3C                ADDC    A,R4
0C47 FC                MOV     R4,A
0C48 8F00        R     MOV     pwm_input+03H,R7
0C4A 8E00        R     MOV     pwm_input+02H,R6
0C4C 8D00        R     MOV     pwm_input+01H,R5
0C4E 8C00        R     MOV     pwm_input,R4
0C50         ?C0106:
                                           ; SOURCE LINE # 660
0C50 AF00        R     MOV     R7,pos_error+03H
0C52 AE00        R     MOV     R6,pos_error+02H
0C54 AD00        R     MOV     R5,pos_error+01H
0C56 AC00        R     MOV     R4,pos_error
0C58 900000      R     MOV     DPTR,#prev_pos_err
0C5B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 662
0C5E 7F00              MOV     R7,#00H
0C60 7E00              MOV     R6,#00H
0C62 7D00              MOV     R5,#00H
0C64 7C00              MOV     R4,#00H
0C66 AB00        R     MOV     R3,pwm_input+03H
0C68 AA00        R     MOV     R2,pwm_input+02H
0C6A A900        R     MOV     R1,pwm_input+01H
0C6C A800        R     MOV     R0,pwm_input
0C6E D3                SETB    C
0C6F 120000      E     LCALL   ?C?SLCMP
0C72 4005              JC      ?C0107
                                           ; SOURCE LINE # 663
0C74 D200        R     SETB    motor_dir
0C76 020000      R     LJMP    ?C0078
0C79         ?C0107:
                                           ; SOURCE LINE # 665
0C79 C200        R     CLR     motor_dir
                                           ; SOURCE LINE # 667
0C7B 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 670
0C7E         ?C0109:
                                           ; SOURCE LINE # 671
0C7E 900000      E     MOV     DPTR,#g_ref+018H
0C81 E0                MOVX    A,@DPTR
0C82 FF                MOV     R7,A
0C83 EF                MOV     A,R7
0C84 7003              JNZ     $ + 5H
0C86 020000      R     LJMP    ?C0078
0C89 200003      E     JB      tension_valid,$ + 6H
0C8C 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 673
0C8F 900000      E     MOV     DPTR,#g_ref+08H
0C92 120000      E     LCALL   ?C?LLDXDATA
0C95 8F00        R     MOV     i_ref+03H,R7
0C97 8E00        R     MOV     i_ref+02H,R6
0C99 8D00        R     MOV     i_ref+01H,R5
0C9B 8C00        R     MOV     i_ref,R4
                                           ; SOURCE LINE # 675
0C9D 900000      E     MOV     DPTR,#c_mem+069H
0CA0 E0                MOVX    A,@DPTR
0CA1 FE                MOV     R6,A
0CA2 A3                INC     DPTR
0CA3 E0                MOVX    A,@DPTR
0CA4 FF                MOV     R7,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 59  

0CA5 EE                MOV     A,R6
0CA6 33                RLC     A
0CA7 95E0              SUBB    A,ACC
0CA9 FD                MOV     R5,A
0CAA FC                MOV     R4,A
0CAB AB00        R     MOV     R3,i_ref+03H
0CAD AA00        R     MOV     R2,i_ref+02H
0CAF A900        R     MOV     R1,i_ref+01H
0CB1 A800        R     MOV     R0,i_ref
0CB3 D3                SETB    C
0CB4 120000      E     LCALL   ?C?SLCMP
0CB7 4018              JC      ?C0111
                                           ; SOURCE LINE # 676
0CB9 900000      E     MOV     DPTR,#c_mem+069H
0CBC E0                MOVX    A,@DPTR
0CBD FE                MOV     R6,A
0CBE A3                INC     DPTR
0CBF E0                MOVX    A,@DPTR
0CC0 FF                MOV     R7,A
0CC1 EE                MOV     A,R6
0CC2 33                RLC     A
0CC3 95E0              SUBB    A,ACC
0CC5 FD                MOV     R5,A
0CC6 FC                MOV     R4,A
0CC7 8F00        R     MOV     i_ref+03H,R7
0CC9 8E00        R     MOV     i_ref+02H,R6
0CCB 8D00        R     MOV     i_ref+01H,R5
0CCD 8C00        R     MOV     i_ref,R4
0CCF 8040              SJMP    ?C0112
0CD1         ?C0111:
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 678
0CD1 900000      E     MOV     DPTR,#c_mem+069H
0CD4 E0                MOVX    A,@DPTR
0CD5 FE                MOV     R6,A
0CD6 A3                INC     DPTR
0CD7 E0                MOVX    A,@DPTR
0CD8 FF                MOV     R7,A
0CD9 C3                CLR     C
0CDA E4                CLR     A
0CDB 9F                SUBB    A,R7
0CDC FF                MOV     R7,A
0CDD E4                CLR     A
0CDE 9E                SUBB    A,R6
0CDF FE                MOV     R6,A
0CE0 EE                MOV     A,R6
0CE1 33                RLC     A
0CE2 95E0              SUBB    A,ACC
0CE4 FD                MOV     R5,A
0CE5 FC                MOV     R4,A
0CE6 AB00        R     MOV     R3,i_ref+03H
0CE8 AA00        R     MOV     R2,i_ref+02H
0CEA A900        R     MOV     R1,i_ref+01H
0CEC A800        R     MOV     R0,i_ref
0CEE C3                CLR     C
0CEF 120000      E     LCALL   ?C?SLCMP
0CF2 501D              JNC     ?C0112
                                           ; SOURCE LINE # 679
0CF4 900000      E     MOV     DPTR,#c_mem+069H
0CF7 E0                MOVX    A,@DPTR
0CF8 FE                MOV     R6,A
0CF9 A3                INC     DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 60  

0CFA E0                MOVX    A,@DPTR
0CFB FF                MOV     R7,A
0CFC C3                CLR     C
0CFD E4                CLR     A
0CFE 9F                SUBB    A,R7
0CFF FF                MOV     R7,A
0D00 E4                CLR     A
0D01 9E                SUBB    A,R6
0D02 FE                MOV     R6,A
0D03 EE                MOV     A,R6
0D04 33                RLC     A
0D05 95E0              SUBB    A,ACC
0D07 FD                MOV     R5,A
0D08 FC                MOV     R4,A
0D09 8F00        R     MOV     i_ref+03H,R7
0D0B 8E00        R     MOV     i_ref+02H,R6
0D0D 8D00        R     MOV     i_ref+01H,R5
0D0F 8C00        R     MOV     i_ref,R4
                                           ; SOURCE LINE # 680
0D11         ?C0112:
                                           ; SOURCE LINE # 683
0D11 900000      E     MOV     DPTR,#g_meas+0CH
0D14 120000      E     LCALL   ?C?LLDXDATA0
0D17 C3                CLR     C
0D18 E500        R     MOV     A,i_ref+03H
0D1A 9B                SUBB    A,R3
0D1B FF                MOV     R7,A
0D1C E500        R     MOV     A,i_ref+02H
0D1E 9A                SUBB    A,R2
0D1F FE                MOV     R6,A
0D20 E500        R     MOV     A,i_ref+01H
0D22 99                SUBB    A,R1
0D23 FD                MOV     R5,A
0D24 E500        R     MOV     A,i_ref
0D26 98                SUBB    A,R0
0D27 FC                MOV     R4,A
0D28 8F00        R     MOV     curr_error+03H,R7
0D2A 8E00        R     MOV     curr_error+02H,R6
0D2C 8D00        R     MOV     curr_error+01H,R5
0D2E 8C00        R     MOV     curr_error,R4
                                           ; SOURCE LINE # 684
0D30 900000      R     MOV     DPTR,#curr_error_sum
0D33 120000      E     LCALL   ?C?LLDXDATA
0D36 EF                MOV     A,R7
0D37 2500        R     ADD     A,curr_error+03H
0D39 FF                MOV     R7,A
0D3A EE                MOV     A,R6
0D3B 3500        R     ADDC    A,curr_error+02H
0D3D FE                MOV     R6,A
0D3E ED                MOV     A,R5
0D3F 3500        R     ADDC    A,curr_error+01H
0D41 FD                MOV     R5,A
0D42 EC                MOV     A,R4
0D43 3500        R     ADDC    A,curr_error
0D45 FC                MOV     R4,A
0D46 900000      R     MOV     DPTR,#curr_error_sum
0D49 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 686
0D4C 7FA0              MOV     R7,#0A0H
0D4E 7E86              MOV     R6,#086H
0D50 7D01              MOV     R5,#01H
0D52 7C00              MOV     R4,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 61  

0D54 900000      R     MOV     DPTR,#curr_error_sum
0D57 120000      E     LCALL   ?C?LLDXDATA0
0D5A D3                SETB    C
0D5B 120000      E     LCALL   ?C?SLCMP
0D5E 4010              JC      ?C0114
                                           ; SOURCE LINE # 687
0D60 7FA0              MOV     R7,#0A0H
0D62 7E86              MOV     R6,#086H
0D64 7D01              MOV     R5,#01H
0D66 7C00              MOV     R4,#00H
0D68 900000      R     MOV     DPTR,#curr_error_sum
0D6B 120000      E     LCALL   ?C?LSTXDATA
0D6E 8022              SJMP    ?C0115
0D70         ?C0114:
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
0D70 7F60              MOV     R7,#060H
0D72 7E79              MOV     R6,#079H
0D74 7DFE              MOV     R5,#0FEH
0D76 7CFF              MOV     R4,#0FFH
0D78 900000      R     MOV     DPTR,#curr_error_sum
0D7B 120000      E     LCALL   ?C?LLDXDATA0
0D7E C3                CLR     C
0D7F 120000      E     LCALL   ?C?SLCMP
0D82 500E              JNC     ?C0115
                                           ; SOURCE LINE # 690
0D84 7F60              MOV     R7,#060H
0D86 7E79              MOV     R6,#079H
0D88 7DFE              MOV     R5,#0FEH
0D8A 7CFF              MOV     R4,#0FFH
0D8C 900000      R     MOV     DPTR,#curr_error_sum
0D8F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 691
0D92         ?C0115:
                                           ; SOURCE LINE # 693
0D92 7F00              MOV     R7,#00H
0D94 7E00              MOV     R6,#00H
0D96 7D00              MOV     R5,#00H
0D98 7C00              MOV     R4,#00H
0D9A 8F00        R     MOV     pwm_input+03H,R7
0D9C 8E00        R     MOV     pwm_input+02H,R6
0D9E 8D00        R     MOV     pwm_input+01H,R5
0DA0 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 696
0DA2 7F00              MOV     R7,#00H
0DA4 7E00              MOV     R6,#00H
0DA6 7D00              MOV     R5,#00H
0DA8 7C00              MOV     R4,#00H
0DAA AB00        R     MOV     R3,k_p_c+03H
0DAC AA00        R     MOV     R2,k_p_c+02H
0DAE A900        R     MOV     R1,k_p_c+01H
0DB0 A800        R     MOV     R0,k_p_c
0DB2 C3                CLR     C
0DB3 120000      E     LCALL   ?C?SLCMP
0DB6 6030              JZ      ?C0117
                                           ; SOURCE LINE # 697
0DB8 AF00        R     MOV     R7,curr_error+03H
0DBA AE00        R     MOV     R6,curr_error+02H
0DBC AD00        R     MOV     R5,curr_error+01H
0DBE AC00        R     MOV     R4,curr_error
0DC0 AB00        R     MOV     R3,k_p_c+03H
0DC2 AA00        R     MOV     R2,k_p_c+02H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 62  

0DC4 A900        R     MOV     R1,k_p_c+01H
0DC6 A800        R     MOV     R0,k_p_c
0DC8 120000      E     LCALL   ?C?LMUL
0DCB 7810              MOV     R0,#010H
0DCD 120000      E     LCALL   ?C?SLSHR
0DD0 E500        R     MOV     A,pwm_input+03H
0DD2 2F                ADD     A,R7
0DD3 FF                MOV     R7,A
0DD4 E500        R     MOV     A,pwm_input+02H
0DD6 3E                ADDC    A,R6
0DD7 FE                MOV     R6,A
0DD8 E500        R     MOV     A,pwm_input+01H
0DDA 3D                ADDC    A,R5
0DDB FD                MOV     R5,A
0DDC E500        R     MOV     A,pwm_input
0DDE 3C                ADDC    A,R4
0DDF FC                MOV     R4,A
0DE0 8F00        R     MOV     pwm_input+03H,R7
0DE2 8E00        R     MOV     pwm_input+02H,R6
0DE4 8D00        R     MOV     pwm_input+01H,R5
0DE6 8C00        R     MOV     pwm_input,R4
0DE8         ?C0117:
                                           ; SOURCE LINE # 700
0DE8 7F00              MOV     R7,#00H
0DEA 7E00              MOV     R6,#00H
0DEC 7D00              MOV     R5,#00H
0DEE 7C00              MOV     R4,#00H
0DF0 AB00        R     MOV     R3,k_i_c+03H
0DF2 AA00        R     MOV     R2,k_i_c+02H
0DF4 A900        R     MOV     R1,k_i_c+01H
0DF6 A800        R     MOV     R0,k_i_c
0DF8 C3                CLR     C
0DF9 120000      E     LCALL   ?C?SLCMP
0DFC 6033              JZ      ?C0118
                                           ; SOURCE LINE # 701
0DFE 900000      R     MOV     DPTR,#curr_error_sum
0E01 120000      E     LCALL   ?C?LLDXDATA
0E04 7806              MOV     R0,#06H
0E06 120000      E     LCALL   ?C?SLSHR
0E09 AB00        R     MOV     R3,k_i_c+03H
0E0B AA00        R     MOV     R2,k_i_c+02H
0E0D A900        R     MOV     R1,k_i_c+01H
0E0F A800        R     MOV     R0,k_i_c
0E11 120000      E     LCALL   ?C?LMUL
0E14 780A              MOV     R0,#0AH
0E16 120000      E     LCALL   ?C?SLSHR
0E19 E500        R     MOV     A,pwm_input+03H
0E1B 2F                ADD     A,R7
0E1C FF                MOV     R7,A
0E1D E500        R     MOV     A,pwm_input+02H
0E1F 3E                ADDC    A,R6
0E20 FE                MOV     R6,A
0E21 E500        R     MOV     A,pwm_input+01H
0E23 3D                ADDC    A,R5
0E24 FD                MOV     R5,A
0E25 E500        R     MOV     A,pwm_input
0E27 3C                ADDC    A,R4
0E28 FC                MOV     R4,A
0E29 8F00        R     MOV     pwm_input+03H,R7
0E2B 8E00        R     MOV     pwm_input+02H,R6
0E2D 8D00        R     MOV     pwm_input+01H,R5
0E2F 8C00        R     MOV     pwm_input,R4
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 63  

0E31         ?C0118:
                                           ; SOURCE LINE # 704
0E31 7F00              MOV     R7,#00H
0E33 7E00              MOV     R6,#00H
0E35 7D00              MOV     R5,#00H
0E37 7C00              MOV     R4,#00H
0E39 AB00        R     MOV     R3,k_d_c+03H
0E3B AA00        R     MOV     R2,k_d_c+02H
0E3D A900        R     MOV     R1,k_d_c+01H
0E3F A800        R     MOV     R0,k_d_c
0E41 C3                CLR     C
0E42 120000      E     LCALL   ?C?SLCMP
0E45 603F              JZ      ?C0119
                                           ; SOURCE LINE # 705
0E47 900000      R     MOV     DPTR,#prev_curr_err
0E4A 120000      E     LCALL   ?C?LLDXDATA0
0E4D C3                CLR     C
0E4E E500        R     MOV     A,curr_error+03H
0E50 9B                SUBB    A,R3
0E51 FF                MOV     R7,A
0E52 E500        R     MOV     A,curr_error+02H
0E54 9A                SUBB    A,R2
0E55 FE                MOV     R6,A
0E56 E500        R     MOV     A,curr_error+01H
0E58 99                SUBB    A,R1
0E59 FD                MOV     R5,A
0E5A E500        R     MOV     A,curr_error
0E5C 98                SUBB    A,R0
0E5D FC                MOV     R4,A
0E5E AB00        R     MOV     R3,k_d_c+03H
0E60 AA00        R     MOV     R2,k_d_c+02H
0E62 A900        R     MOV     R1,k_d_c+01H
0E64 A800        R     MOV     R0,k_d_c
0E66 120000      E     LCALL   ?C?LMUL
0E69 7810              MOV     R0,#010H
0E6B 120000      E     LCALL   ?C?SLSHR
0E6E E500        R     MOV     A,pwm_input+03H
0E70 2F                ADD     A,R7
0E71 FF                MOV     R7,A
0E72 E500        R     MOV     A,pwm_input+02H
0E74 3E                ADDC    A,R6
0E75 FE                MOV     R6,A
0E76 E500        R     MOV     A,pwm_input+01H
0E78 3D                ADDC    A,R5
0E79 FD                MOV     R5,A
0E7A E500        R     MOV     A,pwm_input
0E7C 3C                ADDC    A,R4
0E7D FC                MOV     R4,A
0E7E 8F00        R     MOV     pwm_input+03H,R7
0E80 8E00        R     MOV     pwm_input+02H,R6
0E82 8D00        R     MOV     pwm_input+01H,R5
0E84 8C00        R     MOV     pwm_input,R4
0E86         ?C0119:
                                           ; SOURCE LINE # 707
0E86 AF00        R     MOV     R7,curr_error+03H
0E88 AE00        R     MOV     R6,curr_error+02H
0E8A AD00        R     MOV     R5,curr_error+01H
0E8C AC00        R     MOV     R4,curr_error
0E8E 900000      R     MOV     DPTR,#prev_curr_err
0E91 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 709
0E94 7F00              MOV     R7,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 64  

0E96 7E00              MOV     R6,#00H
0E98 7D00              MOV     R5,#00H
0E9A 7C00              MOV     R4,#00H
0E9C AB00        R     MOV     R3,pwm_input+03H
0E9E AA00        R     MOV     R2,pwm_input+02H
0EA0 A900        R     MOV     R1,pwm_input+01H
0EA2 A800        R     MOV     R0,pwm_input
0EA4 C3                CLR     C
0EA5 120000      E     LCALL   ?C?SLCMP
0EA8 4004              JC      ?C0120
                                           ; SOURCE LINE # 710
0EAA D200        R     SETB    motor_dir
0EAC 807C              SJMP    ?C0078
0EAE         ?C0120:
                                           ; SOURCE LINE # 712
0EAE C200        R     CLR     motor_dir
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 714
0EB0 8078              SJMP    ?C0078
                                           ; SOURCE LINE # 717
0EB2         ?C0122:
                                           ; SOURCE LINE # 719
0EB2 900000      E     MOV     DPTR,#g_ref+010H
0EB5 120000      E     LCALL   ?C?LLDXDATA
0EB8 8F00        R     MOV     pwm_input+03H,R7
0EBA 8E00        R     MOV     pwm_input+02H,R6
0EBC 8D00        R     MOV     pwm_input+01H,R5
0EBE 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 721
0EC0 7F00              MOV     R7,#00H
0EC2 7E00              MOV     R6,#00H
0EC4 7D00              MOV     R5,#00H
0EC6 7C00              MOV     R4,#00H
0EC8 AB00        R     MOV     R3,pwm_input+03H
0ECA AA00        R     MOV     R2,pwm_input+02H
0ECC A900        R     MOV     R1,pwm_input+01H
0ECE A800        R     MOV     R0,pwm_input
0ED0 D3                SETB    C
0ED1 120000      E     LCALL   ?C?SLCMP
0ED4 4004              JC      ?C0123
                                           ; SOURCE LINE # 722
0ED6 D200        R     SETB    motor_dir
0ED8 8002              SJMP    ?C0124
0EDA         ?C0123:
                                           ; SOURCE LINE # 724
0EDA C200        R     CLR     motor_dir
0EDC         ?C0124:
                                           ; SOURCE LINE # 728
0EDC 7F00              MOV     R7,#00H
0EDE 7E00              MOV     R6,#00H
0EE0 7D00              MOV     R5,#00H
0EE2 7C00              MOV     R4,#00H
0EE4 AB00        R     MOV     R3,pwm_input+03H
0EE6 AA00        R     MOV     R2,pwm_input+02H
0EE8 A900        R     MOV     R1,pwm_input+01H
0EEA A800        R     MOV     R0,pwm_input
0EEC C3                CLR     C
0EED 120000      E     LCALL   ?C?SLCMP
0EF0 5012              JNC     ?C0125
                                           ; SOURCE LINE # 729
0EF2 7F00              MOV     R7,#00H
0EF4 7E00              MOV     R6,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 65  

0EF6 7D00              MOV     R5,#00H
0EF8 7C00              MOV     R4,#00H
0EFA 8F00        R     MOV     pwm_input+03H,R7
0EFC 8E00        R     MOV     pwm_input+02H,R6
0EFE 8D00        R     MOV     pwm_input+01H,R5
0F00 8C00        R     MOV     pwm_input,R4
0F02 8026              SJMP    ?C0078
0F04         ?C0125:
                                           ; SOURCE LINE # 730
0F04 7F64              MOV     R7,#064H
0F06 7E00              MOV     R6,#00H
0F08 7D00              MOV     R5,#00H
0F0A 7C00              MOV     R4,#00H
0F0C AB00        R     MOV     R3,pwm_input+03H
0F0E AA00        R     MOV     R2,pwm_input+02H
0F10 A900        R     MOV     R1,pwm_input+01H
0F12 A800        R     MOV     R0,pwm_input
0F14 D3                SETB    C
0F15 120000      E     LCALL   ?C?SLCMP
0F18 4010              JC      ?C0078
                                           ; SOURCE LINE # 731
0F1A 7F64              MOV     R7,#064H
0F1C 7E00              MOV     R6,#00H
0F1E 7D00              MOV     R5,#00H
0F20 7C00              MOV     R4,#00H
0F22 8F00        R     MOV     pwm_input+03H,R7
0F24 8E00        R     MOV     pwm_input+02H,R6
0F26 8D00        R     MOV     pwm_input+01H,R5
0F28 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
0F2A         ?C0078:
                                           ; SOURCE LINE # 739
0F2A 7F64              MOV     R7,#064H
0F2C 7E00              MOV     R6,#00H
0F2E 7D00              MOV     R5,#00H
0F30 7C00              MOV     R4,#00H
0F32 AB00        R     MOV     R3,pwm_input+03H
0F34 AA00        R     MOV     R2,pwm_input+02H
0F36 A900        R     MOV     R1,pwm_input+01H
0F38 A800        R     MOV     R0,pwm_input
0F3A D3                SETB    C
0F3B 120000      E     LCALL   ?C?SLCMP
0F3E 4010              JC      ?C0128
                                           ; SOURCE LINE # 740
0F40 7F64              MOV     R7,#064H
0F42 7E00              MOV     R6,#00H
0F44 7D00              MOV     R5,#00H
0F46 7C00              MOV     R4,#00H
0F48 8F00        R     MOV     pwm_input+03H,R7
0F4A 8E00        R     MOV     pwm_input+02H,R6
0F4C 8D00        R     MOV     pwm_input+01H,R5
0F4E 8C00        R     MOV     pwm_input,R4
0F50         ?C0128:
                                           ; SOURCE LINE # 741
0F50 7F9C              MOV     R7,#09CH
0F52 7EFF              MOV     R6,#0FFH
0F54 7DFF              MOV     R5,#0FFH
0F56 7CFF              MOV     R4,#0FFH
0F58 AB00        R     MOV     R3,pwm_input+03H
0F5A AA00        R     MOV     R2,pwm_input+02H
0F5C A900        R     MOV     R1,pwm_input+01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 66  

0F5E A800        R     MOV     R0,pwm_input
0F60 C3                CLR     C
0F61 120000      E     LCALL   ?C?SLCMP
0F64 5010              JNC     ?C0129
                                           ; SOURCE LINE # 742
0F66 7F9C              MOV     R7,#09CH
0F68 7EFF              MOV     R6,#0FFH
0F6A 7DFF              MOV     R5,#0FFH
0F6C 7CFF              MOV     R4,#0FFH
0F6E 8F00        R     MOV     pwm_input+03H,R7
0F70 8E00        R     MOV     pwm_input+02H,R6
0F72 8D00        R     MOV     pwm_input+01H,R5
0F74 8C00        R     MOV     pwm_input,R4
0F76         ?C0129:
                                           ; SOURCE LINE # 745
0F76 900000      E     MOV     DPTR,#c_mem+034H
0F79 E0                MOVX    A,@DPTR
0F7A FF                MOV     R7,A
0F7B EF                MOV     A,R7
0F7C 6401              XRL     A,#01H
0F7E 6039              JZ      ?C0130
                                           ; SOURCE LINE # 746
0F80 AF00        R     MOV     R7,pwm_input+03H
0F82 AE00        R     MOV     R6,pwm_input+02H
0F84 AD00        R     MOV     R5,pwm_input+01H
0F86 AC00        R     MOV     R4,pwm_input
0F88 780A              MOV     R0,#0AH
0F8A 120000      E     LCALL   ?C?LSHL
0F8D 7B64              MOV     R3,#064H
0F8F 7A00              MOV     R2,#00H
0F91 7900              MOV     R1,#00H
0F93 7800              MOV     R0,#00H
0F95 120000      E     LCALL   ?C?SLDIV
0F98 A804              MOV     R0,AR4
0F9A A905              MOV     R1,AR5
0F9C AA06              MOV     R2,AR6
0F9E AB07              MOV     R3,AR7
0FA0 900000      E     MOV     DPTR,#dev_pwm_limit
0FA3 E0                MOVX    A,@DPTR
0FA4 FF                MOV     R7,A
0FA5 E4                CLR     A
0FA6 FC                MOV     R4,A
0FA7 FD                MOV     R5,A
0FA8 FE                MOV     R6,A
0FA9 120000      E     LCALL   ?C?LMUL
0FAC 780A              MOV     R0,#0AH
0FAE 120000      E     LCALL   ?C?SLSHR
0FB1 8F00        R     MOV     pwm_input+03H,R7
0FB3 8E00        R     MOV     pwm_input+02H,R6
0FB5 8D00        R     MOV     pwm_input+01H,R5
0FB7 8C00        R     MOV     pwm_input,R4
0FB9         ?C0130:
                                           ; SOURCE LINE # 749
0FB9 7F00              MOV     R7,#00H
0FBB 7E00              MOV     R6,#00H
0FBD 7D00              MOV     R5,#00H
0FBF 7C00              MOV     R4,#00H
0FC1 AB00        R     MOV     R3,pwm_input+03H
0FC3 AA00        R     MOV     R2,pwm_input+02H
0FC5 A900        R     MOV     R1,pwm_input+01H
0FC7 A800        R     MOV     R0,pwm_input
0FC9 C3                CLR     C
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 67  

0FCA 120000      E     LCALL   ?C?SLCMP
0FCD 4004              JC      ?C0131
0FCF 7F01              MOV     R7,#01H
0FD1 8002              SJMP    ?C0132
0FD3         ?C0131:
0FD3 7FFF              MOV     R7,#0FFH
0FD5         ?C0132:
0FD5 900000      E     MOV     DPTR,#pwm_sign
0FD8 EF                MOV     A,R7
0FD9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 751
0FDA 300007            JNB     motor_dir,?C0133
                                           ; SOURCE LINE # 752
0FDD 7F01              MOV     R7,#01H
0FDF 120000      E     LCALL   _MOTOR_DIR_Write
0FE2 8005              SJMP    ?C0134
0FE4         ?C0133:
                                           ; SOURCE LINE # 754
0FE4 7F00              MOV     R7,#00H
0FE6 120000      E     LCALL   _MOTOR_DIR_Write
0FE9         ?C0134:
                                           ; SOURCE LINE # 756
0FE9 AE00        R     MOV     R6,pwm_input+02H
0FEB AF00        R     MOV     R7,pwm_input+03H
0FED 120000      E     LCALL   _abs
0FF0 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 757
0FF3 22                RET     
             ; FUNCTION motor_control (END)

             ; FUNCTION _encoder_reading (BEGIN)
                                           ; SOURCE LINE # 763
0000 900000      R     MOV     DPTR,#idx
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
0005 900000      R     MOV     DPTR,#idx
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 786
000C E500        R     MOV     A,index
000E C3                CLR     C
000F 9403              SUBB    A,#03H
0011 4003              JC      $ + 5H
0013 020000      R     LJMP    ?C0137
0016         ?C0136:
                                           ; SOURCE LINE # 789
0016 300032            JNB     reset_last_value_flag,?C0138
                                           ; SOURCE LINE # 790
0019 900000      R     MOV     DPTR,#jj
001C 7403              MOV     A,#03H
001E F0                MOVX    @DPTR,A
001F         ?C0139:
001F 900000      R     MOV     DPTR,#jj
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 14                DEC     A
0025 F0                MOVX    @DPTR,A
0026 EF                MOV     A,R7
0027 6020              JZ      ?C0140
                                           ; SOURCE LINE # 791
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 68  

0029 7F00              MOV     R7,#00H
002B 7E00              MOV     R6,#00H
002D 7D00              MOV     R5,#00H
002F 7C00              MOV     R4,#00H
0031 900000      R     MOV     DPTR,#jj
0034 E0                MOVX    A,@DPTR
0035 FB                MOV     R3,A
0036 EB                MOV     A,R3
0037 25E0              ADD     A,ACC
0039 25E0              ADD     A,ACC
003B 2400        R     ADD     A,#LOW last_value_encoder
003D F582              MOV     DPL,A
003F E4                CLR     A
0040 3400        R     ADDC    A,#HIGH last_value_encoder
0042 F583              MOV     DPH,A
0044 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 792
0047 80D6              SJMP    ?C0139
0049         ?C0140:
                                           ; SOURCE LINE # 793
0049 C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 794
004B         ?C0138:
                                           ; SOURCE LINE # 798
004B E500        R     MOV     A,index
004D 7020              JNZ     ?C0141
                                           ; SOURCE LINE # 799
004F 120000      E     LCALL   SHIFTREG_ENC_1_ReadData
0052 7801              MOV     R0,#01H
0054 120000      E     LCALL   ?C?ULSHR
0057 EF                MOV     A,R7
0058 54FF              ANL     A,#0FFH
005A FF                MOV     R7,A
005B EE                MOV     A,R6
005C 54FF              ANL     A,#0FFH
005E FE                MOV     R6,A
005F ED                MOV     A,R5
0060 5403              ANL     A,#03H
0062 FD                MOV     R5,A
0063 EC                MOV     A,R4
0064 5400              ANL     A,#00H
0066 FC                MOV     R4,A
0067 900000      R     MOV     DPTR,#data_encoder
006A 120000      E     LCALL   ?C?LSTXDATA
006D 8043              SJMP    ?C0142
006F         ?C0141:
                                           ; SOURCE LINE # 800
                                           ; SOURCE LINE # 801
006F E500        R     MOV     A,index
0071 B40120            CJNE    A,#01H,?C0143
                                           ; SOURCE LINE # 802
0074 120000      E     LCALL   SHIFTREG_ENC_2_ReadData
0077 7801              MOV     R0,#01H
0079 120000      E     LCALL   ?C?ULSHR
007C EF                MOV     A,R7
007D 54FF              ANL     A,#0FFH
007F FF                MOV     R7,A
0080 EE                MOV     A,R6
0081 54FF              ANL     A,#0FFH
0083 FE                MOV     R6,A
0084 ED                MOV     A,R5
0085 5403              ANL     A,#03H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 69  

0087 FD                MOV     R5,A
0088 EC                MOV     A,R4
0089 5400              ANL     A,#00H
008B FC                MOV     R4,A
008C 900000      R     MOV     DPTR,#data_encoder
008F 120000      E     LCALL   ?C?LSTXDATA
0092 801E              SJMP    ?C0142
0094         ?C0143:
                                           ; SOURCE LINE # 804
0094 120000      E     LCALL   SHIFTREG_ENC_3_ReadData
0097 7801              MOV     R0,#01H
0099 120000      E     LCALL   ?C?ULSHR
009C EF                MOV     A,R7
009D 54FF              ANL     A,#0FFH
009F FF                MOV     R7,A
00A0 EE                MOV     A,R6
00A1 54FF              ANL     A,#0FFH
00A3 FE                MOV     R6,A
00A4 ED                MOV     A,R5
00A5 5403              ANL     A,#03H
00A7 FD                MOV     R5,A
00A8 EC                MOV     A,R4
00A9 5400              ANL     A,#00H
00AB FC                MOV     R4,A
00AC 900000      R     MOV     DPTR,#data_encoder
00AF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 805
00B2         ?C0142:
                                           ; SOURCE LINE # 808
00B2 7B01              MOV     R3,#01H
00B4 7A00        R     MOV     R2,#HIGH data_encoder
00B6 7900        R     MOV     R1,#LOW data_encoder
00B8 120000      E     LCALL   _check_enc_data
00BB 4003              JC      $ + 5H
00BD 020000      R     LJMP    ?C0145
                                           ; SOURCE LINE # 810
00C0 900000      R     MOV     DPTR,#data_encoder
00C3 120000      E     LCALL   ?C?LLDXDATA
00C6 EF                MOV     A,R7
00C7 54C0              ANL     A,#0C0H
00C9 FF                MOV     R7,A
00CA EE                MOV     A,R6
00CB 54FF              ANL     A,#0FFH
00CD FE                MOV     R6,A
00CE ED                MOV     A,R5
00CF 5403              ANL     A,#03H
00D1 FD                MOV     R5,A
00D2 EC                MOV     A,R4
00D3 5400              ANL     A,#00H
00D5 FC                MOV     R4,A
00D6 EF                MOV     A,R7
00D7 2400              ADD     A,#00H
00D9 FF                MOV     R7,A
00DA EE                MOV     A,R6
00DB 3400              ADDC    A,#00H
00DD FE                MOV     R6,A
00DE ED                MOV     A,R5
00DF 34FE              ADDC    A,#0FEH
00E1 FD                MOV     R5,A
00E2 EC                MOV     A,R4
00E3 34FF              ADDC    A,#0FFH
00E5 FC                MOV     R4,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 70  

00E6 C004              PUSH    AR4
00E8 C005              PUSH    AR5
00EA C006              PUSH    AR6
00EC C007              PUSH    AR7
00EE AF00        R     MOV     R7,index
00F0 EF                MOV     A,R7
00F1 25E0              ADD     A,ACC
00F3 25E0              ADD     A,ACC
00F5 2400        E     ADD     A,#LOW g_mem+038H
00F7 F582              MOV     DPL,A
00F9 E4                CLR     A
00FA 3400        E     ADDC    A,#HIGH g_mem+038H
00FC F583              MOV     DPH,A
00FE 120000      E     LCALL   ?C?LLDXDATA
0101 EF                MOV     A,R7
0102 2402              ADD     A,#02H
0104 F9                MOV     R1,A
0105 D007              POP     AR7
0107 D006              POP     AR6
0109 D005              POP     AR5
010B D004              POP     AR4
010D A801              MOV     R0,AR1
010F 120000      E     LCALL   ?C?ULSHR
0112 EE                MOV     A,R6
0113 33                RLC     A
0114 95E0              SUBB    A,ACC
0116 FD                MOV     R5,A
0117 FC                MOV     R4,A
0118 900000      R     MOV     DPTR,#value_encoder
011B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 817
011E 300020            JNB     only_first_time,?C0146
                                           ; SOURCE LINE # 818
0121 900000      R     MOV     DPTR,#value_encoder
0124 120000      E     LCALL   ?C?LLDXDATA
0127 AB00        R     MOV     R3,index
0129 EB                MOV     A,R3
012A 25E0              ADD     A,ACC
012C 25E0              ADD     A,ACC
012E 2400        R     ADD     A,#LOW last_value_encoder
0130 F582              MOV     DPL,A
0132 E4                CLR     A
0133 3400        R     ADDC    A,#HIGH last_value_encoder
0135 F583              MOV     DPH,A
0137 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 819
013A E500        R     MOV     A,index
013C B40202            CJNE    A,#02H,?C0146
                                           ; SOURCE LINE # 820
013F C200        R     CLR     only_first_time
                                           ; SOURCE LINE # 821
0141         ?C0146:
                                           ; SOURCE LINE # 824
0141 AF00        R     MOV     R7,index
0143 EF                MOV     A,R7
0144 25E0              ADD     A,ACC
0146 25E0              ADD     A,ACC
0148 2400        R     ADD     A,#LOW last_value_encoder
014A F582              MOV     DPL,A
014C E4                CLR     A
014D 3400        R     ADDC    A,#HIGH last_value_encoder
014F F583              MOV     DPH,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 71  

0151 120000      E     LCALL   ?C?LLDXDATA0
0154 900000      R     MOV     DPTR,#value_encoder
0157 120000      E     LCALL   ?C?LLDXDATA
015A 120000      E     LCALL   ?C?LSUB
015D 900000      R     MOV     DPTR,#aux
0160 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 844
0163 7F00              MOV     R7,#00H
0165 7EC0              MOV     R6,#0C0H
0167 7D00              MOV     R5,#00H
0169 7C00              MOV     R4,#00H
016B 900000      R     MOV     DPTR,#aux
016E 120000      E     LCALL   ?C?LLDXDATA0
0171 D3                SETB    C
0172 120000      E     LCALL   ?C?SLCMP
0175 4011              JC      ?C0148
                                           ; SOURCE LINE # 845
0177 AF00        R     MOV     R7,index
0179 7400        E     MOV     A,#LOW g_meas+014H
017B 2F                ADD     A,R7
017C F582              MOV     DPL,A
017E E4                CLR     A
017F 3400        E     ADDC    A,#HIGH g_meas+014H
0181 F583              MOV     DPH,A
0183 E0                MOVX    A,@DPTR
0184 14                DEC     A
0185 F0                MOVX    @DPTR,A
0186 805F              SJMP    ?C0149
0188         ?C0148:
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
0188 7F00              MOV     R7,#00H
018A 7E40              MOV     R6,#040H
018C 7DFF              MOV     R5,#0FFH
018E 7CFF              MOV     R4,#0FFH
0190 900000      R     MOV     DPTR,#aux
0193 120000      E     LCALL   ?C?LLDXDATA0
0196 C3                CLR     C
0197 120000      E     LCALL   ?C?SLCMP
019A 5011              JNC     ?C0150
                                           ; SOURCE LINE # 848
019C AF00        R     MOV     R7,index
019E 7400        E     MOV     A,#LOW g_meas+014H
01A0 2F                ADD     A,R7
01A1 F582              MOV     DPL,A
01A3 E4                CLR     A
01A4 3400        E     ADDC    A,#HIGH g_meas+014H
01A6 F583              MOV     DPH,A
01A8 E0                MOVX    A,@DPTR
01A9 04                INC     A
01AA F0                MOVX    @DPTR,A
01AB 803A              SJMP    ?C0149
01AD         ?C0150:
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
01AD 900000      R     MOV     DPTR,#aux
01B0 120000      E     LCALL   ?C?LLDXDATA
01B3 120000      E     LCALL   _abs
01B6 D3                SETB    C
01B7 EF                MOV     A,R7
01B8 9400              SUBB    A,#00H
01BA EE                MOV     A,R6
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 72  

01BB 6480              XRL     A,#080H
01BD 94C0              SUBB    A,#0C0H
01BF 4026              JC      ?C0149
                                           ; SOURCE LINE # 851
01C1 AF00        R     MOV     R7,index
01C3 7400        R     MOV     A,#LOW error
01C5 2F                ADD     A,R7
01C6 F582              MOV     DPL,A
01C8 E4                CLR     A
01C9 3400        R     ADDC    A,#HIGH error
01CB F583              MOV     DPH,A
01CD E0                MOVX    A,@DPTR
01CE 04                INC     A
01CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 852
01D0 AF00        R     MOV     R7,index
01D2 7400        R     MOV     A,#LOW error
01D4 2F                ADD     A,R7
01D5 F582              MOV     DPL,A
01D7 E4                CLR     A
01D8 3400        R     ADDC    A,#HIGH error
01DA F583              MOV     DPH,A
01DC E0                MOVX    A,@DPTR
01DD FF                MOV     R7,A
01DE EF                MOV     A,R7
01DF C3                CLR     C
01E0 940A              SUBB    A,#0AH
01E2 5003              JNC     $ + 5H
01E4 020000      R     LJMP    ?C0137
01E7         ?C0153:
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 857
01E7         ?C0149:
                                           ; SOURCE LINE # 859
01E7 AF00        R     MOV     R7,index
01E9 7400        R     MOV     A,#LOW error
01EB 2F                ADD     A,R7
01EC F582              MOV     DPL,A
01EE E4                CLR     A
01EF 3400        R     ADDC    A,#HIGH error
01F1 F583              MOV     DPH,A
01F3 E4                CLR     A
01F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 861
01F5 900000      R     MOV     DPTR,#value_encoder
01F8 120000      E     LCALL   ?C?LLDXDATA
01FB AB00        R     MOV     R3,index
01FD EB                MOV     A,R3
01FE 25E0              ADD     A,ACC
0200 25E0              ADD     A,ACC
0202 2400        R     ADD     A,#LOW last_value_encoder
0204 F582              MOV     DPL,A
0206 E4                CLR     A
0207 3400        R     ADDC    A,#HIGH last_value_encoder
0209 F583              MOV     DPH,A
020B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 863
020E 900000      R     MOV     DPTR,#value_encoder
0211 120000      E     LCALL   ?C?LLDXDATA
0214 C004              PUSH    AR4
0216 C005              PUSH    AR5
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 73  

0218 C006              PUSH    AR6
021A C007              PUSH    AR7
021C AF00        R     MOV     R7,index
021E 7400        E     MOV     A,#LOW g_meas+014H
0220 2F                ADD     A,R7
0221 F582              MOV     DPL,A
0223 E4                CLR     A
0224 3400        E     ADDC    A,#HIGH g_meas+014H
0226 F583              MOV     DPH,A
0228 E0                MOVX    A,@DPTR
0229 FF                MOV     R7,A
022A EF                MOV     A,R7
022B 33                RLC     A
022C 95E0              SUBB    A,ACC
022E FE                MOV     R6,A
022F FD                MOV     R5,A
0230 FC                MOV     R4,A
0231 7810              MOV     R0,#010H
0233 120000      E     LCALL   ?C?LSHL
0236 A804              MOV     R0,AR4
0238 A905              MOV     R1,AR5
023A AA06              MOV     R2,AR6
023C AB07              MOV     R3,AR7
023E D007              POP     AR7
0240 D006              POP     AR6
0242 D005              POP     AR5
0244 D004              POP     AR4
0246 120000      E     LCALL   ?C?LADD
0249 900000      R     MOV     DPTR,#value_encoder
024C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 865
024F AF00        R     MOV     R7,index
0251 EF                MOV     A,R7
0252 25E0              ADD     A,ACC
0254 25E0              ADD     A,ACC
0256 2400        E     ADD     A,#LOW c_mem+044H
0258 F582              MOV     DPL,A
025A E4                CLR     A
025B 3400        E     ADDC    A,#HIGH c_mem+044H
025D F583              MOV     DPH,A
025F 120000      E     LCALL   ?C?LLDXDATA
0262 7B00              MOV     R3,#00H
0264 7A00              MOV     R2,#00H
0266 7980              MOV     R1,#080H
0268 783F              MOV     R0,#03FH
026A 120000      E     LCALL   ?C?FPCMP3
026D 6029              JZ      ?C0154
                                           ; SOURCE LINE # 866
026F 900000      R     MOV     DPTR,#value_encoder
0272 120000      E     LCALL   ?C?LLDXDATA
0275 EC                MOV     A,R4
0276 120000      E     LCALL   ?C?FCASTL
0279 AB00        R     MOV     R3,index
027B EB                MOV     A,R3
027C 25E0              ADD     A,ACC
027E 25E0              ADD     A,ACC
0280 2400        E     ADD     A,#LOW c_mem+044H
0282 F582              MOV     DPL,A
0284 E4                CLR     A
0285 3400        E     ADDC    A,#HIGH c_mem+044H
0287 F583              MOV     DPH,A
0289 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 74  

028C 120000      E     LCALL   ?C?FPMUL
028F 120000      E     LCALL   ?C?CASTF
0292 900000      R     MOV     DPTR,#value_encoder
0295 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 867
0298         ?C0154:
                                           ; SOURCE LINE # 869
0298 900000      R     MOV     DPTR,#value_encoder
029B 120000      E     LCALL   ?C?LLDXDATA
029E AB00        R     MOV     R3,index
02A0 EB                MOV     A,R3
02A1 25E0              ADD     A,ACC
02A3 25E0              ADD     A,ACC
02A5 2400        E     ADD     A,#LOW g_meas
02A7 F582              MOV     DPL,A
02A9 E4                CLR     A
02AA 3400        E     ADDC    A,#HIGH g_meas
02AC F583              MOV     DPH,A
02AE 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 870
02B1         ?C0145:
                                           ; SOURCE LINE # 873
02B1 300003      R     JNB     pos_reconstruct,$ + 6H
02B4 020000      R     LJMP    ?C0137
                                           ; SOURCE LINE # 874
02B7 900000      R     MOV     DPTR,#one_time_execute
02BA E0                MOVX    A,@DPTR
02BB FF                MOV     R7,A
02BC EF                MOV     A,R7
02BD C3                CLR     C
02BE 9422              SUBB    A,#022H
02C0 5008              JNC     ?C0156
                                           ; SOURCE LINE # 875
02C2 900000      R     MOV     DPTR,#one_time_execute
02C5 E0                MOVX    A,@DPTR
02C6 04                INC     A
02C7 F0                MOVX    @DPTR,A
02C8 8032              SJMP    ?C0157
02CA         ?C0156:
                                           ; SOURCE LINE # 878
02CA 900000      E     MOV     DPTR,#c_mem+079H
02CD E0                MOVX    A,@DPTR
02CE FF                MOV     R7,A
02CF EF                MOV     A,R7
02D0 602A              JZ      ?C0157
                                           ; SOURCE LINE # 879
02D2 900000      E     MOV     DPTR,#g_meas
02D5 120000      E     LCALL   ?C?LLDXDATA
02D8 C004              PUSH    AR4
02DA C005              PUSH    AR5
02DC C006              PUSH    AR6
02DE C007              PUSH    AR7
02E0 900000      E     MOV     DPTR,#g_meas+04H
02E3 120000      E     LCALL   ?C?LLDXDATA
02E6 900000      E     MOV     DPTR,#?_calc_turns_fcn?BYTE+04H
02E9 120000      E     LCALL   ?C?LSTXDATA
02EC D007              POP     AR7
02EE D006              POP     AR6
02F0 D005              POP     AR5
02F2 D004              POP     AR4
02F4 120000      E     LCALL   _calc_turns_fcn
02F7 900000      E     MOV     DPTR,#g_meas+014H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 75  

02FA EF                MOV     A,R7
02FB F0                MOVX    @DPTR,A
02FC         ?C0157:
                                           ; SOURCE LINE # 881
02FC 900000      E     MOV     DPTR,#g_meas
02FF 120000      E     LCALL   ?C?LLDXDATA
0302 C004              PUSH    AR4
0304 C005              PUSH    AR5
0306 C006              PUSH    AR6
0308 C007              PUSH    AR7
030A 900000      E     MOV     DPTR,#g_meas+014H
030D E0                MOVX    A,@DPTR
030E FF                MOV     R7,A
030F EF                MOV     A,R7
0310 33                RLC     A
0311 95E0              SUBB    A,ACC
0313 FE                MOV     R6,A
0314 FD                MOV     R5,A
0315 FC                MOV     R4,A
0316 7810              MOV     R0,#010H
0318 120000      E     LCALL   ?C?LSHL
031B A804              MOV     R0,AR4
031D A905              MOV     R1,AR5
031F AA06              MOV     R2,AR6
0321 AB07              MOV     R3,AR7
0323 D007              POP     AR7
0325 D006              POP     AR6
0327 D005              POP     AR5
0329 D004              POP     AR4
032B 120000      E     LCALL   ?C?LADD
032E 900000      E     MOV     DPTR,#g_meas
0331 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 884
0334 900000      E     MOV     DPTR,#g_meas
0337 120000      E     LCALL   ?C?LLDXDATA
033A 900000      E     MOV     DPTR,#g_ref
033D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 886
0340 900000      E     MOV     DPTR,#g_ref+018H
0343 E0                MOVX    A,@DPTR
0344 FF                MOV     R7,A
0345 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 888
0348 D200        R     SETB    pos_reconstruct
                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 890
034A         ?C0137:
034A 22                RET     
             ; FUNCTION _encoder_reading (END)

             ; FUNCTION analog_read_end (BEGIN)
                                           ; SOURCE LINE # 896
0000         ?C0159:
                                           ; SOURCE LINE # 926
0000 120000      E     LCALL   ADC_STATUS_Read
0003 EF                MOV     A,R7
0004 700A              JNZ     ?C0160
                                           ; SOURCE LINE # 927
0006 3000F7            JNB     interrupt_flag,?C0159
                                           ; SOURCE LINE # 928
0009 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 929
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 76  

000B 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 931
000E 80F0              SJMP    ?C0159
0010         ?C0160:
                                           ; SOURCE LINE # 934
0010 900000      E     MOV     DPTR,#ADC_buf
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 249A              ADD     A,#09AH
001B FF                MOV     R7,A
001C EE                MOV     A,R6
001D 34F9              ADDC    A,#0F9H
001F FE                MOV     R6,A
0020 EE                MOV     A,R6
0021 33                RLC     A
0022 95E0              SUBB    A,ACC
0024 FD                MOV     R5,A
0025 FC                MOV     R4,A
0026 7BA0              MOV     R3,#0A0H
0028 7A07              MOV     R2,#07H
002A 7900              MOV     R1,#00H
002C 7800              MOV     R0,#00H
002E 120000      E     LCALL   ?C?LMUL
0031 7807              MOV     R0,#07H
0033 120000      E     LCALL   ?C?SLSHR
0036 900000      E     MOV     DPTR,#dev_tension
0039 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 936
003C 300005            JNB     interrupt_flag,?C0162
                                           ; SOURCE LINE # 937
003F C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 938
0041 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 939
0044         ?C0162:
                                           ; SOURCE LINE # 943
0044 7F00              MOV     R7,#00H
0046 7E00              MOV     R6,#00H
0048 7D00              MOV     R5,#00H
004A 7C00              MOV     R4,#00H
004C 900000      E     MOV     DPTR,#dev_tension
004F 120000      E     LCALL   ?C?LLDXDATA0
0052 D3                SETB    C
0053 120000      E     LCALL   ?C?SLCMP
0056 5003              JNC     $ + 5H
0058 020000      R     LJMP    ?C0163
                                           ; SOURCE LINE # 946
005B D200        E     SETB    tension_valid
                                           ; SOURCE LINE # 948
005D 900000      E     MOV     DPTR,#g_mem+07BH
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 EF                MOV     A,R7
0063 6003              JZ      ?C0164
                                           ; SOURCE LINE # 949
0065 120000      R     LCALL   pwm_limit_search
0068         ?C0164:
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 77  

                                           ; SOURCE LINE # 952
0068 900000      E     MOV     DPTR,#ADC_buf+02H
006B E0                MOVX    A,@DPTR
006C FE                MOV     R6,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FF                MOV     R7,A
0070 EF                MOV     A,R7
0071 249A              ADD     A,#09AH
0073 FF                MOV     R7,A
0074 EE                MOV     A,R6
0075 34F9              ADDC    A,#0F9H
0077 FE                MOV     R6,A
0078 EE                MOV     A,R6
0079 33                RLC     A
007A 95E0              SUBB    A,ACC
007C FD                MOV     R5,A
007D FC                MOV     R4,A
007E 7BAB              MOV     R3,#0ABH
0080 7A64              MOV     R2,#064H
0082 7900              MOV     R1,#00H
0084 7800              MOV     R0,#00H
0086 120000      E     LCALL   ?C?LMUL
0089 780D              MOV     R0,#0DH
008B 120000      E     LCALL   ?C?SLSHR
008E 900000      E     MOV     DPTR,#pwm_sign
0091 E0                MOVX    A,@DPTR
0092 FD                MOV     R5,A
0093 ED                MOV     A,R5
0094 33                RLC     A
0095 95E0              SUBB    A,ACC
0097 FC                MOV     R4,A
0098 120000      E     LCALL   ?C?IMUL
009B EE                MOV     A,R6
009C 33                RLC     A
009D 95E0              SUBB    A,ACC
009F FD                MOV     R5,A
00A0 FC                MOV     R4,A
00A1 120000      E     LCALL   _filter_i1
00A4 900000      E     MOV     DPTR,#g_meas+0CH
00A7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 956
00AA 300005            JNB     interrupt_flag,?C0165
                                           ; SOURCE LINE # 957
00AD C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 958
00AF 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 959
00B2         ?C0165:
                                           ; SOURCE LINE # 962
00B2 900000      E     MOV     DPTR,#g_mem+06FH
00B5 E0                MOVX    A,@DPTR
00B6 FF                MOV     R7,A
00B7 EF                MOV     A,R7
00B8 7006              JNZ     ?C0166
                                           ; SOURCE LINE # 963
00BA 750000      R     MOV     emg_1_status,#00H
                                           ; SOURCE LINE # 964
00BD 750000      R     MOV     emg_2_status,#00H
                                           ; SOURCE LINE # 965
00C0         ?C0166:
                                           ; SOURCE LINE # 970
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 78  

00C0 E500        R     MOV     A,emg_1_status
00C2 120000      E     LCALL   ?C?CCASE
00C5 0000        R     DW      ?C0168
00C7 00                DB      00H
00C8 0000        R     DW      ?C0174
00CA 01                DB      01H
00CB 0000        R     DW      ?C0175
00CD 02                DB      02H
00CE 0000        R     DW      ?C0178
00D0 03                DB      03H
00D1 0000              DW      00H
00D3 0000        R     DW      ?C0167
                                           ; SOURCE LINE # 971
00D5         ?C0168:
                                           ; SOURCE LINE # 972
00D5 900000      E     MOV     DPTR,#ADC_buf+04H
00D8 E0                MOVX    A,@DPTR
00D9 FE                MOV     R6,A
00DA A3                INC     DPTR
00DB E0                MOVX    A,@DPTR
00DC FF                MOV     R7,A
00DD EE                MOV     A,R6
00DE 33                RLC     A
00DF 95E0              SUBB    A,ACC
00E1 FD                MOV     R5,A
00E2 FC                MOV     R4,A
00E3 120000      E     LCALL   _filter_ch1
00E6 8E00        R     MOV     i_aux,R6
00E8 8F00        R     MOV     i_aux+01H,R7
                                           ; SOURCE LINE # 973
00EA E500        R     MOV     A,i_aux+01H
00EC 7F00              MOV     R7,#00H
00EE 25E0              ADD     A,ACC
00F0 25E0              ADD     A,ACC
00F2 FE                MOV     R6,A
00F3 EE                MOV     A,R6
00F4 33                RLC     A
00F5 95E0              SUBB    A,ACC
00F7 FD                MOV     R5,A
00F8 FC                MOV     R4,A
00F9 900000      E     MOV     DPTR,#g_mem+070H
00FC 120000      E     LCALL   ?C?LLDXDATA0
00FF 120000      E     LCALL   ?C?ULDIV
0102 8E00        R     MOV     i_aux,R6
0104 8F00        R     MOV     i_aux+01H,R7
                                           ; SOURCE LINE # 975
0106 300005            JNB     interrupt_flag,?C0169
                                           ; SOURCE LINE # 976
0109 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 977
010B 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 978
010E         ?C0169:
                                           ; SOURCE LINE # 980
010E C3                CLR     C
010F E500        R     MOV     A,i_aux
0111 6480              XRL     A,#080H
0113 9480              SUBB    A,#080H
0115 5008              JNC     ?C0170
                                           ; SOURCE LINE # 981
0117 750000      R     MOV     i_aux,#00H
011A 750000      R     MOV     i_aux+01H,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 79  

011D 8013              SJMP    ?C0171
011F         ?C0170:
                                           ; SOURCE LINE # 983
011F D3                SETB    C
0120 E500        R     MOV     A,i_aux+01H
0122 9400              SUBB    A,#00H
0124 E500        R     MOV     A,i_aux
0126 6480              XRL     A,#080H
0128 9484              SUBB    A,#084H
012A 4006              JC      ?C0171
                                           ; SOURCE LINE # 984
012C 750004      R     MOV     i_aux,#04H
012F 750000      R     MOV     i_aux+01H,#00H
0132         ?C0171:
                                           ; SOURCE LINE # 986
0132 AE00        R     MOV     R6,i_aux
0134 AF00        R     MOV     R7,i_aux+01H
0136 EE                MOV     A,R6
0137 33                RLC     A
0138 95E0              SUBB    A,ACC
013A FD                MOV     R5,A
013B FC                MOV     R4,A
013C 900000      E     MOV     DPTR,#g_meas+017H
013F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 988
0142 200003      E     JB      interrupt_flag,$ + 6H
0145 020000      R     LJMP    ?C0167
                                           ; SOURCE LINE # 989
0148 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 990
014A 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 993
014D 020000      R     LJMP    ?C0167
                                           ; SOURCE LINE # 995
0150         ?C0174:
                                           ; SOURCE LINE # 996
0150 900000      R     MOV     DPTR,#emg_counter_1
0153 E4                CLR     A
0154 F0                MOVX    @DPTR,A
0155 A3                INC     DPTR
0156 E4                CLR     A
0157 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 997
0158 7F00              MOV     R7,#00H
015A 7E00              MOV     R6,#00H
015C 7D00              MOV     R5,#00H
015E 7C00              MOV     R4,#00H
0160 900000      E     MOV     DPTR,#g_mem+070H
0163 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 998
0166 750002      R     MOV     emg_1_status,#02H
                                           ; SOURCE LINE # 1000
0169 020000      R     LJMP    ?C0167
                                           ; SOURCE LINE # 1002
016C         ?C0175:
                                           ; SOURCE LINE # 1003
016C 900000      R     MOV     DPTR,#emg_counter_1
016F E4                CLR     A
0170 75F001            MOV     B,#01H
0173 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1004
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 80  

0176 900000      R     MOV     DPTR,#emg_counter_1
0179 E0                MOVX    A,@DPTR
017A FE                MOV     R6,A
017B A3                INC     DPTR
017C E0                MOVX    A,@DPTR
017D FF                MOV     R7,A
017E EF                MOV     A,R7
017F 64F4              XRL     A,#0F4H
0181 7003              JNZ     ?C0226
0183 EE                MOV     A,R6
0184 6401              XRL     A,#01H
0186         ?C0226:
0186 6003              JZ      $ + 5H
0188 020000      R     LJMP    ?C0167
                                           ; SOURCE LINE # 1005
018B 900000      R     MOV     DPTR,#emg_counter_1
018E E4                CLR     A
018F F0                MOVX    @DPTR,A
0190 A3                INC     DPTR
0191 E4                CLR     A
0192 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1006
0193 7F01              MOV     R7,#01H
0195 120000      E     LCALL   _LED_REG_Write
                                           ; SOURCE LINE # 1008
0198 300005            JNB     interrupt_flag,?C0177
                                           ; SOURCE LINE # 1009
019B C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1010
019D 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1011
01A0         ?C0177:
                                           ; SOURCE LINE # 1013
01A0 750003      R     MOV     emg_1_status,#03H
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
01A3 020000      R     LJMP    ?C0167
                                           ; SOURCE LINE # 1017
01A6         ?C0178:
                                           ; SOURCE LINE # 1019
01A6 900000      R     MOV     DPTR,#emg_counter_1
01A9 E4                CLR     A
01AA 75F001            MOV     B,#01H
01AD 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1020
01B0 900000      E     MOV     DPTR,#g_mem+070H
01B3 120000      E     LCALL   ?C?LLDXDATA
01B6 C004              PUSH    AR4
01B8 C005              PUSH    AR5
01BA C006              PUSH    AR6
01BC C007              PUSH    AR7
01BE 900000      E     MOV     DPTR,#ADC_buf+04H
01C1 E0                MOVX    A,@DPTR
01C2 FE                MOV     R6,A
01C3 A3                INC     DPTR
01C4 E0                MOVX    A,@DPTR
01C5 FF                MOV     R7,A
01C6 EE                MOV     A,R6
01C7 33                RLC     A
01C8 95E0              SUBB    A,ACC
01CA FD                MOV     R5,A
01CB FC                MOV     R4,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 81  

01CC 120000      E     LCALL   _filter_ch1
01CF AB07              MOV     R3,AR7
01D1 AA06              MOV     R2,AR6
01D3 A905              MOV     R1,AR5
01D5 A804              MOV     R0,AR4
01D7 A804              MOV     R0,AR4
01D9 A905              MOV     R1,AR5
01DB AA06              MOV     R2,AR6
01DD AB07              MOV     R3,AR7
01DF D007              POP     AR7
01E1 D006              POP     AR6
01E3 D005              POP     AR5
01E5 D004              POP     AR4
01E7 120000      E     LCALL   ?C?LADD
01EA 900000      E     MOV     DPTR,#g_mem+070H
01ED 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1022
01F0 300005            JNB     interrupt_flag,?C0179
                                           ; SOURCE LINE # 1023
01F3 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1024
01F5 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1025
01F8         ?C0179:
                                           ; SOURCE LINE # 1027
01F8 900000      R     MOV     DPTR,#emg_counter_1
01FB E0                MOVX    A,@DPTR
01FC FE                MOV     R6,A
01FD A3                INC     DPTR
01FE E0                MOVX    A,@DPTR
01FF FF                MOV     R7,A
0200 EF                MOV     A,R7
0201 B4E833            CJNE    A,#0E8H,?C0167
0204 EE                MOV     A,R6
0205 B4032F            CJNE    A,#03H,?C0167
                                           ; SOURCE LINE # 1028
0208 900000      E     MOV     DPTR,#g_mem+070H
020B 120000      E     LCALL   ?C?LLDXDATA
020E 7BE8              MOV     R3,#0E8H
0210 7A03              MOV     R2,#03H
0212 7900              MOV     R1,#00H
0214 7800              MOV     R0,#00H
0216 120000      E     LCALL   ?C?ULDIV
0219 900000      E     MOV     DPTR,#g_mem+070H
021C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1030
021F 300005            JNB     interrupt_flag,?C0181
                                           ; SOURCE LINE # 1031
0222 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1032
0224 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1033
0227         ?C0181:
                                           ; SOURCE LINE # 1035
0227 7F00              MOV     R7,#00H
0229 120000      E     LCALL   _LED_REG_Write
                                           ; SOURCE LINE # 1036
022C 900000      R     MOV     DPTR,#emg_counter_1
022F E4                CLR     A
0230 F0                MOVX    @DPTR,A
0231 A3                INC     DPTR
0232 E4                CLR     A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 82  

0233 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1038
0234 750000      R     MOV     emg_1_status,#00H
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1044
0237         ?C0167:
                                           ; SOURCE LINE # 1046
0237 300005            JNB     interrupt_flag,?C0183
                                           ; SOURCE LINE # 1047
023A C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1048
023C 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1049
023F         ?C0183:
                                           ; SOURCE LINE # 1051
023F E500        R     MOV     A,emg_2_status
0241 120000      E     LCALL   ?C?CCASE
0244 0000        R     DW      ?C0185
0246 00                DB      00H
0247 0000        R     DW      ?C0190
0249 01                DB      01H
024A 0000        R     DW      ?C0192
024C 02                DB      02H
024D 0000        R     DW      ?C0195
024F 03                DB      03H
0250 0000        R     DW      ?C0202
0252 04                DB      04H
0253 0000              DW      00H
0255 0000        R     DW      ?C0184
                                           ; SOURCE LINE # 1052
0257         ?C0185:
                                           ; SOURCE LINE # 1053
0257 900000      E     MOV     DPTR,#ADC_buf+06H
025A E0                MOVX    A,@DPTR
025B FE                MOV     R6,A
025C A3                INC     DPTR
025D E0                MOVX    A,@DPTR
025E FF                MOV     R7,A
025F EE                MOV     A,R6
0260 33                RLC     A
0261 95E0              SUBB    A,ACC
0263 FD                MOV     R5,A
0264 FC                MOV     R4,A
0265 120000      E     LCALL   _filter_ch2
0268 8E00        R     MOV     i_aux,R6
026A 8F00        R     MOV     i_aux+01H,R7
                                           ; SOURCE LINE # 1054
026C E500        R     MOV     A,i_aux+01H
026E 7F00              MOV     R7,#00H
0270 25E0              ADD     A,ACC
0272 25E0              ADD     A,ACC
0274 FE                MOV     R6,A
0275 EE                MOV     A,R6
0276 33                RLC     A
0277 95E0              SUBB    A,ACC
0279 FD                MOV     R5,A
027A FC                MOV     R4,A
027B 900000      E     MOV     DPTR,#g_mem+074H
027E 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 83  

0281 120000      E     LCALL   ?C?ULDIV
0284 8E00        R     MOV     i_aux,R6
0286 8F00        R     MOV     i_aux+01H,R7
                                           ; SOURCE LINE # 1056
0288 300005            JNB     interrupt_flag,?C0186
                                           ; SOURCE LINE # 1057
028B C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1058
028D 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1059
0290         ?C0186:
                                           ; SOURCE LINE # 1061
0290 C3                CLR     C
0291 E500        R     MOV     A,i_aux
0293 6480              XRL     A,#080H
0295 9480              SUBB    A,#080H
0297 5008              JNC     ?C0187
                                           ; SOURCE LINE # 1062
0299 750000      R     MOV     i_aux,#00H
029C 750000      R     MOV     i_aux+01H,#00H
029F 8013              SJMP    ?C0188
02A1         ?C0187:
                                           ; SOURCE LINE # 1064
02A1 D3                SETB    C
02A2 E500        R     MOV     A,i_aux+01H
02A4 9400              SUBB    A,#00H
02A6 E500        R     MOV     A,i_aux
02A8 6480              XRL     A,#080H
02AA 9484              SUBB    A,#084H
02AC 4006              JC      ?C0188
                                           ; SOURCE LINE # 1065
02AE 750004      R     MOV     i_aux,#04H
02B1 750000      R     MOV     i_aux+01H,#00H
02B4         ?C0188:
                                           ; SOURCE LINE # 1067
02B4 AE00        R     MOV     R6,i_aux
02B6 AF00        R     MOV     R7,i_aux+01H
02B8 EE                MOV     A,R6
02B9 33                RLC     A
02BA 95E0              SUBB    A,ACC
02BC FD                MOV     R5,A
02BD FC                MOV     R4,A
02BE 900000      E     MOV     DPTR,#g_meas+01BH
02C1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1069
02C4 020000      R     LJMP    ?C0184
                                           ; SOURCE LINE # 1071
02C7         ?C0190:
                                           ; SOURCE LINE # 1072
02C7 900000      R     MOV     DPTR,#emg_counter_2
02CA E4                CLR     A
02CB F0                MOVX    @DPTR,A
02CC A3                INC     DPTR
02CD E4                CLR     A
02CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1073
02CF 7F00              MOV     R7,#00H
02D1 7E00              MOV     R6,#00H
02D3 7D00              MOV     R5,#00H
02D5 7C00              MOV     R4,#00H
02D7 900000      E     MOV     DPTR,#g_mem+074H
02DA 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 84  

                                           ; SOURCE LINE # 1075
02DD 300005            JNB     interrupt_flag,?C0191
                                           ; SOURCE LINE # 1076
02E0 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1077
02E2 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1078
02E5         ?C0191:
                                           ; SOURCE LINE # 1080
02E5 750004      R     MOV     emg_2_status,#04H
                                           ; SOURCE LINE # 1081
02E8 020000      R     LJMP    ?C0184
                                           ; SOURCE LINE # 1083
02EB         ?C0192:
                                           ; SOURCE LINE # 1084
02EB 900000      R     MOV     DPTR,#emg_counter_2
02EE E4                CLR     A
02EF 75F001            MOV     B,#01H
02F2 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1085
02F5 900000      R     MOV     DPTR,#emg_counter_2
02F8 E0                MOVX    A,@DPTR
02F9 FE                MOV     R6,A
02FA A3                INC     DPTR
02FB E0                MOVX    A,@DPTR
02FC FF                MOV     R7,A
02FD EF                MOV     A,R7
02FE 64F4              XRL     A,#0F4H
0300 7003              JNZ     ?C0228
0302 EE                MOV     A,R6
0303 6401              XRL     A,#01H
0305         ?C0228:
0305 6003              JZ      $ + 5H
0307 020000      R     LJMP    ?C0184
                                           ; SOURCE LINE # 1086
030A 900000      R     MOV     DPTR,#emg_counter_2
030D E4                CLR     A
030E F0                MOVX    @DPTR,A
030F A3                INC     DPTR
0310 E4                CLR     A
0311 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1087
0312 7F01              MOV     R7,#01H
0314 120000      E     LCALL   _LED_REG_Write
                                           ; SOURCE LINE # 1089
0317 300005            JNB     interrupt_flag,?C0194
                                           ; SOURCE LINE # 1090
031A C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1091
031C 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1092
031F         ?C0194:
                                           ; SOURCE LINE # 1094
031F 750003      R     MOV     emg_2_status,#03H
                                           ; SOURCE LINE # 1095
                                           ; SOURCE LINE # 1096
0322 020000      R     LJMP    ?C0184
                                           ; SOURCE LINE # 1098
0325         ?C0195:
                                           ; SOURCE LINE # 1100
0325 900000      R     MOV     DPTR,#emg_counter_2
0328 E4                CLR     A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 85  

0329 75F001            MOV     B,#01H
032C 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1101
032F 900000      E     MOV     DPTR,#g_mem+074H
0332 120000      E     LCALL   ?C?LLDXDATA
0335 C004              PUSH    AR4
0337 C005              PUSH    AR5
0339 C006              PUSH    AR6
033B C007              PUSH    AR7
033D 900000      E     MOV     DPTR,#ADC_buf+06H
0340 E0                MOVX    A,@DPTR
0341 FE                MOV     R6,A
0342 A3                INC     DPTR
0343 E0                MOVX    A,@DPTR
0344 FF                MOV     R7,A
0345 EE                MOV     A,R6
0346 33                RLC     A
0347 95E0              SUBB    A,ACC
0349 FD                MOV     R5,A
034A FC                MOV     R4,A
034B 120000      E     LCALL   _filter_ch2
034E AB07              MOV     R3,AR7
0350 AA06              MOV     R2,AR6
0352 A905              MOV     R1,AR5
0354 A804              MOV     R0,AR4
0356 A804              MOV     R0,AR4
0358 A905              MOV     R1,AR5
035A AA06              MOV     R2,AR6
035C AB07              MOV     R3,AR7
035E D007              POP     AR7
0360 D006              POP     AR6
0362 D005              POP     AR5
0364 D004              POP     AR4
0366 120000      E     LCALL   ?C?LADD
0369 900000      E     MOV     DPTR,#g_mem+074H
036C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1103
036F 300005            JNB     interrupt_flag,?C0196
                                           ; SOURCE LINE # 1104
0372 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1105
0374 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1106
0377         ?C0196:
                                           ; SOURCE LINE # 1108
0377 900000      R     MOV     DPTR,#emg_counter_2
037A E0                MOVX    A,@DPTR
037B FE                MOV     R6,A
037C A3                INC     DPTR
037D E0                MOVX    A,@DPTR
037E FF                MOV     R7,A
037F EF                MOV     A,R7
0380 64E8              XRL     A,#0E8H
0382 7003              JNZ     ?C0229
0384 EE                MOV     A,R6
0385 6403              XRL     A,#03H
0387         ?C0229:
0387 6003              JZ      $ + 5H
0389 020000      R     LJMP    ?C0184
                                           ; SOURCE LINE # 1109
038C 900000      E     MOV     DPTR,#g_mem+074H
038F 120000      E     LCALL   ?C?LLDXDATA
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 86  

0392 7BE8              MOV     R3,#0E8H
0394 7A03              MOV     R2,#03H
0396 7900              MOV     R1,#00H
0398 7800              MOV     R0,#00H
039A 120000      E     LCALL   ?C?ULDIV
039D 900000      E     MOV     DPTR,#g_mem+074H
03A0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1110
03A3 7F00              MOV     R7,#00H
03A5 120000      E     LCALL   _LED_REG_Write
                                           ; SOURCE LINE # 1111
03A8 900000      R     MOV     DPTR,#emg_counter_2
03AB E4                CLR     A
03AC F0                MOVX    @DPTR,A
03AD A3                INC     DPTR
03AE E4                CLR     A
03AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1113
03B0 300005            JNB     interrupt_flag,?C0198
                                           ; SOURCE LINE # 1114
03B3 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1115
03B5 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1116
03B8         ?C0198:
                                           ; SOURCE LINE # 1119
03B8 900000      E     MOV     DPTR,#c_mem+033H
03BB E0                MOVX    A,@DPTR
03BC FF                MOV     R7,A
03BD EF                MOV     A,R7
03BE 6402              XRL     A,#02H
03C0 601D              JZ      ?C0200
03C2 900000      E     MOV     DPTR,#c_mem+033H
03C5 E0                MOVX    A,@DPTR
03C6 FF                MOV     R7,A
03C7 EF                MOV     A,R7
03C8 6403              XRL     A,#03H
03CA 6013              JZ      ?C0200
03CC 900000      E     MOV     DPTR,#c_mem+033H
03CF E0                MOVX    A,@DPTR
03D0 FF                MOV     R7,A
03D1 EF                MOV     A,R7
03D2 6404              XRL     A,#04H
03D4 6009              JZ      ?C0200
03D6 900000      E     MOV     DPTR,#c_mem+033H
03D9 E0                MOVX    A,@DPTR
03DA FF                MOV     R7,A
03DB EF                MOV     A,R7
03DC B40532            CJNE    A,#05H,?C0199
03DF         ?C0200:
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1123
03DF 900000      E     MOV     DPTR,#c_mem+034H
03E2 E0                MOVX    A,@DPTR
03E3 FF                MOV     R7,A
03E4 EF                MOV     A,R7
03E5 7018              JNZ     ?C0201
                                           ; SOURCE LINE # 1124
03E7 900000      E     MOV     DPTR,#g_meas
03EA 120000      E     LCALL   ?C?LLDXDATA
03ED 900000      E     MOV     DPTR,#g_ref
03F0 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 87  

                                           ; SOURCE LINE # 1125
03F3 900000      E     MOV     DPTR,#g_meas+04H
03F6 120000      E     LCALL   ?C?LLDXDATA
03F9 900000      E     MOV     DPTR,#g_ref+04H
03FC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1126
03FF         ?C0201:
                                           ; SOURCE LINE # 1127
03FF 900000      E     MOV     DPTR,#c_mem+032H
0402 E0                MOVX    A,@DPTR
0403 FF                MOV     R7,A
0404 900000      E     MOV     DPTR,#g_ref+018H
0407 EF                MOV     A,R7
0408 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1128
0409 900000      E     MOV     DPTR,#g_ref+018H
040C E0                MOVX    A,@DPTR
040D FF                MOV     R7,A
040E 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 1129
0411         ?C0199:
                                           ; SOURCE LINE # 1130
0411 750000      R     MOV     emg_2_status,#00H
                                           ; SOURCE LINE # 1131
                                           ; SOURCE LINE # 1132
0414 8007              SJMP    ?C0184
                                           ; SOURCE LINE # 1134
0416         ?C0202:
                                           ; SOURCE LINE # 1135
0416 E500        R     MOV     A,emg_1_status
0418 7003              JNZ     ?C0184
                                           ; SOURCE LINE # 1136
041A 750002      R     MOV     emg_2_status,#02H
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1139
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1141
041D         ?C0184:
                                           ; SOURCE LINE # 1143
041D 30007D            JNB     interrupt_flag,?C0206
                                           ; SOURCE LINE # 1144
0420 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1145
0422 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1147
0425 8076              SJMP    ?C0206
0427         ?C0163:
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
0427 750001      R     MOV     emg_1_status,#01H
                                           ; SOURCE LINE # 1150
042A 750001      R     MOV     emg_2_status,#01H
                                           ; SOURCE LINE # 1152
042D C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 1154
042F 300005            JNB     interrupt_flag,?C0207
                                           ; SOURCE LINE # 1155
0432 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1156
0434 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1157
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 88  

0437         ?C0207:
                                           ; SOURCE LINE # 1159
0437 900000      E     MOV     DPTR,#c_mem+06FH
043A E0                MOVX    A,@DPTR
043B FF                MOV     R7,A
043C EF                MOV     A,R7
043D 6034              JZ      ?C0208
                                           ; SOURCE LINE # 1160
043F 900000      E     MOV     DPTR,#c_mem+033H
0442 E0                MOVX    A,@DPTR
0443 FF                MOV     R7,A
0444 EF                MOV     A,R7
0445 6402              XRL     A,#02H
0447 601D              JZ      ?C0210
0449 900000      E     MOV     DPTR,#c_mem+033H
044C E0                MOVX    A,@DPTR
044D FF                MOV     R7,A
044E EF                MOV     A,R7
044F 6403              XRL     A,#03H
0451 6013              JZ      ?C0210
0453 900000      E     MOV     DPTR,#c_mem+033H
0456 E0                MOVX    A,@DPTR
0457 FF                MOV     R7,A
0458 EF                MOV     A,R7
0459 6404              XRL     A,#04H
045B 6009              JZ      ?C0210
045D 900000      E     MOV     DPTR,#c_mem+033H
0460 E0                MOVX    A,@DPTR
0461 FF                MOV     R7,A
0462 EF                MOV     A,R7
0463 B4050D            CJNE    A,#05H,?C0208
0466         ?C0210:
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
0466 900000      E     MOV     DPTR,#g_ref+018H
0469 E4                CLR     A
046A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1165
046B 900000      E     MOV     DPTR,#g_ref+018H
046E E0                MOVX    A,@DPTR
046F FF                MOV     R7,A
0470 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 1166
                                           ; SOURCE LINE # 1167
0473         ?C0208:
                                           ; SOURCE LINE # 1170
0473 7F00              MOV     R7,#00H
0475 7E00              MOV     R6,#00H
0477 7D00              MOV     R5,#00H
0479 7C00              MOV     R4,#00H
047B 900000      E     MOV     DPTR,#g_meas+0CH
047E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1173
0481 7F00              MOV     R7,#00H
0483 7E00              MOV     R6,#00H
0485 7D00              MOV     R5,#00H
0487 7C00              MOV     R4,#00H
0489 900000      E     MOV     DPTR,#g_meas+017H
048C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1174
048F 7F00              MOV     R7,#00H
0491 7E00              MOV     R6,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 89  

0493 7D00              MOV     R5,#00H
0495 7C00              MOV     R4,#00H
0497 900000      E     MOV     DPTR,#g_meas+01BH
049A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1176
049D         ?C0206:
                                           ; SOURCE LINE # 1178
049D 300005            JNB     interrupt_flag,?C0212
                                           ; SOURCE LINE # 1179
04A0 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1180
04A2 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1181
                                           ; SOURCE LINE # 1182
04A5         ?C0212:
04A5 22                RET     
             ; FUNCTION analog_read_end (END)

             ; FUNCTION overcurrent_control (BEGIN)
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1189
0000 900000      E     MOV     DPTR,#c_mem+069H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 4E                ORL     A,R6
000A 606C              JZ      ?C0220
                                           ; SOURCE LINE # 1191
000C 900000      E     MOV     DPTR,#c_mem+069H
000F E0                MOVX    A,@DPTR
0010 FE                MOV     R6,A
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EE                MOV     A,R6
0015 33                RLC     A
0016 95E0              SUBB    A,ACC
0018 FD                MOV     R5,A
0019 FC                MOV     R4,A
001A 900000      E     MOV     DPTR,#g_meas+0CH
001D 120000      E     LCALL   ?C?LLDXDATA0
0020 D3                SETB    C
0021 120000      E     LCALL   ?C?SLCMP
0024 4008              JC      ?C0214
                                           ; SOURCE LINE # 1193
0026 900000      E     MOV     DPTR,#dev_pwm_limit
0029 E0                MOVX    A,@DPTR
002A 14                DEC     A
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1195
002C 8028              SJMP    ?C0215
002E         ?C0214:
002E 900000      E     MOV     DPTR,#c_mem+069H
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 90  

0037 24F6              ADD     A,#0F6H
0039 FF                MOV     R7,A
003A EE                MOV     A,R6
003B 34FF              ADDC    A,#0FFH
003D FE                MOV     R6,A
003E EE                MOV     A,R6
003F 33                RLC     A
0040 95E0              SUBB    A,ACC
0042 FD                MOV     R5,A
0043 FC                MOV     R4,A
0044 900000      E     MOV     DPTR,#g_meas+0CH
0047 120000      E     LCALL   ?C?LLDXDATA0
004A C3                CLR     C
004B 120000      E     LCALL   ?C?SLCMP
004E 5006              JNC     ?C0215
                                           ; SOURCE LINE # 1197
0050 900000      E     MOV     DPTR,#dev_pwm_limit
0053 E0                MOVX    A,@DPTR
0054 04                INC     A
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1198
0056         ?C0215:
                                           ; SOURCE LINE # 1201
0056 900000      E     MOV     DPTR,#dev_pwm_limit
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C C3                CLR     C
005D 9400              SUBB    A,#00H
005F 5006              JNC     ?C0217
                                           ; SOURCE LINE # 1202
0061 900000      E     MOV     DPTR,#dev_pwm_limit
0064 E4                CLR     A
0065 F0                MOVX    @DPTR,A
0066 22                RET     
0067         ?C0217:
                                           ; SOURCE LINE # 1204
0067 900000      E     MOV     DPTR,#dev_pwm_limit
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D D3                SETB    C
006E 9464              SUBB    A,#064H
0070 4006              JC      ?C0220
                                           ; SOURCE LINE # 1205
0072 900000      E     MOV     DPTR,#dev_pwm_limit
0075 7464              MOV     A,#064H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1206
                                           ; SOURCE LINE # 1207
0078         ?C0220:
0078 22                RET     
             ; FUNCTION overcurrent_control (END)

             ; FUNCTION pwm_limit_search (BEGIN)
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1217
0000 7F9C              MOV     R7,#09CH
0002 7E63              MOV     R6,#063H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      E     MOV     DPTR,#dev_tension
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 91  

000B 120000      E     LCALL   ?C?LLDXDATA0
000E D3                SETB    C
000F 120000      E     LCALL   ?C?SLCMP
0012 4006              JC      ?C0221
                                           ; SOURCE LINE # 1218
0014 900000      E     MOV     DPTR,#dev_pwm_limit
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1219
0019 22                RET     
001A         ?C0221:
001A 7FEC              MOV     R7,#0ECH
001C 7E2C              MOV     R6,#02CH
001E 7D00              MOV     R5,#00H
0020 7C00              MOV     R4,#00H
0022 900000      E     MOV     DPTR,#dev_tension
0025 120000      E     LCALL   ?C?LLDXDATA0
0028 C3                CLR     C
0029 120000      E     LCALL   ?C?SLCMP
002C 5007              JNC     ?C0223
                                           ; SOURCE LINE # 1220
002E 900000      E     MOV     DPTR,#dev_pwm_limit
0031 7464              MOV     A,#064H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1221
0034 22                RET     
0035         ?C0223:
                                           ; SOURCE LINE # 1222
0035 900000      E     MOV     DPTR,#dev_tension
0038 120000      E     LCALL   ?C?LLDXDATA
003B EF                MOV     A,R7
003C 2414              ADD     A,#014H
003E FF                MOV     R7,A
003F EE                MOV     A,R6
0040 34D3              ADDC    A,#0D3H
0042 FE                MOV     R6,A
0043 ED                MOV     A,R5
0044 34FF              ADDC    A,#0FFH
0046 FD                MOV     R5,A
0047 EC                MOV     A,R4
0048 34FF              ADDC    A,#0FFH
004A FC                MOV     R4,A
004B 7809              MOV     R0,#09H
004D 120000      E     LCALL   ?C?SLSHR
0050 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 1223
0052 AF00        R     MOV     R7,index
0054 7400        R     MOV     A,#LOW pwm_preload_values
0056 2F                ADD     A,R7
0057 F582              MOV     DPL,A
0059 E4                CLR     A
005A 3400        R     ADDC    A,#HIGH pwm_preload_values
005C F583              MOV     DPH,A
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 900000      E     MOV     DPTR,#dev_pwm_limit
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1224
                                           ; SOURCE LINE # 1225
0065         ?C0225:
0065 22                RET     
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/16/2016 15:24:57 PAGE 92  

             ; FUNCTION pwm_limit_search (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6945    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    196      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      82
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
